/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package line.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-04-15")
public class NotificationTarget implements org.apache.thrift.TBase<NotificationTarget, NotificationTarget._Fields>, java.io.Serializable, Cloneable, Comparable<NotificationTarget> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NotificationTarget");

  private static final org.apache.thrift.protocol.TField APPLICATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField APPLICATION_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationVersion", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REGION_FIELD_DESC = new org.apache.thrift.protocol.TField("region", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NotificationTargetStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NotificationTargetTupleSchemeFactory());
  }

  private String applicationType; // required
  private String applicationVersion; // required
  private String region; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APPLICATION_TYPE((short)1, "applicationType"),
    APPLICATION_VERSION((short)2, "applicationVersion"),
    REGION((short)3, "region");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APPLICATION_TYPE
          return APPLICATION_TYPE;
        case 2: // APPLICATION_VERSION
          return APPLICATION_VERSION;
        case 3: // REGION
          return REGION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APPLICATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("applicationType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLICATION_VERSION, new org.apache.thrift.meta_data.FieldMetaData("applicationVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGION, new org.apache.thrift.meta_data.FieldMetaData("region", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NotificationTarget.class, metaDataMap);
  }

  public NotificationTarget() {
  }

  public NotificationTarget(
    String applicationType,
    String applicationVersion,
    String region)
  {
    this();
    this.applicationType = applicationType;
    this.applicationVersion = applicationVersion;
    this.region = region;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NotificationTarget(NotificationTarget other) {
    if (other.isSetApplicationType()) {
      this.applicationType = other.applicationType;
    }
    if (other.isSetApplicationVersion()) {
      this.applicationVersion = other.applicationVersion;
    }
    if (other.isSetRegion()) {
      this.region = other.region;
    }
  }

  public NotificationTarget deepCopy() {
    return new NotificationTarget(this);
  }

  @Override
  public void clear() {
    this.applicationType = null;
    this.applicationVersion = null;
    this.region = null;
  }

  public String getApplicationType() {
    return this.applicationType;
  }

  public void setApplicationType(String applicationType) {
    this.applicationType = applicationType;
  }

  public void unsetApplicationType() {
    this.applicationType = null;
  }

  /** Returns true if field applicationType is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationType() {
    return this.applicationType != null;
  }

  public void setApplicationTypeIsSet(boolean value) {
    if (!value) {
      this.applicationType = null;
    }
  }

  public String getApplicationVersion() {
    return this.applicationVersion;
  }

  public void setApplicationVersion(String applicationVersion) {
    this.applicationVersion = applicationVersion;
  }

  public void unsetApplicationVersion() {
    this.applicationVersion = null;
  }

  /** Returns true if field applicationVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationVersion() {
    return this.applicationVersion != null;
  }

  public void setApplicationVersionIsSet(boolean value) {
    if (!value) {
      this.applicationVersion = null;
    }
  }

  public String getRegion() {
    return this.region;
  }

  public void setRegion(String region) {
    this.region = region;
  }

  public void unsetRegion() {
    this.region = null;
  }

  /** Returns true if field region is set (has been assigned a value) and false otherwise */
  public boolean isSetRegion() {
    return this.region != null;
  }

  public void setRegionIsSet(boolean value) {
    if (!value) {
      this.region = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APPLICATION_TYPE:
      if (value == null) {
        unsetApplicationType();
      } else {
        setApplicationType((String)value);
      }
      break;

    case APPLICATION_VERSION:
      if (value == null) {
        unsetApplicationVersion();
      } else {
        setApplicationVersion((String)value);
      }
      break;

    case REGION:
      if (value == null) {
        unsetRegion();
      } else {
        setRegion((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APPLICATION_TYPE:
      return getApplicationType();

    case APPLICATION_VERSION:
      return getApplicationVersion();

    case REGION:
      return getRegion();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APPLICATION_TYPE:
      return isSetApplicationType();
    case APPLICATION_VERSION:
      return isSetApplicationVersion();
    case REGION:
      return isSetRegion();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NotificationTarget)
      return this.equals((NotificationTarget)that);
    return false;
  }

  public boolean equals(NotificationTarget that) {
    if (that == null)
      return false;

    boolean this_present_applicationType = true && this.isSetApplicationType();
    boolean that_present_applicationType = true && that.isSetApplicationType();
    if (this_present_applicationType || that_present_applicationType) {
      if (!(this_present_applicationType && that_present_applicationType))
        return false;
      if (!this.applicationType.equals(that.applicationType))
        return false;
    }

    boolean this_present_applicationVersion = true && this.isSetApplicationVersion();
    boolean that_present_applicationVersion = true && that.isSetApplicationVersion();
    if (this_present_applicationVersion || that_present_applicationVersion) {
      if (!(this_present_applicationVersion && that_present_applicationVersion))
        return false;
      if (!this.applicationVersion.equals(that.applicationVersion))
        return false;
    }

    boolean this_present_region = true && this.isSetRegion();
    boolean that_present_region = true && that.isSetRegion();
    if (this_present_region || that_present_region) {
      if (!(this_present_region && that_present_region))
        return false;
      if (!this.region.equals(that.region))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_applicationType = true && (isSetApplicationType());
    list.add(present_applicationType);
    if (present_applicationType)
      list.add(applicationType);

    boolean present_applicationVersion = true && (isSetApplicationVersion());
    list.add(present_applicationVersion);
    if (present_applicationVersion)
      list.add(applicationVersion);

    boolean present_region = true && (isSetRegion());
    list.add(present_region);
    if (present_region)
      list.add(region);

    return list.hashCode();
  }

  @Override
  public int compareTo(NotificationTarget other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetApplicationType()).compareTo(other.isSetApplicationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationType, other.applicationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplicationVersion()).compareTo(other.isSetApplicationVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationVersion, other.applicationVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegion()).compareTo(other.isSetRegion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.region, other.region);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NotificationTarget(");
    boolean first = true;

    sb.append("applicationType:");
    if (this.applicationType == null) {
      sb.append("null");
    } else {
      sb.append(this.applicationType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applicationVersion:");
    if (this.applicationVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.applicationVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("region:");
    if (this.region == null) {
      sb.append("null");
    } else {
      sb.append(this.region);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NotificationTargetStandardSchemeFactory implements SchemeFactory {
    public NotificationTargetStandardScheme getScheme() {
      return new NotificationTargetStandardScheme();
    }
  }

  private static class NotificationTargetStandardScheme extends StandardScheme<NotificationTarget> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NotificationTarget struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APPLICATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applicationType = iprot.readString();
              struct.setApplicationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APPLICATION_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applicationVersion = iprot.readString();
              struct.setApplicationVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REGION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.region = iprot.readString();
              struct.setRegionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NotificationTarget struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.applicationType != null) {
        oprot.writeFieldBegin(APPLICATION_TYPE_FIELD_DESC);
        oprot.writeString(struct.applicationType);
        oprot.writeFieldEnd();
      }
      if (struct.applicationVersion != null) {
        oprot.writeFieldBegin(APPLICATION_VERSION_FIELD_DESC);
        oprot.writeString(struct.applicationVersion);
        oprot.writeFieldEnd();
      }
      if (struct.region != null) {
        oprot.writeFieldBegin(REGION_FIELD_DESC);
        oprot.writeString(struct.region);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NotificationTargetTupleSchemeFactory implements SchemeFactory {
    public NotificationTargetTupleScheme getScheme() {
      return new NotificationTargetTupleScheme();
    }
  }

  private static class NotificationTargetTupleScheme extends TupleScheme<NotificationTarget> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NotificationTarget struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetApplicationType()) {
        optionals.set(0);
      }
      if (struct.isSetApplicationVersion()) {
        optionals.set(1);
      }
      if (struct.isSetRegion()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetApplicationType()) {
        oprot.writeString(struct.applicationType);
      }
      if (struct.isSetApplicationVersion()) {
        oprot.writeString(struct.applicationVersion);
      }
      if (struct.isSetRegion()) {
        oprot.writeString(struct.region);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NotificationTarget struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.applicationType = iprot.readString();
        struct.setApplicationTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.applicationVersion = iprot.readString();
        struct.setApplicationVersionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.region = iprot.readString();
        struct.setRegionIsSet(true);
      }
    }
  }

}

