/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.linecorp.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-04-08")
public class ChannelNotificationSetting implements org.apache.thrift.TBase<ChannelNotificationSetting, ChannelNotificationSetting._Fields>, java.io.Serializable, Cloneable, Comparable<ChannelNotificationSetting> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChannelNotificationSetting");

  private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NOTIFICATION_RECEIVABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("notificationReceivable", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField MESSAGE_RECEIVABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("messageReceivable", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField SHOW_DEFAULT_FIELD_DESC = new org.apache.thrift.protocol.TField("showDefault", org.apache.thrift.protocol.TType.BOOL, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ChannelNotificationSettingStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ChannelNotificationSettingTupleSchemeFactory());
  }

  private String channelId; // required
  private String name; // required
  private boolean notificationReceivable; // required
  private boolean messageReceivable; // required
  private boolean showDefault; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHANNEL_ID((short)1, "channelId"),
    NAME((short)2, "name"),
    NOTIFICATION_RECEIVABLE((short)3, "notificationReceivable"),
    MESSAGE_RECEIVABLE((short)4, "messageReceivable"),
    SHOW_DEFAULT((short)5, "showDefault");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHANNEL_ID
          return CHANNEL_ID;
        case 2: // NAME
          return NAME;
        case 3: // NOTIFICATION_RECEIVABLE
          return NOTIFICATION_RECEIVABLE;
        case 4: // MESSAGE_RECEIVABLE
          return MESSAGE_RECEIVABLE;
        case 5: // SHOW_DEFAULT
          return SHOW_DEFAULT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NOTIFICATIONRECEIVABLE_ISSET_ID = 0;
  private static final int __MESSAGERECEIVABLE_ISSET_ID = 1;
  private static final int __SHOWDEFAULT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTIFICATION_RECEIVABLE, new org.apache.thrift.meta_data.FieldMetaData("notificationReceivable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MESSAGE_RECEIVABLE, new org.apache.thrift.meta_data.FieldMetaData("messageReceivable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SHOW_DEFAULT, new org.apache.thrift.meta_data.FieldMetaData("showDefault", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChannelNotificationSetting.class, metaDataMap);
  }

  public ChannelNotificationSetting() {
  }

  public ChannelNotificationSetting(
    String channelId,
    String name,
    boolean notificationReceivable,
    boolean messageReceivable,
    boolean showDefault)
  {
    this();
    this.channelId = channelId;
    this.name = name;
    this.notificationReceivable = notificationReceivable;
    setNotificationReceivableIsSet(true);
    this.messageReceivable = messageReceivable;
    setMessageReceivableIsSet(true);
    this.showDefault = showDefault;
    setShowDefaultIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChannelNotificationSetting(ChannelNotificationSetting other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetChannelId()) {
      this.channelId = other.channelId;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.notificationReceivable = other.notificationReceivable;
    this.messageReceivable = other.messageReceivable;
    this.showDefault = other.showDefault;
  }

  public ChannelNotificationSetting deepCopy() {
    return new ChannelNotificationSetting(this);
  }

  @Override
  public void clear() {
    this.channelId = null;
    this.name = null;
    setNotificationReceivableIsSet(false);
    this.notificationReceivable = false;
    setMessageReceivableIsSet(false);
    this.messageReceivable = false;
    setShowDefaultIsSet(false);
    this.showDefault = false;
  }

  public String getChannelId() {
    return this.channelId;
  }

  public void setChannelId(String channelId) {
    this.channelId = channelId;
  }

  public void unsetChannelId() {
    this.channelId = null;
  }

  /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelId() {
    return this.channelId != null;
  }

  public void setChannelIdIsSet(boolean value) {
    if (!value) {
      this.channelId = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public boolean isNotificationReceivable() {
    return this.notificationReceivable;
  }

  public void setNotificationReceivable(boolean notificationReceivable) {
    this.notificationReceivable = notificationReceivable;
    setNotificationReceivableIsSet(true);
  }

  public void unsetNotificationReceivable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTIFICATIONRECEIVABLE_ISSET_ID);
  }

  /** Returns true if field notificationReceivable is set (has been assigned a value) and false otherwise */
  public boolean isSetNotificationReceivable() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTIFICATIONRECEIVABLE_ISSET_ID);
  }

  public void setNotificationReceivableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTIFICATIONRECEIVABLE_ISSET_ID, value);
  }

  public boolean isMessageReceivable() {
    return this.messageReceivable;
  }

  public void setMessageReceivable(boolean messageReceivable) {
    this.messageReceivable = messageReceivable;
    setMessageReceivableIsSet(true);
  }

  public void unsetMessageReceivable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MESSAGERECEIVABLE_ISSET_ID);
  }

  /** Returns true if field messageReceivable is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageReceivable() {
    return EncodingUtils.testBit(__isset_bitfield, __MESSAGERECEIVABLE_ISSET_ID);
  }

  public void setMessageReceivableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MESSAGERECEIVABLE_ISSET_ID, value);
  }

  public boolean isShowDefault() {
    return this.showDefault;
  }

  public void setShowDefault(boolean showDefault) {
    this.showDefault = showDefault;
    setShowDefaultIsSet(true);
  }

  public void unsetShowDefault() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOWDEFAULT_ISSET_ID);
  }

  /** Returns true if field showDefault is set (has been assigned a value) and false otherwise */
  public boolean isSetShowDefault() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOWDEFAULT_ISSET_ID);
  }

  public void setShowDefaultIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOWDEFAULT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHANNEL_ID:
      if (value == null) {
        unsetChannelId();
      } else {
        setChannelId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case NOTIFICATION_RECEIVABLE:
      if (value == null) {
        unsetNotificationReceivable();
      } else {
        setNotificationReceivable((Boolean)value);
      }
      break;

    case MESSAGE_RECEIVABLE:
      if (value == null) {
        unsetMessageReceivable();
      } else {
        setMessageReceivable((Boolean)value);
      }
      break;

    case SHOW_DEFAULT:
      if (value == null) {
        unsetShowDefault();
      } else {
        setShowDefault((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHANNEL_ID:
      return getChannelId();

    case NAME:
      return getName();

    case NOTIFICATION_RECEIVABLE:
      return isNotificationReceivable();

    case MESSAGE_RECEIVABLE:
      return isMessageReceivable();

    case SHOW_DEFAULT:
      return isShowDefault();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHANNEL_ID:
      return isSetChannelId();
    case NAME:
      return isSetName();
    case NOTIFICATION_RECEIVABLE:
      return isSetNotificationReceivable();
    case MESSAGE_RECEIVABLE:
      return isSetMessageReceivable();
    case SHOW_DEFAULT:
      return isSetShowDefault();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ChannelNotificationSetting)
      return this.equals((ChannelNotificationSetting)that);
    return false;
  }

  public boolean equals(ChannelNotificationSetting that) {
    if (that == null)
      return false;

    boolean this_present_channelId = true && this.isSetChannelId();
    boolean that_present_channelId = true && that.isSetChannelId();
    if (this_present_channelId || that_present_channelId) {
      if (!(this_present_channelId && that_present_channelId))
        return false;
      if (!this.channelId.equals(that.channelId))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_notificationReceivable = true;
    boolean that_present_notificationReceivable = true;
    if (this_present_notificationReceivable || that_present_notificationReceivable) {
      if (!(this_present_notificationReceivable && that_present_notificationReceivable))
        return false;
      if (this.notificationReceivable != that.notificationReceivable)
        return false;
    }

    boolean this_present_messageReceivable = true;
    boolean that_present_messageReceivable = true;
    if (this_present_messageReceivable || that_present_messageReceivable) {
      if (!(this_present_messageReceivable && that_present_messageReceivable))
        return false;
      if (this.messageReceivable != that.messageReceivable)
        return false;
    }

    boolean this_present_showDefault = true;
    boolean that_present_showDefault = true;
    if (this_present_showDefault || that_present_showDefault) {
      if (!(this_present_showDefault && that_present_showDefault))
        return false;
      if (this.showDefault != that.showDefault)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_channelId = true && (isSetChannelId());
    list.add(present_channelId);
    if (present_channelId)
      list.add(channelId);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_notificationReceivable = true;
    list.add(present_notificationReceivable);
    if (present_notificationReceivable)
      list.add(notificationReceivable);

    boolean present_messageReceivable = true;
    list.add(present_messageReceivable);
    if (present_messageReceivable)
      list.add(messageReceivable);

    boolean present_showDefault = true;
    list.add(present_showDefault);
    if (present_showDefault)
      list.add(showDefault);

    return list.hashCode();
  }

  @Override
  public int compareTo(ChannelNotificationSetting other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(other.isSetChannelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, other.channelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotificationReceivable()).compareTo(other.isSetNotificationReceivable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotificationReceivable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notificationReceivable, other.notificationReceivable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessageReceivable()).compareTo(other.isSetMessageReceivable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageReceivable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageReceivable, other.messageReceivable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShowDefault()).compareTo(other.isSetShowDefault());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShowDefault()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showDefault, other.showDefault);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ChannelNotificationSetting(");
    boolean first = true;

    sb.append("channelId:");
    if (this.channelId == null) {
      sb.append("null");
    } else {
      sb.append(this.channelId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notificationReceivable:");
    sb.append(this.notificationReceivable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("messageReceivable:");
    sb.append(this.messageReceivable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("showDefault:");
    sb.append(this.showDefault);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChannelNotificationSettingStandardSchemeFactory implements SchemeFactory {
    public ChannelNotificationSettingStandardScheme getScheme() {
      return new ChannelNotificationSettingStandardScheme();
    }
  }

  private static class ChannelNotificationSettingStandardScheme extends StandardScheme<ChannelNotificationSetting> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChannelNotificationSetting struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHANNEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelId = iprot.readString();
              struct.setChannelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NOTIFICATION_RECEIVABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.notificationReceivable = iprot.readBool();
              struct.setNotificationReceivableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MESSAGE_RECEIVABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.messageReceivable = iprot.readBool();
              struct.setMessageReceivableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SHOW_DEFAULT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.showDefault = iprot.readBool();
              struct.setShowDefaultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChannelNotificationSetting struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.channelId != null) {
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeString(struct.channelId);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NOTIFICATION_RECEIVABLE_FIELD_DESC);
      oprot.writeBool(struct.notificationReceivable);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MESSAGE_RECEIVABLE_FIELD_DESC);
      oprot.writeBool(struct.messageReceivable);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOW_DEFAULT_FIELD_DESC);
      oprot.writeBool(struct.showDefault);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChannelNotificationSettingTupleSchemeFactory implements SchemeFactory {
    public ChannelNotificationSettingTupleScheme getScheme() {
      return new ChannelNotificationSettingTupleScheme();
    }
  }

  private static class ChannelNotificationSettingTupleScheme extends TupleScheme<ChannelNotificationSetting> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChannelNotificationSetting struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetChannelId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetNotificationReceivable()) {
        optionals.set(2);
      }
      if (struct.isSetMessageReceivable()) {
        optionals.set(3);
      }
      if (struct.isSetShowDefault()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetChannelId()) {
        oprot.writeString(struct.channelId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetNotificationReceivable()) {
        oprot.writeBool(struct.notificationReceivable);
      }
      if (struct.isSetMessageReceivable()) {
        oprot.writeBool(struct.messageReceivable);
      }
      if (struct.isSetShowDefault()) {
        oprot.writeBool(struct.showDefault);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChannelNotificationSetting struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.channelId = iprot.readString();
        struct.setChannelIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.notificationReceivable = iprot.readBool();
        struct.setNotificationReceivableIsSet(true);
      }
      if (incoming.get(3)) {
        struct.messageReceivable = iprot.readBool();
        struct.setMessageReceivableIsSet(true);
      }
      if (incoming.get(4)) {
        struct.showDefault = iprot.readBool();
        struct.setShowDefaultIsSet(true);
      }
    }
  }

}

