/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package line.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-04-08")
public class ChannelService {

  public interface Iface {

    public ChannelToken approveChannelAndIssueChannelToken(String channelId) throws ChannelException, org.apache.thrift.TException;

    public String approveChannelAndIssueRequestToken(String channelId, String otpId) throws ChannelException, org.apache.thrift.TException;

    public NotificationFetchResult fetchNotificationItems(long localRev) throws ChannelException, org.apache.thrift.TException;

    public ApprovedChannelInfos getApprovedChannels(long lastSynced, String locale) throws ChannelException, org.apache.thrift.TException;

    public ChannelInfo getChannelInfo(String channelId, String locale) throws ChannelException, org.apache.thrift.TException;

    public ChannelNotificationSetting getChannelNotificationSetting(String channelId, String locale) throws ChannelException, org.apache.thrift.TException;

    public List<ChannelNotificationSetting> getChannelNotificationSettings(String locale) throws ChannelException, org.apache.thrift.TException;

    public ChannelInfos getChannels(long lastSynced, String locale) throws ChannelException, org.apache.thrift.TException;

    public ChannelDomains getDomains(long lastSynced) throws ChannelException, org.apache.thrift.TException;

    public FriendChannelMatricesResponse getFriendChannelMatrices(List<String> channelIds) throws ChannelException, org.apache.thrift.TException;

    public int getNotificationBadgeCount(long localRev) throws ChannelException, org.apache.thrift.TException;

    public ChannelToken issueChannelToken(String channelId) throws ChannelException, org.apache.thrift.TException;

    public String issueRequestToken(String channelId, String otpId) throws ChannelException, org.apache.thrift.TException;

    public RequestTokenResponse issueRequestTokenWithAuthScheme(String channelId, String otpId, List<String> authScheme, String returnUrl) throws ChannelException, org.apache.thrift.TException;

    public String reserveCoinUse(CoinUseReservation request, String locale) throws ChannelException, org.apache.thrift.TException;

    public void revokeChannel(String channelId) throws ChannelException, org.apache.thrift.TException;

    public ChannelSyncDatas syncChannelData(long lastSynced, String locale) throws ChannelException, org.apache.thrift.TException;

    public void updateChannelNotificationSetting(List<ChannelNotificationSetting> setting) throws ChannelException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void approveChannelAndIssueChannelToken(String channelId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void approveChannelAndIssueRequestToken(String channelId, String otpId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void fetchNotificationItems(long localRev, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getApprovedChannels(long lastSynced, String locale, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getChannelInfo(String channelId, String locale, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getChannelNotificationSetting(String channelId, String locale, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getChannelNotificationSettings(String locale, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getChannels(long lastSynced, String locale, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDomains(long lastSynced, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFriendChannelMatrices(List<String> channelIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getNotificationBadgeCount(long localRev, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void issueChannelToken(String channelId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void issueRequestToken(String channelId, String otpId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void issueRequestTokenWithAuthScheme(String channelId, String otpId, List<String> authScheme, String returnUrl, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reserveCoinUse(CoinUseReservation request, String locale, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void revokeChannel(String channelId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void syncChannelData(long lastSynced, String locale, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateChannelNotificationSetting(List<ChannelNotificationSetting> setting, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ChannelToken approveChannelAndIssueChannelToken(String channelId) throws ChannelException, org.apache.thrift.TException
    {
      sendApproveChannelAndIssueChannelToken(channelId);
      return recvApproveChannelAndIssueChannelToken();
    }

    public void sendApproveChannelAndIssueChannelToken(String channelId) throws org.apache.thrift.TException
    {
      approveChannelAndIssueChannelToken_args args = new approveChannelAndIssueChannelToken_args();
      args.setChannelId(channelId);
      sendBase("approveChannelAndIssueChannelToken", args);
    }

    public ChannelToken recvApproveChannelAndIssueChannelToken() throws ChannelException, org.apache.thrift.TException
    {
      approveChannelAndIssueChannelToken_result result = new approveChannelAndIssueChannelToken_result();
      receiveBase(result, "approveChannelAndIssueChannelToken");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "approveChannelAndIssueChannelToken failed: unknown result");
    }

    public String approveChannelAndIssueRequestToken(String channelId, String otpId) throws ChannelException, org.apache.thrift.TException
    {
      sendApproveChannelAndIssueRequestToken(channelId, otpId);
      return recvApproveChannelAndIssueRequestToken();
    }

    public void sendApproveChannelAndIssueRequestToken(String channelId, String otpId) throws org.apache.thrift.TException
    {
      approveChannelAndIssueRequestToken_args args = new approveChannelAndIssueRequestToken_args();
      args.setChannelId(channelId);
      args.setOtpId(otpId);
      sendBase("approveChannelAndIssueRequestToken", args);
    }

    public String recvApproveChannelAndIssueRequestToken() throws ChannelException, org.apache.thrift.TException
    {
      approveChannelAndIssueRequestToken_result result = new approveChannelAndIssueRequestToken_result();
      receiveBase(result, "approveChannelAndIssueRequestToken");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "approveChannelAndIssueRequestToken failed: unknown result");
    }

    public NotificationFetchResult fetchNotificationItems(long localRev) throws ChannelException, org.apache.thrift.TException
    {
      sendFetchNotificationItems(localRev);
      return recvFetchNotificationItems();
    }

    public void sendFetchNotificationItems(long localRev) throws org.apache.thrift.TException
    {
      fetchNotificationItems_args args = new fetchNotificationItems_args();
      args.setLocalRev(localRev);
      sendBase("fetchNotificationItems", args);
    }

    public NotificationFetchResult recvFetchNotificationItems() throws ChannelException, org.apache.thrift.TException
    {
      fetchNotificationItems_result result = new fetchNotificationItems_result();
      receiveBase(result, "fetchNotificationItems");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchNotificationItems failed: unknown result");
    }

    public ApprovedChannelInfos getApprovedChannels(long lastSynced, String locale) throws ChannelException, org.apache.thrift.TException
    {
      sendGetApprovedChannels(lastSynced, locale);
      return recvGetApprovedChannels();
    }

    public void sendGetApprovedChannels(long lastSynced, String locale) throws org.apache.thrift.TException
    {
      getApprovedChannels_args args = new getApprovedChannels_args();
      args.setLastSynced(lastSynced);
      args.setLocale(locale);
      sendBase("getApprovedChannels", args);
    }

    public ApprovedChannelInfos recvGetApprovedChannels() throws ChannelException, org.apache.thrift.TException
    {
      getApprovedChannels_result result = new getApprovedChannels_result();
      receiveBase(result, "getApprovedChannels");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getApprovedChannels failed: unknown result");
    }

    public ChannelInfo getChannelInfo(String channelId, String locale) throws ChannelException, org.apache.thrift.TException
    {
      sendGetChannelInfo(channelId, locale);
      return recvGetChannelInfo();
    }

    public void sendGetChannelInfo(String channelId, String locale) throws org.apache.thrift.TException
    {
      getChannelInfo_args args = new getChannelInfo_args();
      args.setChannelId(channelId);
      args.setLocale(locale);
      sendBase("getChannelInfo", args);
    }

    public ChannelInfo recvGetChannelInfo() throws ChannelException, org.apache.thrift.TException
    {
      getChannelInfo_result result = new getChannelInfo_result();
      receiveBase(result, "getChannelInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getChannelInfo failed: unknown result");
    }

    public ChannelNotificationSetting getChannelNotificationSetting(String channelId, String locale) throws ChannelException, org.apache.thrift.TException
    {
      sendGetChannelNotificationSetting(channelId, locale);
      return recvGetChannelNotificationSetting();
    }

    public void sendGetChannelNotificationSetting(String channelId, String locale) throws org.apache.thrift.TException
    {
      getChannelNotificationSetting_args args = new getChannelNotificationSetting_args();
      args.setChannelId(channelId);
      args.setLocale(locale);
      sendBase("getChannelNotificationSetting", args);
    }

    public ChannelNotificationSetting recvGetChannelNotificationSetting() throws ChannelException, org.apache.thrift.TException
    {
      getChannelNotificationSetting_result result = new getChannelNotificationSetting_result();
      receiveBase(result, "getChannelNotificationSetting");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getChannelNotificationSetting failed: unknown result");
    }

    public List<ChannelNotificationSetting> getChannelNotificationSettings(String locale) throws ChannelException, org.apache.thrift.TException
    {
      sendGetChannelNotificationSettings(locale);
      return recvGetChannelNotificationSettings();
    }

    public void sendGetChannelNotificationSettings(String locale) throws org.apache.thrift.TException
    {
      getChannelNotificationSettings_args args = new getChannelNotificationSettings_args();
      args.setLocale(locale);
      sendBase("getChannelNotificationSettings", args);
    }

    public List<ChannelNotificationSetting> recvGetChannelNotificationSettings() throws ChannelException, org.apache.thrift.TException
    {
      getChannelNotificationSettings_result result = new getChannelNotificationSettings_result();
      receiveBase(result, "getChannelNotificationSettings");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getChannelNotificationSettings failed: unknown result");
    }

    public ChannelInfos getChannels(long lastSynced, String locale) throws ChannelException, org.apache.thrift.TException
    {
      sendGetChannels(lastSynced, locale);
      return recvGetChannels();
    }

    public void sendGetChannels(long lastSynced, String locale) throws org.apache.thrift.TException
    {
      getChannels_args args = new getChannels_args();
      args.setLastSynced(lastSynced);
      args.setLocale(locale);
      sendBase("getChannels", args);
    }

    public ChannelInfos recvGetChannels() throws ChannelException, org.apache.thrift.TException
    {
      getChannels_result result = new getChannels_result();
      receiveBase(result, "getChannels");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getChannels failed: unknown result");
    }

    public ChannelDomains getDomains(long lastSynced) throws ChannelException, org.apache.thrift.TException
    {
      sendGetDomains(lastSynced);
      return recvGetDomains();
    }

    public void sendGetDomains(long lastSynced) throws org.apache.thrift.TException
    {
      getDomains_args args = new getDomains_args();
      args.setLastSynced(lastSynced);
      sendBase("getDomains", args);
    }

    public ChannelDomains recvGetDomains() throws ChannelException, org.apache.thrift.TException
    {
      getDomains_result result = new getDomains_result();
      receiveBase(result, "getDomains");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDomains failed: unknown result");
    }

    public FriendChannelMatricesResponse getFriendChannelMatrices(List<String> channelIds) throws ChannelException, org.apache.thrift.TException
    {
      sendGetFriendChannelMatrices(channelIds);
      return recvGetFriendChannelMatrices();
    }

    public void sendGetFriendChannelMatrices(List<String> channelIds) throws org.apache.thrift.TException
    {
      getFriendChannelMatrices_args args = new getFriendChannelMatrices_args();
      args.setChannelIds(channelIds);
      sendBase("getFriendChannelMatrices", args);
    }

    public FriendChannelMatricesResponse recvGetFriendChannelMatrices() throws ChannelException, org.apache.thrift.TException
    {
      getFriendChannelMatrices_result result = new getFriendChannelMatrices_result();
      receiveBase(result, "getFriendChannelMatrices");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFriendChannelMatrices failed: unknown result");
    }

    public int getNotificationBadgeCount(long localRev) throws ChannelException, org.apache.thrift.TException
    {
      sendGetNotificationBadgeCount(localRev);
      return recvGetNotificationBadgeCount();
    }

    public void sendGetNotificationBadgeCount(long localRev) throws org.apache.thrift.TException
    {
      getNotificationBadgeCount_args args = new getNotificationBadgeCount_args();
      args.setLocalRev(localRev);
      sendBase("getNotificationBadgeCount", args);
    }

    public int recvGetNotificationBadgeCount() throws ChannelException, org.apache.thrift.TException
    {
      getNotificationBadgeCount_result result = new getNotificationBadgeCount_result();
      receiveBase(result, "getNotificationBadgeCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNotificationBadgeCount failed: unknown result");
    }

    public ChannelToken issueChannelToken(String channelId) throws ChannelException, org.apache.thrift.TException
    {
      sendIssueChannelToken(channelId);
      return recvIssueChannelToken();
    }

    public void sendIssueChannelToken(String channelId) throws org.apache.thrift.TException
    {
      issueChannelToken_args args = new issueChannelToken_args();
      args.setChannelId(channelId);
      sendBase("issueChannelToken", args);
    }

    public ChannelToken recvIssueChannelToken() throws ChannelException, org.apache.thrift.TException
    {
      issueChannelToken_result result = new issueChannelToken_result();
      receiveBase(result, "issueChannelToken");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "issueChannelToken failed: unknown result");
    }

    public String issueRequestToken(String channelId, String otpId) throws ChannelException, org.apache.thrift.TException
    {
      sendIssueRequestToken(channelId, otpId);
      return recvIssueRequestToken();
    }

    public void sendIssueRequestToken(String channelId, String otpId) throws org.apache.thrift.TException
    {
      issueRequestToken_args args = new issueRequestToken_args();
      args.setChannelId(channelId);
      args.setOtpId(otpId);
      sendBase("issueRequestToken", args);
    }

    public String recvIssueRequestToken() throws ChannelException, org.apache.thrift.TException
    {
      issueRequestToken_result result = new issueRequestToken_result();
      receiveBase(result, "issueRequestToken");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "issueRequestToken failed: unknown result");
    }

    public RequestTokenResponse issueRequestTokenWithAuthScheme(String channelId, String otpId, List<String> authScheme, String returnUrl) throws ChannelException, org.apache.thrift.TException
    {
      sendIssueRequestTokenWithAuthScheme(channelId, otpId, authScheme, returnUrl);
      return recvIssueRequestTokenWithAuthScheme();
    }

    public void sendIssueRequestTokenWithAuthScheme(String channelId, String otpId, List<String> authScheme, String returnUrl) throws org.apache.thrift.TException
    {
      issueRequestTokenWithAuthScheme_args args = new issueRequestTokenWithAuthScheme_args();
      args.setChannelId(channelId);
      args.setOtpId(otpId);
      args.setAuthScheme(authScheme);
      args.setReturnUrl(returnUrl);
      sendBase("issueRequestTokenWithAuthScheme", args);
    }

    public RequestTokenResponse recvIssueRequestTokenWithAuthScheme() throws ChannelException, org.apache.thrift.TException
    {
      issueRequestTokenWithAuthScheme_result result = new issueRequestTokenWithAuthScheme_result();
      receiveBase(result, "issueRequestTokenWithAuthScheme");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "issueRequestTokenWithAuthScheme failed: unknown result");
    }

    public String reserveCoinUse(CoinUseReservation request, String locale) throws ChannelException, org.apache.thrift.TException
    {
      sendReserveCoinUse(request, locale);
      return recvReserveCoinUse();
    }

    public void sendReserveCoinUse(CoinUseReservation request, String locale) throws org.apache.thrift.TException
    {
      reserveCoinUse_args args = new reserveCoinUse_args();
      args.setRequest(request);
      args.setLocale(locale);
      sendBase("reserveCoinUse", args);
    }

    public String recvReserveCoinUse() throws ChannelException, org.apache.thrift.TException
    {
      reserveCoinUse_result result = new reserveCoinUse_result();
      receiveBase(result, "reserveCoinUse");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reserveCoinUse failed: unknown result");
    }

    public void revokeChannel(String channelId) throws ChannelException, org.apache.thrift.TException
    {
      sendRevokeChannel(channelId);
      recvRevokeChannel();
    }

    public void sendRevokeChannel(String channelId) throws org.apache.thrift.TException
    {
      revokeChannel_args args = new revokeChannel_args();
      args.setChannelId(channelId);
      sendBase("revokeChannel", args);
    }

    public void recvRevokeChannel() throws ChannelException, org.apache.thrift.TException
    {
      revokeChannel_result result = new revokeChannel_result();
      receiveBase(result, "revokeChannel");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public ChannelSyncDatas syncChannelData(long lastSynced, String locale) throws ChannelException, org.apache.thrift.TException
    {
      sendSyncChannelData(lastSynced, locale);
      return recvSyncChannelData();
    }

    public void sendSyncChannelData(long lastSynced, String locale) throws org.apache.thrift.TException
    {
      syncChannelData_args args = new syncChannelData_args();
      args.setLastSynced(lastSynced);
      args.setLocale(locale);
      sendBase("syncChannelData", args);
    }

    public ChannelSyncDatas recvSyncChannelData() throws ChannelException, org.apache.thrift.TException
    {
      syncChannelData_result result = new syncChannelData_result();
      receiveBase(result, "syncChannelData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "syncChannelData failed: unknown result");
    }

    public void updateChannelNotificationSetting(List<ChannelNotificationSetting> setting) throws ChannelException, org.apache.thrift.TException
    {
      sendUpdateChannelNotificationSetting(setting);
      recvUpdateChannelNotificationSetting();
    }

    public void sendUpdateChannelNotificationSetting(List<ChannelNotificationSetting> setting) throws org.apache.thrift.TException
    {
      updateChannelNotificationSetting_args args = new updateChannelNotificationSetting_args();
      args.setSetting(setting);
      sendBase("updateChannelNotificationSetting", args);
    }

    public void recvUpdateChannelNotificationSetting() throws ChannelException, org.apache.thrift.TException
    {
      updateChannelNotificationSetting_result result = new updateChannelNotificationSetting_result();
      receiveBase(result, "updateChannelNotificationSetting");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void approveChannelAndIssueChannelToken(String channelId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      approveChannelAndIssueChannelToken_call method_call = new approveChannelAndIssueChannelToken_call(channelId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class approveChannelAndIssueChannelToken_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String channelId;
      public approveChannelAndIssueChannelToken_call(String channelId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.channelId = channelId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("approveChannelAndIssueChannelToken", org.apache.thrift.protocol.TMessageType.CALL, 0));
        approveChannelAndIssueChannelToken_args args = new approveChannelAndIssueChannelToken_args();
        args.setChannelId(channelId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ChannelToken getResult() throws ChannelException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvApproveChannelAndIssueChannelToken();
      }
    }

    public void approveChannelAndIssueRequestToken(String channelId, String otpId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      approveChannelAndIssueRequestToken_call method_call = new approveChannelAndIssueRequestToken_call(channelId, otpId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class approveChannelAndIssueRequestToken_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String channelId;
      private String otpId;
      public approveChannelAndIssueRequestToken_call(String channelId, String otpId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.channelId = channelId;
        this.otpId = otpId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("approveChannelAndIssueRequestToken", org.apache.thrift.protocol.TMessageType.CALL, 0));
        approveChannelAndIssueRequestToken_args args = new approveChannelAndIssueRequestToken_args();
        args.setChannelId(channelId);
        args.setOtpId(otpId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ChannelException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvApproveChannelAndIssueRequestToken();
      }
    }

    public void fetchNotificationItems(long localRev, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetchNotificationItems_call method_call = new fetchNotificationItems_call(localRev, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchNotificationItems_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long localRev;
      public fetchNotificationItems_call(long localRev, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.localRev = localRev;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchNotificationItems", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetchNotificationItems_args args = new fetchNotificationItems_args();
        args.setLocalRev(localRev);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public NotificationFetchResult getResult() throws ChannelException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvFetchNotificationItems();
      }
    }

    public void getApprovedChannels(long lastSynced, String locale, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getApprovedChannels_call method_call = new getApprovedChannels_call(lastSynced, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getApprovedChannels_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long lastSynced;
      private String locale;
      public getApprovedChannels_call(long lastSynced, String locale, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lastSynced = lastSynced;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getApprovedChannels", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getApprovedChannels_args args = new getApprovedChannels_args();
        args.setLastSynced(lastSynced);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ApprovedChannelInfos getResult() throws ChannelException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetApprovedChannels();
      }
    }

    public void getChannelInfo(String channelId, String locale, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getChannelInfo_call method_call = new getChannelInfo_call(channelId, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getChannelInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String channelId;
      private String locale;
      public getChannelInfo_call(String channelId, String locale, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.channelId = channelId;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getChannelInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getChannelInfo_args args = new getChannelInfo_args();
        args.setChannelId(channelId);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ChannelInfo getResult() throws ChannelException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetChannelInfo();
      }
    }

    public void getChannelNotificationSetting(String channelId, String locale, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getChannelNotificationSetting_call method_call = new getChannelNotificationSetting_call(channelId, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getChannelNotificationSetting_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String channelId;
      private String locale;
      public getChannelNotificationSetting_call(String channelId, String locale, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.channelId = channelId;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getChannelNotificationSetting", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getChannelNotificationSetting_args args = new getChannelNotificationSetting_args();
        args.setChannelId(channelId);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ChannelNotificationSetting getResult() throws ChannelException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetChannelNotificationSetting();
      }
    }

    public void getChannelNotificationSettings(String locale, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getChannelNotificationSettings_call method_call = new getChannelNotificationSettings_call(locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getChannelNotificationSettings_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String locale;
      public getChannelNotificationSettings_call(String locale, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getChannelNotificationSettings", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getChannelNotificationSettings_args args = new getChannelNotificationSettings_args();
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ChannelNotificationSetting> getResult() throws ChannelException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetChannelNotificationSettings();
      }
    }

    public void getChannels(long lastSynced, String locale, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getChannels_call method_call = new getChannels_call(lastSynced, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getChannels_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long lastSynced;
      private String locale;
      public getChannels_call(long lastSynced, String locale, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lastSynced = lastSynced;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getChannels", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getChannels_args args = new getChannels_args();
        args.setLastSynced(lastSynced);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ChannelInfos getResult() throws ChannelException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetChannels();
      }
    }

    public void getDomains(long lastSynced, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDomains_call method_call = new getDomains_call(lastSynced, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDomains_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long lastSynced;
      public getDomains_call(long lastSynced, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lastSynced = lastSynced;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDomains", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDomains_args args = new getDomains_args();
        args.setLastSynced(lastSynced);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ChannelDomains getResult() throws ChannelException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetDomains();
      }
    }

    public void getFriendChannelMatrices(List<String> channelIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFriendChannelMatrices_call method_call = new getFriendChannelMatrices_call(channelIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFriendChannelMatrices_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> channelIds;
      public getFriendChannelMatrices_call(List<String> channelIds, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.channelIds = channelIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFriendChannelMatrices", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFriendChannelMatrices_args args = new getFriendChannelMatrices_args();
        args.setChannelIds(channelIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FriendChannelMatricesResponse getResult() throws ChannelException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetFriendChannelMatrices();
      }
    }

    public void getNotificationBadgeCount(long localRev, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNotificationBadgeCount_call method_call = new getNotificationBadgeCount_call(localRev, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNotificationBadgeCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long localRev;
      public getNotificationBadgeCount_call(long localRev, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.localRev = localRev;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNotificationBadgeCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNotificationBadgeCount_args args = new getNotificationBadgeCount_args();
        args.setLocalRev(localRev);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws ChannelException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetNotificationBadgeCount();
      }
    }

    public void issueChannelToken(String channelId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      issueChannelToken_call method_call = new issueChannelToken_call(channelId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class issueChannelToken_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String channelId;
      public issueChannelToken_call(String channelId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.channelId = channelId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("issueChannelToken", org.apache.thrift.protocol.TMessageType.CALL, 0));
        issueChannelToken_args args = new issueChannelToken_args();
        args.setChannelId(channelId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ChannelToken getResult() throws ChannelException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvIssueChannelToken();
      }
    }

    public void issueRequestToken(String channelId, String otpId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      issueRequestToken_call method_call = new issueRequestToken_call(channelId, otpId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class issueRequestToken_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String channelId;
      private String otpId;
      public issueRequestToken_call(String channelId, String otpId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.channelId = channelId;
        this.otpId = otpId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("issueRequestToken", org.apache.thrift.protocol.TMessageType.CALL, 0));
        issueRequestToken_args args = new issueRequestToken_args();
        args.setChannelId(channelId);
        args.setOtpId(otpId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ChannelException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvIssueRequestToken();
      }
    }

    public void issueRequestTokenWithAuthScheme(String channelId, String otpId, List<String> authScheme, String returnUrl, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      issueRequestTokenWithAuthScheme_call method_call = new issueRequestTokenWithAuthScheme_call(channelId, otpId, authScheme, returnUrl, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class issueRequestTokenWithAuthScheme_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String channelId;
      private String otpId;
      private List<String> authScheme;
      private String returnUrl;
      public issueRequestTokenWithAuthScheme_call(String channelId, String otpId, List<String> authScheme, String returnUrl, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.channelId = channelId;
        this.otpId = otpId;
        this.authScheme = authScheme;
        this.returnUrl = returnUrl;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("issueRequestTokenWithAuthScheme", org.apache.thrift.protocol.TMessageType.CALL, 0));
        issueRequestTokenWithAuthScheme_args args = new issueRequestTokenWithAuthScheme_args();
        args.setChannelId(channelId);
        args.setOtpId(otpId);
        args.setAuthScheme(authScheme);
        args.setReturnUrl(returnUrl);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RequestTokenResponse getResult() throws ChannelException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvIssueRequestTokenWithAuthScheme();
      }
    }

    public void reserveCoinUse(CoinUseReservation request, String locale, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reserveCoinUse_call method_call = new reserveCoinUse_call(request, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reserveCoinUse_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CoinUseReservation request;
      private String locale;
      public reserveCoinUse_call(CoinUseReservation request, String locale, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reserveCoinUse", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reserveCoinUse_args args = new reserveCoinUse_args();
        args.setRequest(request);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ChannelException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvReserveCoinUse();
      }
    }

    public void revokeChannel(String channelId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      revokeChannel_call method_call = new revokeChannel_call(channelId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class revokeChannel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String channelId;
      public revokeChannel_call(String channelId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.channelId = channelId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("revokeChannel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        revokeChannel_args args = new revokeChannel_args();
        args.setChannelId(channelId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ChannelException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recvRevokeChannel();
      }
    }

    public void syncChannelData(long lastSynced, String locale, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      syncChannelData_call method_call = new syncChannelData_call(lastSynced, locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class syncChannelData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long lastSynced;
      private String locale;
      public syncChannelData_call(long lastSynced, String locale, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lastSynced = lastSynced;
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("syncChannelData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        syncChannelData_args args = new syncChannelData_args();
        args.setLastSynced(lastSynced);
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ChannelSyncDatas getResult() throws ChannelException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvSyncChannelData();
      }
    }

    public void updateChannelNotificationSetting(List<ChannelNotificationSetting> setting, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateChannelNotificationSetting_call method_call = new updateChannelNotificationSetting_call(setting, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateChannelNotificationSetting_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<ChannelNotificationSetting> setting;
      public updateChannelNotificationSetting_call(List<ChannelNotificationSetting> setting, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.setting = setting;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateChannelNotificationSetting", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateChannelNotificationSetting_args args = new updateChannelNotificationSetting_args();
        args.setSetting(setting);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ChannelException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recvUpdateChannelNotificationSetting();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("approveChannelAndIssueChannelToken", new approveChannelAndIssueChannelToken());
      processMap.put("approveChannelAndIssueRequestToken", new approveChannelAndIssueRequestToken());
      processMap.put("fetchNotificationItems", new fetchNotificationItems());
      processMap.put("getApprovedChannels", new getApprovedChannels());
      processMap.put("getChannelInfo", new getChannelInfo());
      processMap.put("getChannelNotificationSetting", new getChannelNotificationSetting());
      processMap.put("getChannelNotificationSettings", new getChannelNotificationSettings());
      processMap.put("getChannels", new getChannels());
      processMap.put("getDomains", new getDomains());
      processMap.put("getFriendChannelMatrices", new getFriendChannelMatrices());
      processMap.put("getNotificationBadgeCount", new getNotificationBadgeCount());
      processMap.put("issueChannelToken", new issueChannelToken());
      processMap.put("issueRequestToken", new issueRequestToken());
      processMap.put("issueRequestTokenWithAuthScheme", new issueRequestTokenWithAuthScheme());
      processMap.put("reserveCoinUse", new reserveCoinUse());
      processMap.put("revokeChannel", new revokeChannel());
      processMap.put("syncChannelData", new syncChannelData());
      processMap.put("updateChannelNotificationSetting", new updateChannelNotificationSetting());
      return processMap;
    }

    public static class approveChannelAndIssueChannelToken<I extends Iface> extends org.apache.thrift.ProcessFunction<I, approveChannelAndIssueChannelToken_args> {
      public approveChannelAndIssueChannelToken() {
        super("approveChannelAndIssueChannelToken");
      }

      public approveChannelAndIssueChannelToken_args getEmptyArgsInstance() {
        return new approveChannelAndIssueChannelToken_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public approveChannelAndIssueChannelToken_result getResult(I iface, approveChannelAndIssueChannelToken_args args) throws org.apache.thrift.TException {
        approveChannelAndIssueChannelToken_result result = new approveChannelAndIssueChannelToken_result();
        try {
          result.success = iface.approveChannelAndIssueChannelToken(args.channelId);
        } catch (ChannelException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class approveChannelAndIssueRequestToken<I extends Iface> extends org.apache.thrift.ProcessFunction<I, approveChannelAndIssueRequestToken_args> {
      public approveChannelAndIssueRequestToken() {
        super("approveChannelAndIssueRequestToken");
      }

      public approveChannelAndIssueRequestToken_args getEmptyArgsInstance() {
        return new approveChannelAndIssueRequestToken_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public approveChannelAndIssueRequestToken_result getResult(I iface, approveChannelAndIssueRequestToken_args args) throws org.apache.thrift.TException {
        approveChannelAndIssueRequestToken_result result = new approveChannelAndIssueRequestToken_result();
        try {
          result.success = iface.approveChannelAndIssueRequestToken(args.channelId, args.otpId);
        } catch (ChannelException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class fetchNotificationItems<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchNotificationItems_args> {
      public fetchNotificationItems() {
        super("fetchNotificationItems");
      }

      public fetchNotificationItems_args getEmptyArgsInstance() {
        return new fetchNotificationItems_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public fetchNotificationItems_result getResult(I iface, fetchNotificationItems_args args) throws org.apache.thrift.TException {
        fetchNotificationItems_result result = new fetchNotificationItems_result();
        try {
          result.success = iface.fetchNotificationItems(args.localRev);
        } catch (ChannelException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getApprovedChannels<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getApprovedChannels_args> {
      public getApprovedChannels() {
        super("getApprovedChannels");
      }

      public getApprovedChannels_args getEmptyArgsInstance() {
        return new getApprovedChannels_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getApprovedChannels_result getResult(I iface, getApprovedChannels_args args) throws org.apache.thrift.TException {
        getApprovedChannels_result result = new getApprovedChannels_result();
        try {
          result.success = iface.getApprovedChannels(args.lastSynced, args.locale);
        } catch (ChannelException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getChannelInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getChannelInfo_args> {
      public getChannelInfo() {
        super("getChannelInfo");
      }

      public getChannelInfo_args getEmptyArgsInstance() {
        return new getChannelInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getChannelInfo_result getResult(I iface, getChannelInfo_args args) throws org.apache.thrift.TException {
        getChannelInfo_result result = new getChannelInfo_result();
        try {
          result.success = iface.getChannelInfo(args.channelId, args.locale);
        } catch (ChannelException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getChannelNotificationSetting<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getChannelNotificationSetting_args> {
      public getChannelNotificationSetting() {
        super("getChannelNotificationSetting");
      }

      public getChannelNotificationSetting_args getEmptyArgsInstance() {
        return new getChannelNotificationSetting_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getChannelNotificationSetting_result getResult(I iface, getChannelNotificationSetting_args args) throws org.apache.thrift.TException {
        getChannelNotificationSetting_result result = new getChannelNotificationSetting_result();
        try {
          result.success = iface.getChannelNotificationSetting(args.channelId, args.locale);
        } catch (ChannelException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getChannelNotificationSettings<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getChannelNotificationSettings_args> {
      public getChannelNotificationSettings() {
        super("getChannelNotificationSettings");
      }

      public getChannelNotificationSettings_args getEmptyArgsInstance() {
        return new getChannelNotificationSettings_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getChannelNotificationSettings_result getResult(I iface, getChannelNotificationSettings_args args) throws org.apache.thrift.TException {
        getChannelNotificationSettings_result result = new getChannelNotificationSettings_result();
        try {
          result.success = iface.getChannelNotificationSettings(args.locale);
        } catch (ChannelException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getChannels<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getChannels_args> {
      public getChannels() {
        super("getChannels");
      }

      public getChannels_args getEmptyArgsInstance() {
        return new getChannels_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getChannels_result getResult(I iface, getChannels_args args) throws org.apache.thrift.TException {
        getChannels_result result = new getChannels_result();
        try {
          result.success = iface.getChannels(args.lastSynced, args.locale);
        } catch (ChannelException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getDomains<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDomains_args> {
      public getDomains() {
        super("getDomains");
      }

      public getDomains_args getEmptyArgsInstance() {
        return new getDomains_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDomains_result getResult(I iface, getDomains_args args) throws org.apache.thrift.TException {
        getDomains_result result = new getDomains_result();
        try {
          result.success = iface.getDomains(args.lastSynced);
        } catch (ChannelException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getFriendChannelMatrices<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFriendChannelMatrices_args> {
      public getFriendChannelMatrices() {
        super("getFriendChannelMatrices");
      }

      public getFriendChannelMatrices_args getEmptyArgsInstance() {
        return new getFriendChannelMatrices_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFriendChannelMatrices_result getResult(I iface, getFriendChannelMatrices_args args) throws org.apache.thrift.TException {
        getFriendChannelMatrices_result result = new getFriendChannelMatrices_result();
        try {
          result.success = iface.getFriendChannelMatrices(args.channelIds);
        } catch (ChannelException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getNotificationBadgeCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNotificationBadgeCount_args> {
      public getNotificationBadgeCount() {
        super("getNotificationBadgeCount");
      }

      public getNotificationBadgeCount_args getEmptyArgsInstance() {
        return new getNotificationBadgeCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNotificationBadgeCount_result getResult(I iface, getNotificationBadgeCount_args args) throws org.apache.thrift.TException {
        getNotificationBadgeCount_result result = new getNotificationBadgeCount_result();
        try {
          result.success = iface.getNotificationBadgeCount(args.localRev);
          result.setSuccessIsSet(true);
        } catch (ChannelException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class issueChannelToken<I extends Iface> extends org.apache.thrift.ProcessFunction<I, issueChannelToken_args> {
      public issueChannelToken() {
        super("issueChannelToken");
      }

      public issueChannelToken_args getEmptyArgsInstance() {
        return new issueChannelToken_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public issueChannelToken_result getResult(I iface, issueChannelToken_args args) throws org.apache.thrift.TException {
        issueChannelToken_result result = new issueChannelToken_result();
        try {
          result.success = iface.issueChannelToken(args.channelId);
        } catch (ChannelException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class issueRequestToken<I extends Iface> extends org.apache.thrift.ProcessFunction<I, issueRequestToken_args> {
      public issueRequestToken() {
        super("issueRequestToken");
      }

      public issueRequestToken_args getEmptyArgsInstance() {
        return new issueRequestToken_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public issueRequestToken_result getResult(I iface, issueRequestToken_args args) throws org.apache.thrift.TException {
        issueRequestToken_result result = new issueRequestToken_result();
        try {
          result.success = iface.issueRequestToken(args.channelId, args.otpId);
        } catch (ChannelException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class issueRequestTokenWithAuthScheme<I extends Iface> extends org.apache.thrift.ProcessFunction<I, issueRequestTokenWithAuthScheme_args> {
      public issueRequestTokenWithAuthScheme() {
        super("issueRequestTokenWithAuthScheme");
      }

      public issueRequestTokenWithAuthScheme_args getEmptyArgsInstance() {
        return new issueRequestTokenWithAuthScheme_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public issueRequestTokenWithAuthScheme_result getResult(I iface, issueRequestTokenWithAuthScheme_args args) throws org.apache.thrift.TException {
        issueRequestTokenWithAuthScheme_result result = new issueRequestTokenWithAuthScheme_result();
        try {
          result.success = iface.issueRequestTokenWithAuthScheme(args.channelId, args.otpId, args.authScheme, args.returnUrl);
        } catch (ChannelException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class reserveCoinUse<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reserveCoinUse_args> {
      public reserveCoinUse() {
        super("reserveCoinUse");
      }

      public reserveCoinUse_args getEmptyArgsInstance() {
        return new reserveCoinUse_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reserveCoinUse_result getResult(I iface, reserveCoinUse_args args) throws org.apache.thrift.TException {
        reserveCoinUse_result result = new reserveCoinUse_result();
        try {
          result.success = iface.reserveCoinUse(args.request, args.locale);
        } catch (ChannelException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class revokeChannel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, revokeChannel_args> {
      public revokeChannel() {
        super("revokeChannel");
      }

      public revokeChannel_args getEmptyArgsInstance() {
        return new revokeChannel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public revokeChannel_result getResult(I iface, revokeChannel_args args) throws org.apache.thrift.TException {
        revokeChannel_result result = new revokeChannel_result();
        try {
          iface.revokeChannel(args.channelId);
        } catch (ChannelException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class syncChannelData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, syncChannelData_args> {
      public syncChannelData() {
        super("syncChannelData");
      }

      public syncChannelData_args getEmptyArgsInstance() {
        return new syncChannelData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public syncChannelData_result getResult(I iface, syncChannelData_args args) throws org.apache.thrift.TException {
        syncChannelData_result result = new syncChannelData_result();
        try {
          result.success = iface.syncChannelData(args.lastSynced, args.locale);
        } catch (ChannelException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateChannelNotificationSetting<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateChannelNotificationSetting_args> {
      public updateChannelNotificationSetting() {
        super("updateChannelNotificationSetting");
      }

      public updateChannelNotificationSetting_args getEmptyArgsInstance() {
        return new updateChannelNotificationSetting_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateChannelNotificationSetting_result getResult(I iface, updateChannelNotificationSetting_args args) throws org.apache.thrift.TException {
        updateChannelNotificationSetting_result result = new updateChannelNotificationSetting_result();
        try {
          iface.updateChannelNotificationSetting(args.setting);
        } catch (ChannelException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("approveChannelAndIssueChannelToken", new approveChannelAndIssueChannelToken());
      processMap.put("approveChannelAndIssueRequestToken", new approveChannelAndIssueRequestToken());
      processMap.put("fetchNotificationItems", new fetchNotificationItems());
      processMap.put("getApprovedChannels", new getApprovedChannels());
      processMap.put("getChannelInfo", new getChannelInfo());
      processMap.put("getChannelNotificationSetting", new getChannelNotificationSetting());
      processMap.put("getChannelNotificationSettings", new getChannelNotificationSettings());
      processMap.put("getChannels", new getChannels());
      processMap.put("getDomains", new getDomains());
      processMap.put("getFriendChannelMatrices", new getFriendChannelMatrices());
      processMap.put("getNotificationBadgeCount", new getNotificationBadgeCount());
      processMap.put("issueChannelToken", new issueChannelToken());
      processMap.put("issueRequestToken", new issueRequestToken());
      processMap.put("issueRequestTokenWithAuthScheme", new issueRequestTokenWithAuthScheme());
      processMap.put("reserveCoinUse", new reserveCoinUse());
      processMap.put("revokeChannel", new revokeChannel());
      processMap.put("syncChannelData", new syncChannelData());
      processMap.put("updateChannelNotificationSetting", new updateChannelNotificationSetting());
      return processMap;
    }

    public static class approveChannelAndIssueChannelToken<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, approveChannelAndIssueChannelToken_args, ChannelToken> {
      public approveChannelAndIssueChannelToken() {
        super("approveChannelAndIssueChannelToken");
      }

      public approveChannelAndIssueChannelToken_args getEmptyArgsInstance() {
        return new approveChannelAndIssueChannelToken_args();
      }

      public AsyncMethodCallback<ChannelToken> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ChannelToken>() { 
          public void onComplete(ChannelToken o) {
            approveChannelAndIssueChannelToken_result result = new approveChannelAndIssueChannelToken_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            approveChannelAndIssueChannelToken_result result = new approveChannelAndIssueChannelToken_result();
            if (e instanceof ChannelException) {
                        result.e = (ChannelException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, approveChannelAndIssueChannelToken_args args, org.apache.thrift.async.AsyncMethodCallback<ChannelToken> resultHandler) throws TException {
        iface.approveChannelAndIssueChannelToken(args.channelId,resultHandler);
      }
    }

    public static class approveChannelAndIssueRequestToken<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, approveChannelAndIssueRequestToken_args, String> {
      public approveChannelAndIssueRequestToken() {
        super("approveChannelAndIssueRequestToken");
      }

      public approveChannelAndIssueRequestToken_args getEmptyArgsInstance() {
        return new approveChannelAndIssueRequestToken_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            approveChannelAndIssueRequestToken_result result = new approveChannelAndIssueRequestToken_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            approveChannelAndIssueRequestToken_result result = new approveChannelAndIssueRequestToken_result();
            if (e instanceof ChannelException) {
                        result.e = (ChannelException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, approveChannelAndIssueRequestToken_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.approveChannelAndIssueRequestToken(args.channelId, args.otpId,resultHandler);
      }
    }

    public static class fetchNotificationItems<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fetchNotificationItems_args, NotificationFetchResult> {
      public fetchNotificationItems() {
        super("fetchNotificationItems");
      }

      public fetchNotificationItems_args getEmptyArgsInstance() {
        return new fetchNotificationItems_args();
      }

      public AsyncMethodCallback<NotificationFetchResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<NotificationFetchResult>() { 
          public void onComplete(NotificationFetchResult o) {
            fetchNotificationItems_result result = new fetchNotificationItems_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            fetchNotificationItems_result result = new fetchNotificationItems_result();
            if (e instanceof ChannelException) {
                        result.e = (ChannelException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fetchNotificationItems_args args, org.apache.thrift.async.AsyncMethodCallback<NotificationFetchResult> resultHandler) throws TException {
        iface.fetchNotificationItems(args.localRev,resultHandler);
      }
    }

    public static class getApprovedChannels<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getApprovedChannels_args, ApprovedChannelInfos> {
      public getApprovedChannels() {
        super("getApprovedChannels");
      }

      public getApprovedChannels_args getEmptyArgsInstance() {
        return new getApprovedChannels_args();
      }

      public AsyncMethodCallback<ApprovedChannelInfos> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ApprovedChannelInfos>() { 
          public void onComplete(ApprovedChannelInfos o) {
            getApprovedChannels_result result = new getApprovedChannels_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getApprovedChannels_result result = new getApprovedChannels_result();
            if (e instanceof ChannelException) {
                        result.e = (ChannelException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getApprovedChannels_args args, org.apache.thrift.async.AsyncMethodCallback<ApprovedChannelInfos> resultHandler) throws TException {
        iface.getApprovedChannels(args.lastSynced, args.locale,resultHandler);
      }
    }

    public static class getChannelInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getChannelInfo_args, ChannelInfo> {
      public getChannelInfo() {
        super("getChannelInfo");
      }

      public getChannelInfo_args getEmptyArgsInstance() {
        return new getChannelInfo_args();
      }

      public AsyncMethodCallback<ChannelInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ChannelInfo>() { 
          public void onComplete(ChannelInfo o) {
            getChannelInfo_result result = new getChannelInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getChannelInfo_result result = new getChannelInfo_result();
            if (e instanceof ChannelException) {
                        result.e = (ChannelException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getChannelInfo_args args, org.apache.thrift.async.AsyncMethodCallback<ChannelInfo> resultHandler) throws TException {
        iface.getChannelInfo(args.channelId, args.locale,resultHandler);
      }
    }

    public static class getChannelNotificationSetting<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getChannelNotificationSetting_args, ChannelNotificationSetting> {
      public getChannelNotificationSetting() {
        super("getChannelNotificationSetting");
      }

      public getChannelNotificationSetting_args getEmptyArgsInstance() {
        return new getChannelNotificationSetting_args();
      }

      public AsyncMethodCallback<ChannelNotificationSetting> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ChannelNotificationSetting>() { 
          public void onComplete(ChannelNotificationSetting o) {
            getChannelNotificationSetting_result result = new getChannelNotificationSetting_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getChannelNotificationSetting_result result = new getChannelNotificationSetting_result();
            if (e instanceof ChannelException) {
                        result.e = (ChannelException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getChannelNotificationSetting_args args, org.apache.thrift.async.AsyncMethodCallback<ChannelNotificationSetting> resultHandler) throws TException {
        iface.getChannelNotificationSetting(args.channelId, args.locale,resultHandler);
      }
    }

    public static class getChannelNotificationSettings<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getChannelNotificationSettings_args, List<ChannelNotificationSetting>> {
      public getChannelNotificationSettings() {
        super("getChannelNotificationSettings");
      }

      public getChannelNotificationSettings_args getEmptyArgsInstance() {
        return new getChannelNotificationSettings_args();
      }

      public AsyncMethodCallback<List<ChannelNotificationSetting>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ChannelNotificationSetting>>() { 
          public void onComplete(List<ChannelNotificationSetting> o) {
            getChannelNotificationSettings_result result = new getChannelNotificationSettings_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getChannelNotificationSettings_result result = new getChannelNotificationSettings_result();
            if (e instanceof ChannelException) {
                        result.e = (ChannelException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getChannelNotificationSettings_args args, org.apache.thrift.async.AsyncMethodCallback<List<ChannelNotificationSetting>> resultHandler) throws TException {
        iface.getChannelNotificationSettings(args.locale,resultHandler);
      }
    }

    public static class getChannels<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getChannels_args, ChannelInfos> {
      public getChannels() {
        super("getChannels");
      }

      public getChannels_args getEmptyArgsInstance() {
        return new getChannels_args();
      }

      public AsyncMethodCallback<ChannelInfos> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ChannelInfos>() { 
          public void onComplete(ChannelInfos o) {
            getChannels_result result = new getChannels_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getChannels_result result = new getChannels_result();
            if (e instanceof ChannelException) {
                        result.e = (ChannelException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getChannels_args args, org.apache.thrift.async.AsyncMethodCallback<ChannelInfos> resultHandler) throws TException {
        iface.getChannels(args.lastSynced, args.locale,resultHandler);
      }
    }

    public static class getDomains<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDomains_args, ChannelDomains> {
      public getDomains() {
        super("getDomains");
      }

      public getDomains_args getEmptyArgsInstance() {
        return new getDomains_args();
      }

      public AsyncMethodCallback<ChannelDomains> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ChannelDomains>() { 
          public void onComplete(ChannelDomains o) {
            getDomains_result result = new getDomains_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDomains_result result = new getDomains_result();
            if (e instanceof ChannelException) {
                        result.e = (ChannelException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDomains_args args, org.apache.thrift.async.AsyncMethodCallback<ChannelDomains> resultHandler) throws TException {
        iface.getDomains(args.lastSynced,resultHandler);
      }
    }

    public static class getFriendChannelMatrices<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFriendChannelMatrices_args, FriendChannelMatricesResponse> {
      public getFriendChannelMatrices() {
        super("getFriendChannelMatrices");
      }

      public getFriendChannelMatrices_args getEmptyArgsInstance() {
        return new getFriendChannelMatrices_args();
      }

      public AsyncMethodCallback<FriendChannelMatricesResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FriendChannelMatricesResponse>() { 
          public void onComplete(FriendChannelMatricesResponse o) {
            getFriendChannelMatrices_result result = new getFriendChannelMatrices_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFriendChannelMatrices_result result = new getFriendChannelMatrices_result();
            if (e instanceof ChannelException) {
                        result.e = (ChannelException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFriendChannelMatrices_args args, org.apache.thrift.async.AsyncMethodCallback<FriendChannelMatricesResponse> resultHandler) throws TException {
        iface.getFriendChannelMatrices(args.channelIds,resultHandler);
      }
    }

    public static class getNotificationBadgeCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNotificationBadgeCount_args, Integer> {
      public getNotificationBadgeCount() {
        super("getNotificationBadgeCount");
      }

      public getNotificationBadgeCount_args getEmptyArgsInstance() {
        return new getNotificationBadgeCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getNotificationBadgeCount_result result = new getNotificationBadgeCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNotificationBadgeCount_result result = new getNotificationBadgeCount_result();
            if (e instanceof ChannelException) {
                        result.e = (ChannelException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNotificationBadgeCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getNotificationBadgeCount(args.localRev,resultHandler);
      }
    }

    public static class issueChannelToken<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, issueChannelToken_args, ChannelToken> {
      public issueChannelToken() {
        super("issueChannelToken");
      }

      public issueChannelToken_args getEmptyArgsInstance() {
        return new issueChannelToken_args();
      }

      public AsyncMethodCallback<ChannelToken> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ChannelToken>() { 
          public void onComplete(ChannelToken o) {
            issueChannelToken_result result = new issueChannelToken_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            issueChannelToken_result result = new issueChannelToken_result();
            if (e instanceof ChannelException) {
                        result.e = (ChannelException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, issueChannelToken_args args, org.apache.thrift.async.AsyncMethodCallback<ChannelToken> resultHandler) throws TException {
        iface.issueChannelToken(args.channelId,resultHandler);
      }
    }

    public static class issueRequestToken<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, issueRequestToken_args, String> {
      public issueRequestToken() {
        super("issueRequestToken");
      }

      public issueRequestToken_args getEmptyArgsInstance() {
        return new issueRequestToken_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            issueRequestToken_result result = new issueRequestToken_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            issueRequestToken_result result = new issueRequestToken_result();
            if (e instanceof ChannelException) {
                        result.e = (ChannelException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, issueRequestToken_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.issueRequestToken(args.channelId, args.otpId,resultHandler);
      }
    }

    public static class issueRequestTokenWithAuthScheme<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, issueRequestTokenWithAuthScheme_args, RequestTokenResponse> {
      public issueRequestTokenWithAuthScheme() {
        super("issueRequestTokenWithAuthScheme");
      }

      public issueRequestTokenWithAuthScheme_args getEmptyArgsInstance() {
        return new issueRequestTokenWithAuthScheme_args();
      }

      public AsyncMethodCallback<RequestTokenResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RequestTokenResponse>() { 
          public void onComplete(RequestTokenResponse o) {
            issueRequestTokenWithAuthScheme_result result = new issueRequestTokenWithAuthScheme_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            issueRequestTokenWithAuthScheme_result result = new issueRequestTokenWithAuthScheme_result();
            if (e instanceof ChannelException) {
                        result.e = (ChannelException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, issueRequestTokenWithAuthScheme_args args, org.apache.thrift.async.AsyncMethodCallback<RequestTokenResponse> resultHandler) throws TException {
        iface.issueRequestTokenWithAuthScheme(args.channelId, args.otpId, args.authScheme, args.returnUrl,resultHandler);
      }
    }

    public static class reserveCoinUse<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reserveCoinUse_args, String> {
      public reserveCoinUse() {
        super("reserveCoinUse");
      }

      public reserveCoinUse_args getEmptyArgsInstance() {
        return new reserveCoinUse_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            reserveCoinUse_result result = new reserveCoinUse_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reserveCoinUse_result result = new reserveCoinUse_result();
            if (e instanceof ChannelException) {
                        result.e = (ChannelException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reserveCoinUse_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.reserveCoinUse(args.request, args.locale,resultHandler);
      }
    }

    public static class revokeChannel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, revokeChannel_args, Void> {
      public revokeChannel() {
        super("revokeChannel");
      }

      public revokeChannel_args getEmptyArgsInstance() {
        return new revokeChannel_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            revokeChannel_result result = new revokeChannel_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            revokeChannel_result result = new revokeChannel_result();
            if (e instanceof ChannelException) {
                        result.e = (ChannelException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, revokeChannel_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.revokeChannel(args.channelId,resultHandler);
      }
    }

    public static class syncChannelData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, syncChannelData_args, ChannelSyncDatas> {
      public syncChannelData() {
        super("syncChannelData");
      }

      public syncChannelData_args getEmptyArgsInstance() {
        return new syncChannelData_args();
      }

      public AsyncMethodCallback<ChannelSyncDatas> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ChannelSyncDatas>() { 
          public void onComplete(ChannelSyncDatas o) {
            syncChannelData_result result = new syncChannelData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            syncChannelData_result result = new syncChannelData_result();
            if (e instanceof ChannelException) {
                        result.e = (ChannelException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, syncChannelData_args args, org.apache.thrift.async.AsyncMethodCallback<ChannelSyncDatas> resultHandler) throws TException {
        iface.syncChannelData(args.lastSynced, args.locale,resultHandler);
      }
    }

    public static class updateChannelNotificationSetting<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateChannelNotificationSetting_args, Void> {
      public updateChannelNotificationSetting() {
        super("updateChannelNotificationSetting");
      }

      public updateChannelNotificationSetting_args getEmptyArgsInstance() {
        return new updateChannelNotificationSetting_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateChannelNotificationSetting_result result = new updateChannelNotificationSetting_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateChannelNotificationSetting_result result = new updateChannelNotificationSetting_result();
            if (e instanceof ChannelException) {
                        result.e = (ChannelException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateChannelNotificationSetting_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateChannelNotificationSetting(args.setting,resultHandler);
      }
    }

  }

  public static class approveChannelAndIssueChannelToken_args implements org.apache.thrift.TBase<approveChannelAndIssueChannelToken_args, approveChannelAndIssueChannelToken_args._Fields>, java.io.Serializable, Cloneable, Comparable<approveChannelAndIssueChannelToken_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("approveChannelAndIssueChannelToken_args");

    private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new approveChannelAndIssueChannelToken_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new approveChannelAndIssueChannelToken_argsTupleSchemeFactory());
    }

    private String channelId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHANNEL_ID((short)1, "channelId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHANNEL_ID
            return CHANNEL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(approveChannelAndIssueChannelToken_args.class, metaDataMap);
    }

    public approveChannelAndIssueChannelToken_args() {
    }

    public approveChannelAndIssueChannelToken_args(
      String channelId)
    {
      this();
      this.channelId = channelId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public approveChannelAndIssueChannelToken_args(approveChannelAndIssueChannelToken_args other) {
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
    }

    public approveChannelAndIssueChannelToken_args deepCopy() {
      return new approveChannelAndIssueChannelToken_args(this);
    }

    @Override
    public void clear() {
      this.channelId = null;
    }

    public String getChannelId() {
      return this.channelId;
    }

    public void setChannelId(String channelId) {
      this.channelId = channelId;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHANNEL_ID:
        if (value == null) {
          unsetChannelId();
        } else {
          setChannelId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHANNEL_ID:
        return getChannelId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHANNEL_ID:
        return isSetChannelId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof approveChannelAndIssueChannelToken_args)
        return this.equals((approveChannelAndIssueChannelToken_args)that);
      return false;
    }

    public boolean equals(approveChannelAndIssueChannelToken_args that) {
      if (that == null)
        return false;

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_channelId = true && (isSetChannelId());
      list.add(present_channelId);
      if (present_channelId)
        list.add(channelId);

      return list.hashCode();
    }

    @Override
    public int compareTo(approveChannelAndIssueChannelToken_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(other.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, other.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("approveChannelAndIssueChannelToken_args(");
      boolean first = true;

      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class approveChannelAndIssueChannelToken_argsStandardSchemeFactory implements SchemeFactory {
      public approveChannelAndIssueChannelToken_argsStandardScheme getScheme() {
        return new approveChannelAndIssueChannelToken_argsStandardScheme();
      }
    }

    private static class approveChannelAndIssueChannelToken_argsStandardScheme extends StandardScheme<approveChannelAndIssueChannelToken_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, approveChannelAndIssueChannelToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelId = iprot.readString();
                struct.setChannelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, approveChannelAndIssueChannelToken_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.channelId != null) {
          oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
          oprot.writeString(struct.channelId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class approveChannelAndIssueChannelToken_argsTupleSchemeFactory implements SchemeFactory {
      public approveChannelAndIssueChannelToken_argsTupleScheme getScheme() {
        return new approveChannelAndIssueChannelToken_argsTupleScheme();
      }
    }

    private static class approveChannelAndIssueChannelToken_argsTupleScheme extends TupleScheme<approveChannelAndIssueChannelToken_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, approveChannelAndIssueChannelToken_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChannelId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetChannelId()) {
          oprot.writeString(struct.channelId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, approveChannelAndIssueChannelToken_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.channelId = iprot.readString();
          struct.setChannelIdIsSet(true);
        }
      }
    }

  }

  public static class approveChannelAndIssueChannelToken_result implements org.apache.thrift.TBase<approveChannelAndIssueChannelToken_result, approveChannelAndIssueChannelToken_result._Fields>, java.io.Serializable, Cloneable, Comparable<approveChannelAndIssueChannelToken_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("approveChannelAndIssueChannelToken_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new approveChannelAndIssueChannelToken_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new approveChannelAndIssueChannelToken_resultTupleSchemeFactory());
    }

    private ChannelToken success; // required
    private ChannelException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChannelToken.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(approveChannelAndIssueChannelToken_result.class, metaDataMap);
    }

    public approveChannelAndIssueChannelToken_result() {
    }

    public approveChannelAndIssueChannelToken_result(
      ChannelToken success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public approveChannelAndIssueChannelToken_result(approveChannelAndIssueChannelToken_result other) {
      if (other.isSetSuccess()) {
        this.success = new ChannelToken(other.success);
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public approveChannelAndIssueChannelToken_result deepCopy() {
      return new approveChannelAndIssueChannelToken_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ChannelToken getSuccess() {
      return this.success;
    }

    public void setSuccess(ChannelToken success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ChannelToken)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ChannelException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof approveChannelAndIssueChannelToken_result)
        return this.equals((approveChannelAndIssueChannelToken_result)that);
      return false;
    }

    public boolean equals(approveChannelAndIssueChannelToken_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(approveChannelAndIssueChannelToken_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("approveChannelAndIssueChannelToken_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class approveChannelAndIssueChannelToken_resultStandardSchemeFactory implements SchemeFactory {
      public approveChannelAndIssueChannelToken_resultStandardScheme getScheme() {
        return new approveChannelAndIssueChannelToken_resultStandardScheme();
      }
    }

    private static class approveChannelAndIssueChannelToken_resultStandardScheme extends StandardScheme<approveChannelAndIssueChannelToken_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, approveChannelAndIssueChannelToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ChannelToken();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ChannelException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, approveChannelAndIssueChannelToken_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class approveChannelAndIssueChannelToken_resultTupleSchemeFactory implements SchemeFactory {
      public approveChannelAndIssueChannelToken_resultTupleScheme getScheme() {
        return new approveChannelAndIssueChannelToken_resultTupleScheme();
      }
    }

    private static class approveChannelAndIssueChannelToken_resultTupleScheme extends TupleScheme<approveChannelAndIssueChannelToken_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, approveChannelAndIssueChannelToken_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, approveChannelAndIssueChannelToken_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ChannelToken();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ChannelException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class approveChannelAndIssueRequestToken_args implements org.apache.thrift.TBase<approveChannelAndIssueRequestToken_args, approveChannelAndIssueRequestToken_args._Fields>, java.io.Serializable, Cloneable, Comparable<approveChannelAndIssueRequestToken_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("approveChannelAndIssueRequestToken_args");

    private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OTP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("otpId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new approveChannelAndIssueRequestToken_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new approveChannelAndIssueRequestToken_argsTupleSchemeFactory());
    }

    private String channelId; // required
    private String otpId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHANNEL_ID((short)1, "channelId"),
      OTP_ID((short)2, "otpId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHANNEL_ID
            return CHANNEL_ID;
          case 2: // OTP_ID
            return OTP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OTP_ID, new org.apache.thrift.meta_data.FieldMetaData("otpId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(approveChannelAndIssueRequestToken_args.class, metaDataMap);
    }

    public approveChannelAndIssueRequestToken_args() {
    }

    public approveChannelAndIssueRequestToken_args(
      String channelId,
      String otpId)
    {
      this();
      this.channelId = channelId;
      this.otpId = otpId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public approveChannelAndIssueRequestToken_args(approveChannelAndIssueRequestToken_args other) {
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
      if (other.isSetOtpId()) {
        this.otpId = other.otpId;
      }
    }

    public approveChannelAndIssueRequestToken_args deepCopy() {
      return new approveChannelAndIssueRequestToken_args(this);
    }

    @Override
    public void clear() {
      this.channelId = null;
      this.otpId = null;
    }

    public String getChannelId() {
      return this.channelId;
    }

    public void setChannelId(String channelId) {
      this.channelId = channelId;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public String getOtpId() {
      return this.otpId;
    }

    public void setOtpId(String otpId) {
      this.otpId = otpId;
    }

    public void unsetOtpId() {
      this.otpId = null;
    }

    /** Returns true if field otpId is set (has been assigned a value) and false otherwise */
    public boolean isSetOtpId() {
      return this.otpId != null;
    }

    public void setOtpIdIsSet(boolean value) {
      if (!value) {
        this.otpId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHANNEL_ID:
        if (value == null) {
          unsetChannelId();
        } else {
          setChannelId((String)value);
        }
        break;

      case OTP_ID:
        if (value == null) {
          unsetOtpId();
        } else {
          setOtpId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHANNEL_ID:
        return getChannelId();

      case OTP_ID:
        return getOtpId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHANNEL_ID:
        return isSetChannelId();
      case OTP_ID:
        return isSetOtpId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof approveChannelAndIssueRequestToken_args)
        return this.equals((approveChannelAndIssueRequestToken_args)that);
      return false;
    }

    public boolean equals(approveChannelAndIssueRequestToken_args that) {
      if (that == null)
        return false;

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      boolean this_present_otpId = true && this.isSetOtpId();
      boolean that_present_otpId = true && that.isSetOtpId();
      if (this_present_otpId || that_present_otpId) {
        if (!(this_present_otpId && that_present_otpId))
          return false;
        if (!this.otpId.equals(that.otpId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_channelId = true && (isSetChannelId());
      list.add(present_channelId);
      if (present_channelId)
        list.add(channelId);

      boolean present_otpId = true && (isSetOtpId());
      list.add(present_otpId);
      if (present_otpId)
        list.add(otpId);

      return list.hashCode();
    }

    @Override
    public int compareTo(approveChannelAndIssueRequestToken_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(other.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, other.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOtpId()).compareTo(other.isSetOtpId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOtpId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.otpId, other.otpId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("approveChannelAndIssueRequestToken_args(");
      boolean first = true;

      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("otpId:");
      if (this.otpId == null) {
        sb.append("null");
      } else {
        sb.append(this.otpId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class approveChannelAndIssueRequestToken_argsStandardSchemeFactory implements SchemeFactory {
      public approveChannelAndIssueRequestToken_argsStandardScheme getScheme() {
        return new approveChannelAndIssueRequestToken_argsStandardScheme();
      }
    }

    private static class approveChannelAndIssueRequestToken_argsStandardScheme extends StandardScheme<approveChannelAndIssueRequestToken_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, approveChannelAndIssueRequestToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelId = iprot.readString();
                struct.setChannelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OTP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.otpId = iprot.readString();
                struct.setOtpIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, approveChannelAndIssueRequestToken_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.channelId != null) {
          oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
          oprot.writeString(struct.channelId);
          oprot.writeFieldEnd();
        }
        if (struct.otpId != null) {
          oprot.writeFieldBegin(OTP_ID_FIELD_DESC);
          oprot.writeString(struct.otpId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class approveChannelAndIssueRequestToken_argsTupleSchemeFactory implements SchemeFactory {
      public approveChannelAndIssueRequestToken_argsTupleScheme getScheme() {
        return new approveChannelAndIssueRequestToken_argsTupleScheme();
      }
    }

    private static class approveChannelAndIssueRequestToken_argsTupleScheme extends TupleScheme<approveChannelAndIssueRequestToken_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, approveChannelAndIssueRequestToken_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChannelId()) {
          optionals.set(0);
        }
        if (struct.isSetOtpId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetChannelId()) {
          oprot.writeString(struct.channelId);
        }
        if (struct.isSetOtpId()) {
          oprot.writeString(struct.otpId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, approveChannelAndIssueRequestToken_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.channelId = iprot.readString();
          struct.setChannelIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.otpId = iprot.readString();
          struct.setOtpIdIsSet(true);
        }
      }
    }

  }

  public static class approveChannelAndIssueRequestToken_result implements org.apache.thrift.TBase<approveChannelAndIssueRequestToken_result, approveChannelAndIssueRequestToken_result._Fields>, java.io.Serializable, Cloneable, Comparable<approveChannelAndIssueRequestToken_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("approveChannelAndIssueRequestToken_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new approveChannelAndIssueRequestToken_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new approveChannelAndIssueRequestToken_resultTupleSchemeFactory());
    }

    private String success; // required
    private ChannelException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(approveChannelAndIssueRequestToken_result.class, metaDataMap);
    }

    public approveChannelAndIssueRequestToken_result() {
    }

    public approveChannelAndIssueRequestToken_result(
      String success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public approveChannelAndIssueRequestToken_result(approveChannelAndIssueRequestToken_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public approveChannelAndIssueRequestToken_result deepCopy() {
      return new approveChannelAndIssueRequestToken_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ChannelException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof approveChannelAndIssueRequestToken_result)
        return this.equals((approveChannelAndIssueRequestToken_result)that);
      return false;
    }

    public boolean equals(approveChannelAndIssueRequestToken_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(approveChannelAndIssueRequestToken_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("approveChannelAndIssueRequestToken_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class approveChannelAndIssueRequestToken_resultStandardSchemeFactory implements SchemeFactory {
      public approveChannelAndIssueRequestToken_resultStandardScheme getScheme() {
        return new approveChannelAndIssueRequestToken_resultStandardScheme();
      }
    }

    private static class approveChannelAndIssueRequestToken_resultStandardScheme extends StandardScheme<approveChannelAndIssueRequestToken_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, approveChannelAndIssueRequestToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ChannelException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, approveChannelAndIssueRequestToken_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class approveChannelAndIssueRequestToken_resultTupleSchemeFactory implements SchemeFactory {
      public approveChannelAndIssueRequestToken_resultTupleScheme getScheme() {
        return new approveChannelAndIssueRequestToken_resultTupleScheme();
      }
    }

    private static class approveChannelAndIssueRequestToken_resultTupleScheme extends TupleScheme<approveChannelAndIssueRequestToken_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, approveChannelAndIssueRequestToken_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, approveChannelAndIssueRequestToken_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ChannelException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class fetchNotificationItems_args implements org.apache.thrift.TBase<fetchNotificationItems_args, fetchNotificationItems_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetchNotificationItems_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchNotificationItems_args");

    private static final org.apache.thrift.protocol.TField LOCAL_REV_FIELD_DESC = new org.apache.thrift.protocol.TField("localRev", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchNotificationItems_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchNotificationItems_argsTupleSchemeFactory());
    }

    private long localRev; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCAL_REV((short)2, "localRev");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // LOCAL_REV
            return LOCAL_REV;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOCALREV_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCAL_REV, new org.apache.thrift.meta_data.FieldMetaData("localRev", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchNotificationItems_args.class, metaDataMap);
    }

    public fetchNotificationItems_args() {
    }

    public fetchNotificationItems_args(
      long localRev)
    {
      this();
      this.localRev = localRev;
      setLocalRevIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchNotificationItems_args(fetchNotificationItems_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.localRev = other.localRev;
    }

    public fetchNotificationItems_args deepCopy() {
      return new fetchNotificationItems_args(this);
    }

    @Override
    public void clear() {
      setLocalRevIsSet(false);
      this.localRev = 0;
    }

    public long getLocalRev() {
      return this.localRev;
    }

    public void setLocalRev(long localRev) {
      this.localRev = localRev;
      setLocalRevIsSet(true);
    }

    public void unsetLocalRev() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCALREV_ISSET_ID);
    }

    /** Returns true if field localRev is set (has been assigned a value) and false otherwise */
    public boolean isSetLocalRev() {
      return EncodingUtils.testBit(__isset_bitfield, __LOCALREV_ISSET_ID);
    }

    public void setLocalRevIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCALREV_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOCAL_REV:
        if (value == null) {
          unsetLocalRev();
        } else {
          setLocalRev((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCAL_REV:
        return getLocalRev();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOCAL_REV:
        return isSetLocalRev();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchNotificationItems_args)
        return this.equals((fetchNotificationItems_args)that);
      return false;
    }

    public boolean equals(fetchNotificationItems_args that) {
      if (that == null)
        return false;

      boolean this_present_localRev = true;
      boolean that_present_localRev = true;
      if (this_present_localRev || that_present_localRev) {
        if (!(this_present_localRev && that_present_localRev))
          return false;
        if (this.localRev != that.localRev)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_localRev = true;
      list.add(present_localRev);
      if (present_localRev)
        list.add(localRev);

      return list.hashCode();
    }

    @Override
    public int compareTo(fetchNotificationItems_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLocalRev()).compareTo(other.isSetLocalRev());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocalRev()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localRev, other.localRev);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchNotificationItems_args(");
      boolean first = true;

      sb.append("localRev:");
      sb.append(this.localRev);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchNotificationItems_argsStandardSchemeFactory implements SchemeFactory {
      public fetchNotificationItems_argsStandardScheme getScheme() {
        return new fetchNotificationItems_argsStandardScheme();
      }
    }

    private static class fetchNotificationItems_argsStandardScheme extends StandardScheme<fetchNotificationItems_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchNotificationItems_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // LOCAL_REV
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.localRev = iprot.readI64();
                struct.setLocalRevIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchNotificationItems_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOCAL_REV_FIELD_DESC);
        oprot.writeI64(struct.localRev);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchNotificationItems_argsTupleSchemeFactory implements SchemeFactory {
      public fetchNotificationItems_argsTupleScheme getScheme() {
        return new fetchNotificationItems_argsTupleScheme();
      }
    }

    private static class fetchNotificationItems_argsTupleScheme extends TupleScheme<fetchNotificationItems_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchNotificationItems_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLocalRev()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocalRev()) {
          oprot.writeI64(struct.localRev);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchNotificationItems_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.localRev = iprot.readI64();
          struct.setLocalRevIsSet(true);
        }
      }
    }

  }

  public static class fetchNotificationItems_result implements org.apache.thrift.TBase<fetchNotificationItems_result, fetchNotificationItems_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetchNotificationItems_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchNotificationItems_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchNotificationItems_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchNotificationItems_resultTupleSchemeFactory());
    }

    private NotificationFetchResult success; // required
    private ChannelException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NotificationFetchResult.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchNotificationItems_result.class, metaDataMap);
    }

    public fetchNotificationItems_result() {
    }

    public fetchNotificationItems_result(
      NotificationFetchResult success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchNotificationItems_result(fetchNotificationItems_result other) {
      if (other.isSetSuccess()) {
        this.success = new NotificationFetchResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public fetchNotificationItems_result deepCopy() {
      return new fetchNotificationItems_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public NotificationFetchResult getSuccess() {
      return this.success;
    }

    public void setSuccess(NotificationFetchResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((NotificationFetchResult)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ChannelException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchNotificationItems_result)
        return this.equals((fetchNotificationItems_result)that);
      return false;
    }

    public boolean equals(fetchNotificationItems_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(fetchNotificationItems_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchNotificationItems_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchNotificationItems_resultStandardSchemeFactory implements SchemeFactory {
      public fetchNotificationItems_resultStandardScheme getScheme() {
        return new fetchNotificationItems_resultStandardScheme();
      }
    }

    private static class fetchNotificationItems_resultStandardScheme extends StandardScheme<fetchNotificationItems_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchNotificationItems_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new NotificationFetchResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ChannelException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchNotificationItems_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchNotificationItems_resultTupleSchemeFactory implements SchemeFactory {
      public fetchNotificationItems_resultTupleScheme getScheme() {
        return new fetchNotificationItems_resultTupleScheme();
      }
    }

    private static class fetchNotificationItems_resultTupleScheme extends TupleScheme<fetchNotificationItems_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchNotificationItems_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchNotificationItems_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new NotificationFetchResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ChannelException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getApprovedChannels_args implements org.apache.thrift.TBase<getApprovedChannels_args, getApprovedChannels_args._Fields>, java.io.Serializable, Cloneable, Comparable<getApprovedChannels_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApprovedChannels_args");

    private static final org.apache.thrift.protocol.TField LAST_SYNCED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastSynced", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApprovedChannels_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApprovedChannels_argsTupleSchemeFactory());
    }

    private long lastSynced; // required
    private String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LAST_SYNCED((short)2, "lastSynced"),
      LOCALE((short)3, "locale");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // LAST_SYNCED
            return LAST_SYNCED;
          case 3: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LASTSYNCED_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LAST_SYNCED, new org.apache.thrift.meta_data.FieldMetaData("lastSynced", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApprovedChannels_args.class, metaDataMap);
    }

    public getApprovedChannels_args() {
    }

    public getApprovedChannels_args(
      long lastSynced,
      String locale)
    {
      this();
      this.lastSynced = lastSynced;
      setLastSyncedIsSet(true);
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApprovedChannels_args(getApprovedChannels_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.lastSynced = other.lastSynced;
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public getApprovedChannels_args deepCopy() {
      return new getApprovedChannels_args(this);
    }

    @Override
    public void clear() {
      setLastSyncedIsSet(false);
      this.lastSynced = 0;
      this.locale = null;
    }

    public long getLastSynced() {
      return this.lastSynced;
    }

    public void setLastSynced(long lastSynced) {
      this.lastSynced = lastSynced;
      setLastSyncedIsSet(true);
    }

    public void unsetLastSynced() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTSYNCED_ISSET_ID);
    }

    /** Returns true if field lastSynced is set (has been assigned a value) and false otherwise */
    public boolean isSetLastSynced() {
      return EncodingUtils.testBit(__isset_bitfield, __LASTSYNCED_ISSET_ID);
    }

    public void setLastSyncedIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTSYNCED_ISSET_ID, value);
    }

    public String getLocale() {
      return this.locale;
    }

    public void setLocale(String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LAST_SYNCED:
        if (value == null) {
          unsetLastSynced();
        } else {
          setLastSynced((Long)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LAST_SYNCED:
        return getLastSynced();

      case LOCALE:
        return getLocale();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LAST_SYNCED:
        return isSetLastSynced();
      case LOCALE:
        return isSetLocale();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApprovedChannels_args)
        return this.equals((getApprovedChannels_args)that);
      return false;
    }

    public boolean equals(getApprovedChannels_args that) {
      if (that == null)
        return false;

      boolean this_present_lastSynced = true;
      boolean that_present_lastSynced = true;
      if (this_present_lastSynced || that_present_lastSynced) {
        if (!(this_present_lastSynced && that_present_lastSynced))
          return false;
        if (this.lastSynced != that.lastSynced)
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_lastSynced = true;
      list.add(present_lastSynced);
      if (present_lastSynced)
        list.add(lastSynced);

      boolean present_locale = true && (isSetLocale());
      list.add(present_locale);
      if (present_locale)
        list.add(locale);

      return list.hashCode();
    }

    @Override
    public int compareTo(getApprovedChannels_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLastSynced()).compareTo(other.isSetLastSynced());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastSynced()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastSynced, other.lastSynced);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApprovedChannels_args(");
      boolean first = true;

      sb.append("lastSynced:");
      sb.append(this.lastSynced);
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApprovedChannels_argsStandardSchemeFactory implements SchemeFactory {
      public getApprovedChannels_argsStandardScheme getScheme() {
        return new getApprovedChannels_argsStandardScheme();
      }
    }

    private static class getApprovedChannels_argsStandardScheme extends StandardScheme<getApprovedChannels_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApprovedChannels_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // LAST_SYNCED
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.lastSynced = iprot.readI64();
                struct.setLastSyncedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApprovedChannels_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LAST_SYNCED_FIELD_DESC);
        oprot.writeI64(struct.lastSynced);
        oprot.writeFieldEnd();
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApprovedChannels_argsTupleSchemeFactory implements SchemeFactory {
      public getApprovedChannels_argsTupleScheme getScheme() {
        return new getApprovedChannels_argsTupleScheme();
      }
    }

    private static class getApprovedChannels_argsTupleScheme extends TupleScheme<getApprovedChannels_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApprovedChannels_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLastSynced()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLastSynced()) {
          oprot.writeI64(struct.lastSynced);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApprovedChannels_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.lastSynced = iprot.readI64();
          struct.setLastSyncedIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

  }

  public static class getApprovedChannels_result implements org.apache.thrift.TBase<getApprovedChannels_result, getApprovedChannels_result._Fields>, java.io.Serializable, Cloneable, Comparable<getApprovedChannels_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApprovedChannels_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApprovedChannels_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApprovedChannels_resultTupleSchemeFactory());
    }

    private ApprovedChannelInfos success; // required
    private ChannelException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApprovedChannelInfos.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApprovedChannels_result.class, metaDataMap);
    }

    public getApprovedChannels_result() {
    }

    public getApprovedChannels_result(
      ApprovedChannelInfos success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApprovedChannels_result(getApprovedChannels_result other) {
      if (other.isSetSuccess()) {
        this.success = new ApprovedChannelInfos(other.success);
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public getApprovedChannels_result deepCopy() {
      return new getApprovedChannels_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ApprovedChannelInfos getSuccess() {
      return this.success;
    }

    public void setSuccess(ApprovedChannelInfos success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ApprovedChannelInfos)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ChannelException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApprovedChannels_result)
        return this.equals((getApprovedChannels_result)that);
      return false;
    }

    public boolean equals(getApprovedChannels_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getApprovedChannels_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApprovedChannels_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApprovedChannels_resultStandardSchemeFactory implements SchemeFactory {
      public getApprovedChannels_resultStandardScheme getScheme() {
        return new getApprovedChannels_resultStandardScheme();
      }
    }

    private static class getApprovedChannels_resultStandardScheme extends StandardScheme<getApprovedChannels_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApprovedChannels_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ApprovedChannelInfos();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ChannelException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApprovedChannels_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApprovedChannels_resultTupleSchemeFactory implements SchemeFactory {
      public getApprovedChannels_resultTupleScheme getScheme() {
        return new getApprovedChannels_resultTupleScheme();
      }
    }

    private static class getApprovedChannels_resultTupleScheme extends TupleScheme<getApprovedChannels_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApprovedChannels_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApprovedChannels_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ApprovedChannelInfos();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ChannelException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getChannelInfo_args implements org.apache.thrift.TBase<getChannelInfo_args, getChannelInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getChannelInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getChannelInfo_args");

    private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getChannelInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getChannelInfo_argsTupleSchemeFactory());
    }

    private String channelId; // required
    private String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHANNEL_ID((short)2, "channelId"),
      LOCALE((short)3, "locale");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // CHANNEL_ID
            return CHANNEL_ID;
          case 3: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getChannelInfo_args.class, metaDataMap);
    }

    public getChannelInfo_args() {
    }

    public getChannelInfo_args(
      String channelId,
      String locale)
    {
      this();
      this.channelId = channelId;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChannelInfo_args(getChannelInfo_args other) {
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public getChannelInfo_args deepCopy() {
      return new getChannelInfo_args(this);
    }

    @Override
    public void clear() {
      this.channelId = null;
      this.locale = null;
    }

    public String getChannelId() {
      return this.channelId;
    }

    public void setChannelId(String channelId) {
      this.channelId = channelId;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public String getLocale() {
      return this.locale;
    }

    public void setLocale(String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHANNEL_ID:
        if (value == null) {
          unsetChannelId();
        } else {
          setChannelId((String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHANNEL_ID:
        return getChannelId();

      case LOCALE:
        return getLocale();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHANNEL_ID:
        return isSetChannelId();
      case LOCALE:
        return isSetLocale();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getChannelInfo_args)
        return this.equals((getChannelInfo_args)that);
      return false;
    }

    public boolean equals(getChannelInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_channelId = true && (isSetChannelId());
      list.add(present_channelId);
      if (present_channelId)
        list.add(channelId);

      boolean present_locale = true && (isSetLocale());
      list.add(present_locale);
      if (present_locale)
        list.add(locale);

      return list.hashCode();
    }

    @Override
    public int compareTo(getChannelInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(other.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, other.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getChannelInfo_args(");
      boolean first = true;

      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getChannelInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getChannelInfo_argsStandardScheme getScheme() {
        return new getChannelInfo_argsStandardScheme();
      }
    }

    private static class getChannelInfo_argsStandardScheme extends StandardScheme<getChannelInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getChannelInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelId = iprot.readString();
                struct.setChannelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getChannelInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.channelId != null) {
          oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
          oprot.writeString(struct.channelId);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getChannelInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getChannelInfo_argsTupleScheme getScheme() {
        return new getChannelInfo_argsTupleScheme();
      }
    }

    private static class getChannelInfo_argsTupleScheme extends TupleScheme<getChannelInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getChannelInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChannelId()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetChannelId()) {
          oprot.writeString(struct.channelId);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getChannelInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.channelId = iprot.readString();
          struct.setChannelIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

  }

  public static class getChannelInfo_result implements org.apache.thrift.TBase<getChannelInfo_result, getChannelInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getChannelInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getChannelInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getChannelInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getChannelInfo_resultTupleSchemeFactory());
    }

    private ChannelInfo success; // required
    private ChannelException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChannelInfo.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getChannelInfo_result.class, metaDataMap);
    }

    public getChannelInfo_result() {
    }

    public getChannelInfo_result(
      ChannelInfo success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChannelInfo_result(getChannelInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new ChannelInfo(other.success);
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public getChannelInfo_result deepCopy() {
      return new getChannelInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ChannelInfo getSuccess() {
      return this.success;
    }

    public void setSuccess(ChannelInfo success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ChannelInfo)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ChannelException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getChannelInfo_result)
        return this.equals((getChannelInfo_result)that);
      return false;
    }

    public boolean equals(getChannelInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getChannelInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getChannelInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getChannelInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getChannelInfo_resultStandardScheme getScheme() {
        return new getChannelInfo_resultStandardScheme();
      }
    }

    private static class getChannelInfo_resultStandardScheme extends StandardScheme<getChannelInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getChannelInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ChannelInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ChannelException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getChannelInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getChannelInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getChannelInfo_resultTupleScheme getScheme() {
        return new getChannelInfo_resultTupleScheme();
      }
    }

    private static class getChannelInfo_resultTupleScheme extends TupleScheme<getChannelInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getChannelInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getChannelInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ChannelInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ChannelException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getChannelNotificationSetting_args implements org.apache.thrift.TBase<getChannelNotificationSetting_args, getChannelNotificationSetting_args._Fields>, java.io.Serializable, Cloneable, Comparable<getChannelNotificationSetting_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getChannelNotificationSetting_args");

    private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getChannelNotificationSetting_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getChannelNotificationSetting_argsTupleSchemeFactory());
    }

    private String channelId; // required
    private String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHANNEL_ID((short)1, "channelId"),
      LOCALE((short)2, "locale");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHANNEL_ID
            return CHANNEL_ID;
          case 2: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getChannelNotificationSetting_args.class, metaDataMap);
    }

    public getChannelNotificationSetting_args() {
    }

    public getChannelNotificationSetting_args(
      String channelId,
      String locale)
    {
      this();
      this.channelId = channelId;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChannelNotificationSetting_args(getChannelNotificationSetting_args other) {
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public getChannelNotificationSetting_args deepCopy() {
      return new getChannelNotificationSetting_args(this);
    }

    @Override
    public void clear() {
      this.channelId = null;
      this.locale = null;
    }

    public String getChannelId() {
      return this.channelId;
    }

    public void setChannelId(String channelId) {
      this.channelId = channelId;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public String getLocale() {
      return this.locale;
    }

    public void setLocale(String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHANNEL_ID:
        if (value == null) {
          unsetChannelId();
        } else {
          setChannelId((String)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHANNEL_ID:
        return getChannelId();

      case LOCALE:
        return getLocale();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHANNEL_ID:
        return isSetChannelId();
      case LOCALE:
        return isSetLocale();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getChannelNotificationSetting_args)
        return this.equals((getChannelNotificationSetting_args)that);
      return false;
    }

    public boolean equals(getChannelNotificationSetting_args that) {
      if (that == null)
        return false;

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_channelId = true && (isSetChannelId());
      list.add(present_channelId);
      if (present_channelId)
        list.add(channelId);

      boolean present_locale = true && (isSetLocale());
      list.add(present_locale);
      if (present_locale)
        list.add(locale);

      return list.hashCode();
    }

    @Override
    public int compareTo(getChannelNotificationSetting_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(other.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, other.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getChannelNotificationSetting_args(");
      boolean first = true;

      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getChannelNotificationSetting_argsStandardSchemeFactory implements SchemeFactory {
      public getChannelNotificationSetting_argsStandardScheme getScheme() {
        return new getChannelNotificationSetting_argsStandardScheme();
      }
    }

    private static class getChannelNotificationSetting_argsStandardScheme extends StandardScheme<getChannelNotificationSetting_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getChannelNotificationSetting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelId = iprot.readString();
                struct.setChannelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getChannelNotificationSetting_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.channelId != null) {
          oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
          oprot.writeString(struct.channelId);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getChannelNotificationSetting_argsTupleSchemeFactory implements SchemeFactory {
      public getChannelNotificationSetting_argsTupleScheme getScheme() {
        return new getChannelNotificationSetting_argsTupleScheme();
      }
    }

    private static class getChannelNotificationSetting_argsTupleScheme extends TupleScheme<getChannelNotificationSetting_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getChannelNotificationSetting_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChannelId()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetChannelId()) {
          oprot.writeString(struct.channelId);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getChannelNotificationSetting_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.channelId = iprot.readString();
          struct.setChannelIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

  }

  public static class getChannelNotificationSetting_result implements org.apache.thrift.TBase<getChannelNotificationSetting_result, getChannelNotificationSetting_result._Fields>, java.io.Serializable, Cloneable, Comparable<getChannelNotificationSetting_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getChannelNotificationSetting_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getChannelNotificationSetting_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getChannelNotificationSetting_resultTupleSchemeFactory());
    }

    private ChannelNotificationSetting success; // required
    private ChannelException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChannelNotificationSetting.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getChannelNotificationSetting_result.class, metaDataMap);
    }

    public getChannelNotificationSetting_result() {
    }

    public getChannelNotificationSetting_result(
      ChannelNotificationSetting success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChannelNotificationSetting_result(getChannelNotificationSetting_result other) {
      if (other.isSetSuccess()) {
        this.success = new ChannelNotificationSetting(other.success);
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public getChannelNotificationSetting_result deepCopy() {
      return new getChannelNotificationSetting_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ChannelNotificationSetting getSuccess() {
      return this.success;
    }

    public void setSuccess(ChannelNotificationSetting success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ChannelNotificationSetting)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ChannelException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getChannelNotificationSetting_result)
        return this.equals((getChannelNotificationSetting_result)that);
      return false;
    }

    public boolean equals(getChannelNotificationSetting_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getChannelNotificationSetting_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getChannelNotificationSetting_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getChannelNotificationSetting_resultStandardSchemeFactory implements SchemeFactory {
      public getChannelNotificationSetting_resultStandardScheme getScheme() {
        return new getChannelNotificationSetting_resultStandardScheme();
      }
    }

    private static class getChannelNotificationSetting_resultStandardScheme extends StandardScheme<getChannelNotificationSetting_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getChannelNotificationSetting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ChannelNotificationSetting();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ChannelException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getChannelNotificationSetting_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getChannelNotificationSetting_resultTupleSchemeFactory implements SchemeFactory {
      public getChannelNotificationSetting_resultTupleScheme getScheme() {
        return new getChannelNotificationSetting_resultTupleScheme();
      }
    }

    private static class getChannelNotificationSetting_resultTupleScheme extends TupleScheme<getChannelNotificationSetting_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getChannelNotificationSetting_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getChannelNotificationSetting_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ChannelNotificationSetting();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ChannelException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getChannelNotificationSettings_args implements org.apache.thrift.TBase<getChannelNotificationSettings_args, getChannelNotificationSettings_args._Fields>, java.io.Serializable, Cloneable, Comparable<getChannelNotificationSettings_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getChannelNotificationSettings_args");

    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getChannelNotificationSettings_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getChannelNotificationSettings_argsTupleSchemeFactory());
    }

    private String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCALE((short)1, "locale");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getChannelNotificationSettings_args.class, metaDataMap);
    }

    public getChannelNotificationSettings_args() {
    }

    public getChannelNotificationSettings_args(
      String locale)
    {
      this();
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChannelNotificationSettings_args(getChannelNotificationSettings_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public getChannelNotificationSettings_args deepCopy() {
      return new getChannelNotificationSettings_args(this);
    }

    @Override
    public void clear() {
      this.locale = null;
    }

    public String getLocale() {
      return this.locale;
    }

    public void setLocale(String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCALE:
        return getLocale();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOCALE:
        return isSetLocale();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getChannelNotificationSettings_args)
        return this.equals((getChannelNotificationSettings_args)that);
      return false;
    }

    public boolean equals(getChannelNotificationSettings_args that) {
      if (that == null)
        return false;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_locale = true && (isSetLocale());
      list.add(present_locale);
      if (present_locale)
        list.add(locale);

      return list.hashCode();
    }

    @Override
    public int compareTo(getChannelNotificationSettings_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getChannelNotificationSettings_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getChannelNotificationSettings_argsStandardSchemeFactory implements SchemeFactory {
      public getChannelNotificationSettings_argsStandardScheme getScheme() {
        return new getChannelNotificationSettings_argsStandardScheme();
      }
    }

    private static class getChannelNotificationSettings_argsStandardScheme extends StandardScheme<getChannelNotificationSettings_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getChannelNotificationSettings_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getChannelNotificationSettings_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getChannelNotificationSettings_argsTupleSchemeFactory implements SchemeFactory {
      public getChannelNotificationSettings_argsTupleScheme getScheme() {
        return new getChannelNotificationSettings_argsTupleScheme();
      }
    }

    private static class getChannelNotificationSettings_argsTupleScheme extends TupleScheme<getChannelNotificationSettings_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getChannelNotificationSettings_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLocale()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getChannelNotificationSettings_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

  }

  public static class getChannelNotificationSettings_result implements org.apache.thrift.TBase<getChannelNotificationSettings_result, getChannelNotificationSettings_result._Fields>, java.io.Serializable, Cloneable, Comparable<getChannelNotificationSettings_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getChannelNotificationSettings_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getChannelNotificationSettings_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getChannelNotificationSettings_resultTupleSchemeFactory());
    }

    private List<ChannelNotificationSetting> success; // required
    private ChannelException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChannelNotificationSetting.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getChannelNotificationSettings_result.class, metaDataMap);
    }

    public getChannelNotificationSettings_result() {
    }

    public getChannelNotificationSettings_result(
      List<ChannelNotificationSetting> success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChannelNotificationSettings_result(getChannelNotificationSettings_result other) {
      if (other.isSetSuccess()) {
        List<ChannelNotificationSetting> __this__success = new ArrayList<ChannelNotificationSetting>(other.success.size());
        for (ChannelNotificationSetting other_element : other.success) {
          __this__success.add(new ChannelNotificationSetting(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public getChannelNotificationSettings_result deepCopy() {
      return new getChannelNotificationSettings_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ChannelNotificationSetting> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ChannelNotificationSetting elem) {
      if (this.success == null) {
        this.success = new ArrayList<ChannelNotificationSetting>();
      }
      this.success.add(elem);
    }

    public List<ChannelNotificationSetting> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<ChannelNotificationSetting> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ChannelNotificationSetting>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ChannelException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getChannelNotificationSettings_result)
        return this.equals((getChannelNotificationSettings_result)that);
      return false;
    }

    public boolean equals(getChannelNotificationSettings_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getChannelNotificationSettings_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getChannelNotificationSettings_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getChannelNotificationSettings_resultStandardSchemeFactory implements SchemeFactory {
      public getChannelNotificationSettings_resultStandardScheme getScheme() {
        return new getChannelNotificationSettings_resultStandardScheme();
      }
    }

    private static class getChannelNotificationSettings_resultStandardScheme extends StandardScheme<getChannelNotificationSettings_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getChannelNotificationSettings_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list720 = iprot.readListBegin();
                  struct.success = new ArrayList<ChannelNotificationSetting>(_list720.size);
                  ChannelNotificationSetting _elem721;
                  for (int _i722 = 0; _i722 < _list720.size; ++_i722)
                  {
                    _elem721 = new ChannelNotificationSetting();
                    _elem721.read(iprot);
                    struct.success.add(_elem721);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ChannelException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getChannelNotificationSettings_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ChannelNotificationSetting _iter723 : struct.success)
            {
              _iter723.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getChannelNotificationSettings_resultTupleSchemeFactory implements SchemeFactory {
      public getChannelNotificationSettings_resultTupleScheme getScheme() {
        return new getChannelNotificationSettings_resultTupleScheme();
      }
    }

    private static class getChannelNotificationSettings_resultTupleScheme extends TupleScheme<getChannelNotificationSettings_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getChannelNotificationSettings_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ChannelNotificationSetting _iter724 : struct.success)
            {
              _iter724.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getChannelNotificationSettings_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list725 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ChannelNotificationSetting>(_list725.size);
            ChannelNotificationSetting _elem726;
            for (int _i727 = 0; _i727 < _list725.size; ++_i727)
            {
              _elem726 = new ChannelNotificationSetting();
              _elem726.read(iprot);
              struct.success.add(_elem726);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ChannelException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getChannels_args implements org.apache.thrift.TBase<getChannels_args, getChannels_args._Fields>, java.io.Serializable, Cloneable, Comparable<getChannels_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getChannels_args");

    private static final org.apache.thrift.protocol.TField LAST_SYNCED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastSynced", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getChannels_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getChannels_argsTupleSchemeFactory());
    }

    private long lastSynced; // required
    private String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LAST_SYNCED((short)2, "lastSynced"),
      LOCALE((short)3, "locale");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // LAST_SYNCED
            return LAST_SYNCED;
          case 3: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LASTSYNCED_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LAST_SYNCED, new org.apache.thrift.meta_data.FieldMetaData("lastSynced", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getChannels_args.class, metaDataMap);
    }

    public getChannels_args() {
    }

    public getChannels_args(
      long lastSynced,
      String locale)
    {
      this();
      this.lastSynced = lastSynced;
      setLastSyncedIsSet(true);
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChannels_args(getChannels_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.lastSynced = other.lastSynced;
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public getChannels_args deepCopy() {
      return new getChannels_args(this);
    }

    @Override
    public void clear() {
      setLastSyncedIsSet(false);
      this.lastSynced = 0;
      this.locale = null;
    }

    public long getLastSynced() {
      return this.lastSynced;
    }

    public void setLastSynced(long lastSynced) {
      this.lastSynced = lastSynced;
      setLastSyncedIsSet(true);
    }

    public void unsetLastSynced() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTSYNCED_ISSET_ID);
    }

    /** Returns true if field lastSynced is set (has been assigned a value) and false otherwise */
    public boolean isSetLastSynced() {
      return EncodingUtils.testBit(__isset_bitfield, __LASTSYNCED_ISSET_ID);
    }

    public void setLastSyncedIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTSYNCED_ISSET_ID, value);
    }

    public String getLocale() {
      return this.locale;
    }

    public void setLocale(String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LAST_SYNCED:
        if (value == null) {
          unsetLastSynced();
        } else {
          setLastSynced((Long)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LAST_SYNCED:
        return getLastSynced();

      case LOCALE:
        return getLocale();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LAST_SYNCED:
        return isSetLastSynced();
      case LOCALE:
        return isSetLocale();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getChannels_args)
        return this.equals((getChannels_args)that);
      return false;
    }

    public boolean equals(getChannels_args that) {
      if (that == null)
        return false;

      boolean this_present_lastSynced = true;
      boolean that_present_lastSynced = true;
      if (this_present_lastSynced || that_present_lastSynced) {
        if (!(this_present_lastSynced && that_present_lastSynced))
          return false;
        if (this.lastSynced != that.lastSynced)
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_lastSynced = true;
      list.add(present_lastSynced);
      if (present_lastSynced)
        list.add(lastSynced);

      boolean present_locale = true && (isSetLocale());
      list.add(present_locale);
      if (present_locale)
        list.add(locale);

      return list.hashCode();
    }

    @Override
    public int compareTo(getChannels_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLastSynced()).compareTo(other.isSetLastSynced());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastSynced()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastSynced, other.lastSynced);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getChannels_args(");
      boolean first = true;

      sb.append("lastSynced:");
      sb.append(this.lastSynced);
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getChannels_argsStandardSchemeFactory implements SchemeFactory {
      public getChannels_argsStandardScheme getScheme() {
        return new getChannels_argsStandardScheme();
      }
    }

    private static class getChannels_argsStandardScheme extends StandardScheme<getChannels_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getChannels_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // LAST_SYNCED
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.lastSynced = iprot.readI64();
                struct.setLastSyncedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getChannels_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LAST_SYNCED_FIELD_DESC);
        oprot.writeI64(struct.lastSynced);
        oprot.writeFieldEnd();
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getChannels_argsTupleSchemeFactory implements SchemeFactory {
      public getChannels_argsTupleScheme getScheme() {
        return new getChannels_argsTupleScheme();
      }
    }

    private static class getChannels_argsTupleScheme extends TupleScheme<getChannels_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getChannels_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLastSynced()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLastSynced()) {
          oprot.writeI64(struct.lastSynced);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getChannels_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.lastSynced = iprot.readI64();
          struct.setLastSyncedIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

  }

  public static class getChannels_result implements org.apache.thrift.TBase<getChannels_result, getChannels_result._Fields>, java.io.Serializable, Cloneable, Comparable<getChannels_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getChannels_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getChannels_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getChannels_resultTupleSchemeFactory());
    }

    private ChannelInfos success; // required
    private ChannelException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChannelInfos.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getChannels_result.class, metaDataMap);
    }

    public getChannels_result() {
    }

    public getChannels_result(
      ChannelInfos success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChannels_result(getChannels_result other) {
      if (other.isSetSuccess()) {
        this.success = new ChannelInfos(other.success);
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public getChannels_result deepCopy() {
      return new getChannels_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ChannelInfos getSuccess() {
      return this.success;
    }

    public void setSuccess(ChannelInfos success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ChannelInfos)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ChannelException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getChannels_result)
        return this.equals((getChannels_result)that);
      return false;
    }

    public boolean equals(getChannels_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getChannels_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getChannels_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getChannels_resultStandardSchemeFactory implements SchemeFactory {
      public getChannels_resultStandardScheme getScheme() {
        return new getChannels_resultStandardScheme();
      }
    }

    private static class getChannels_resultStandardScheme extends StandardScheme<getChannels_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getChannels_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ChannelInfos();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ChannelException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getChannels_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getChannels_resultTupleSchemeFactory implements SchemeFactory {
      public getChannels_resultTupleScheme getScheme() {
        return new getChannels_resultTupleScheme();
      }
    }

    private static class getChannels_resultTupleScheme extends TupleScheme<getChannels_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getChannels_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getChannels_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ChannelInfos();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ChannelException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getDomains_args implements org.apache.thrift.TBase<getDomains_args, getDomains_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDomains_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDomains_args");

    private static final org.apache.thrift.protocol.TField LAST_SYNCED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastSynced", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDomains_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDomains_argsTupleSchemeFactory());
    }

    private long lastSynced; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LAST_SYNCED((short)2, "lastSynced");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // LAST_SYNCED
            return LAST_SYNCED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LASTSYNCED_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LAST_SYNCED, new org.apache.thrift.meta_data.FieldMetaData("lastSynced", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDomains_args.class, metaDataMap);
    }

    public getDomains_args() {
    }

    public getDomains_args(
      long lastSynced)
    {
      this();
      this.lastSynced = lastSynced;
      setLastSyncedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDomains_args(getDomains_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.lastSynced = other.lastSynced;
    }

    public getDomains_args deepCopy() {
      return new getDomains_args(this);
    }

    @Override
    public void clear() {
      setLastSyncedIsSet(false);
      this.lastSynced = 0;
    }

    public long getLastSynced() {
      return this.lastSynced;
    }

    public void setLastSynced(long lastSynced) {
      this.lastSynced = lastSynced;
      setLastSyncedIsSet(true);
    }

    public void unsetLastSynced() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTSYNCED_ISSET_ID);
    }

    /** Returns true if field lastSynced is set (has been assigned a value) and false otherwise */
    public boolean isSetLastSynced() {
      return EncodingUtils.testBit(__isset_bitfield, __LASTSYNCED_ISSET_ID);
    }

    public void setLastSyncedIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTSYNCED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LAST_SYNCED:
        if (value == null) {
          unsetLastSynced();
        } else {
          setLastSynced((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LAST_SYNCED:
        return getLastSynced();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LAST_SYNCED:
        return isSetLastSynced();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDomains_args)
        return this.equals((getDomains_args)that);
      return false;
    }

    public boolean equals(getDomains_args that) {
      if (that == null)
        return false;

      boolean this_present_lastSynced = true;
      boolean that_present_lastSynced = true;
      if (this_present_lastSynced || that_present_lastSynced) {
        if (!(this_present_lastSynced && that_present_lastSynced))
          return false;
        if (this.lastSynced != that.lastSynced)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_lastSynced = true;
      list.add(present_lastSynced);
      if (present_lastSynced)
        list.add(lastSynced);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDomains_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLastSynced()).compareTo(other.isSetLastSynced());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastSynced()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastSynced, other.lastSynced);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDomains_args(");
      boolean first = true;

      sb.append("lastSynced:");
      sb.append(this.lastSynced);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDomains_argsStandardSchemeFactory implements SchemeFactory {
      public getDomains_argsStandardScheme getScheme() {
        return new getDomains_argsStandardScheme();
      }
    }

    private static class getDomains_argsStandardScheme extends StandardScheme<getDomains_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDomains_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // LAST_SYNCED
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.lastSynced = iprot.readI64();
                struct.setLastSyncedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDomains_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LAST_SYNCED_FIELD_DESC);
        oprot.writeI64(struct.lastSynced);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDomains_argsTupleSchemeFactory implements SchemeFactory {
      public getDomains_argsTupleScheme getScheme() {
        return new getDomains_argsTupleScheme();
      }
    }

    private static class getDomains_argsTupleScheme extends TupleScheme<getDomains_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDomains_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLastSynced()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLastSynced()) {
          oprot.writeI64(struct.lastSynced);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDomains_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.lastSynced = iprot.readI64();
          struct.setLastSyncedIsSet(true);
        }
      }
    }

  }

  public static class getDomains_result implements org.apache.thrift.TBase<getDomains_result, getDomains_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDomains_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDomains_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDomains_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDomains_resultTupleSchemeFactory());
    }

    private ChannelDomains success; // required
    private ChannelException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChannelDomains.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDomains_result.class, metaDataMap);
    }

    public getDomains_result() {
    }

    public getDomains_result(
      ChannelDomains success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDomains_result(getDomains_result other) {
      if (other.isSetSuccess()) {
        this.success = new ChannelDomains(other.success);
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public getDomains_result deepCopy() {
      return new getDomains_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ChannelDomains getSuccess() {
      return this.success;
    }

    public void setSuccess(ChannelDomains success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ChannelDomains)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ChannelException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDomains_result)
        return this.equals((getDomains_result)that);
      return false;
    }

    public boolean equals(getDomains_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDomains_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDomains_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDomains_resultStandardSchemeFactory implements SchemeFactory {
      public getDomains_resultStandardScheme getScheme() {
        return new getDomains_resultStandardScheme();
      }
    }

    private static class getDomains_resultStandardScheme extends StandardScheme<getDomains_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDomains_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ChannelDomains();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ChannelException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDomains_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDomains_resultTupleSchemeFactory implements SchemeFactory {
      public getDomains_resultTupleScheme getScheme() {
        return new getDomains_resultTupleScheme();
      }
    }

    private static class getDomains_resultTupleScheme extends TupleScheme<getDomains_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDomains_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDomains_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ChannelDomains();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ChannelException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getFriendChannelMatrices_args implements org.apache.thrift.TBase<getFriendChannelMatrices_args, getFriendChannelMatrices_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFriendChannelMatrices_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFriendChannelMatrices_args");

    private static final org.apache.thrift.protocol.TField CHANNEL_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("channelIds", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFriendChannelMatrices_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFriendChannelMatrices_argsTupleSchemeFactory());
    }

    private List<String> channelIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHANNEL_IDS((short)1, "channelIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHANNEL_IDS
            return CHANNEL_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHANNEL_IDS, new org.apache.thrift.meta_data.FieldMetaData("channelIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFriendChannelMatrices_args.class, metaDataMap);
    }

    public getFriendChannelMatrices_args() {
    }

    public getFriendChannelMatrices_args(
      List<String> channelIds)
    {
      this();
      this.channelIds = channelIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFriendChannelMatrices_args(getFriendChannelMatrices_args other) {
      if (other.isSetChannelIds()) {
        List<String> __this__channelIds = new ArrayList<String>(other.channelIds);
        this.channelIds = __this__channelIds;
      }
    }

    public getFriendChannelMatrices_args deepCopy() {
      return new getFriendChannelMatrices_args(this);
    }

    @Override
    public void clear() {
      this.channelIds = null;
    }

    public int getChannelIdsSize() {
      return (this.channelIds == null) ? 0 : this.channelIds.size();
    }

    public java.util.Iterator<String> getChannelIdsIterator() {
      return (this.channelIds == null) ? null : this.channelIds.iterator();
    }

    public void addToChannelIds(String elem) {
      if (this.channelIds == null) {
        this.channelIds = new ArrayList<String>();
      }
      this.channelIds.add(elem);
    }

    public List<String> getChannelIds() {
      return this.channelIds;
    }

    public void setChannelIds(List<String> channelIds) {
      this.channelIds = channelIds;
    }

    public void unsetChannelIds() {
      this.channelIds = null;
    }

    /** Returns true if field channelIds is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelIds() {
      return this.channelIds != null;
    }

    public void setChannelIdsIsSet(boolean value) {
      if (!value) {
        this.channelIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHANNEL_IDS:
        if (value == null) {
          unsetChannelIds();
        } else {
          setChannelIds((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHANNEL_IDS:
        return getChannelIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHANNEL_IDS:
        return isSetChannelIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFriendChannelMatrices_args)
        return this.equals((getFriendChannelMatrices_args)that);
      return false;
    }

    public boolean equals(getFriendChannelMatrices_args that) {
      if (that == null)
        return false;

      boolean this_present_channelIds = true && this.isSetChannelIds();
      boolean that_present_channelIds = true && that.isSetChannelIds();
      if (this_present_channelIds || that_present_channelIds) {
        if (!(this_present_channelIds && that_present_channelIds))
          return false;
        if (!this.channelIds.equals(that.channelIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_channelIds = true && (isSetChannelIds());
      list.add(present_channelIds);
      if (present_channelIds)
        list.add(channelIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFriendChannelMatrices_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChannelIds()).compareTo(other.isSetChannelIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelIds, other.channelIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFriendChannelMatrices_args(");
      boolean first = true;

      sb.append("channelIds:");
      if (this.channelIds == null) {
        sb.append("null");
      } else {
        sb.append(this.channelIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFriendChannelMatrices_argsStandardSchemeFactory implements SchemeFactory {
      public getFriendChannelMatrices_argsStandardScheme getScheme() {
        return new getFriendChannelMatrices_argsStandardScheme();
      }
    }

    private static class getFriendChannelMatrices_argsStandardScheme extends StandardScheme<getFriendChannelMatrices_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFriendChannelMatrices_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHANNEL_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list728 = iprot.readListBegin();
                  struct.channelIds = new ArrayList<String>(_list728.size);
                  String _elem729;
                  for (int _i730 = 0; _i730 < _list728.size; ++_i730)
                  {
                    _elem729 = iprot.readString();
                    struct.channelIds.add(_elem729);
                  }
                  iprot.readListEnd();
                }
                struct.setChannelIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFriendChannelMatrices_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.channelIds != null) {
          oprot.writeFieldBegin(CHANNEL_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.channelIds.size()));
            for (String _iter731 : struct.channelIds)
            {
              oprot.writeString(_iter731);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFriendChannelMatrices_argsTupleSchemeFactory implements SchemeFactory {
      public getFriendChannelMatrices_argsTupleScheme getScheme() {
        return new getFriendChannelMatrices_argsTupleScheme();
      }
    }

    private static class getFriendChannelMatrices_argsTupleScheme extends TupleScheme<getFriendChannelMatrices_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFriendChannelMatrices_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChannelIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetChannelIds()) {
          {
            oprot.writeI32(struct.channelIds.size());
            for (String _iter732 : struct.channelIds)
            {
              oprot.writeString(_iter732);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFriendChannelMatrices_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list733 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.channelIds = new ArrayList<String>(_list733.size);
            String _elem734;
            for (int _i735 = 0; _i735 < _list733.size; ++_i735)
            {
              _elem734 = iprot.readString();
              struct.channelIds.add(_elem734);
            }
          }
          struct.setChannelIdsIsSet(true);
        }
      }
    }

  }

  public static class getFriendChannelMatrices_result implements org.apache.thrift.TBase<getFriendChannelMatrices_result, getFriendChannelMatrices_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFriendChannelMatrices_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFriendChannelMatrices_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFriendChannelMatrices_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFriendChannelMatrices_resultTupleSchemeFactory());
    }

    private FriendChannelMatricesResponse success; // required
    private ChannelException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FriendChannelMatricesResponse.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFriendChannelMatrices_result.class, metaDataMap);
    }

    public getFriendChannelMatrices_result() {
    }

    public getFriendChannelMatrices_result(
      FriendChannelMatricesResponse success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFriendChannelMatrices_result(getFriendChannelMatrices_result other) {
      if (other.isSetSuccess()) {
        this.success = new FriendChannelMatricesResponse(other.success);
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public getFriendChannelMatrices_result deepCopy() {
      return new getFriendChannelMatrices_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public FriendChannelMatricesResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(FriendChannelMatricesResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FriendChannelMatricesResponse)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ChannelException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFriendChannelMatrices_result)
        return this.equals((getFriendChannelMatrices_result)that);
      return false;
    }

    public boolean equals(getFriendChannelMatrices_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFriendChannelMatrices_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFriendChannelMatrices_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFriendChannelMatrices_resultStandardSchemeFactory implements SchemeFactory {
      public getFriendChannelMatrices_resultStandardScheme getScheme() {
        return new getFriendChannelMatrices_resultStandardScheme();
      }
    }

    private static class getFriendChannelMatrices_resultStandardScheme extends StandardScheme<getFriendChannelMatrices_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFriendChannelMatrices_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FriendChannelMatricesResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ChannelException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFriendChannelMatrices_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFriendChannelMatrices_resultTupleSchemeFactory implements SchemeFactory {
      public getFriendChannelMatrices_resultTupleScheme getScheme() {
        return new getFriendChannelMatrices_resultTupleScheme();
      }
    }

    private static class getFriendChannelMatrices_resultTupleScheme extends TupleScheme<getFriendChannelMatrices_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFriendChannelMatrices_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFriendChannelMatrices_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new FriendChannelMatricesResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ChannelException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getNotificationBadgeCount_args implements org.apache.thrift.TBase<getNotificationBadgeCount_args, getNotificationBadgeCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNotificationBadgeCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNotificationBadgeCount_args");

    private static final org.apache.thrift.protocol.TField LOCAL_REV_FIELD_DESC = new org.apache.thrift.protocol.TField("localRev", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNotificationBadgeCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNotificationBadgeCount_argsTupleSchemeFactory());
    }

    private long localRev; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCAL_REV((short)2, "localRev");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // LOCAL_REV
            return LOCAL_REV;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOCALREV_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCAL_REV, new org.apache.thrift.meta_data.FieldMetaData("localRev", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNotificationBadgeCount_args.class, metaDataMap);
    }

    public getNotificationBadgeCount_args() {
    }

    public getNotificationBadgeCount_args(
      long localRev)
    {
      this();
      this.localRev = localRev;
      setLocalRevIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNotificationBadgeCount_args(getNotificationBadgeCount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.localRev = other.localRev;
    }

    public getNotificationBadgeCount_args deepCopy() {
      return new getNotificationBadgeCount_args(this);
    }

    @Override
    public void clear() {
      setLocalRevIsSet(false);
      this.localRev = 0;
    }

    public long getLocalRev() {
      return this.localRev;
    }

    public void setLocalRev(long localRev) {
      this.localRev = localRev;
      setLocalRevIsSet(true);
    }

    public void unsetLocalRev() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCALREV_ISSET_ID);
    }

    /** Returns true if field localRev is set (has been assigned a value) and false otherwise */
    public boolean isSetLocalRev() {
      return EncodingUtils.testBit(__isset_bitfield, __LOCALREV_ISSET_ID);
    }

    public void setLocalRevIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCALREV_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOCAL_REV:
        if (value == null) {
          unsetLocalRev();
        } else {
          setLocalRev((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCAL_REV:
        return getLocalRev();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOCAL_REV:
        return isSetLocalRev();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNotificationBadgeCount_args)
        return this.equals((getNotificationBadgeCount_args)that);
      return false;
    }

    public boolean equals(getNotificationBadgeCount_args that) {
      if (that == null)
        return false;

      boolean this_present_localRev = true;
      boolean that_present_localRev = true;
      if (this_present_localRev || that_present_localRev) {
        if (!(this_present_localRev && that_present_localRev))
          return false;
        if (this.localRev != that.localRev)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_localRev = true;
      list.add(present_localRev);
      if (present_localRev)
        list.add(localRev);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNotificationBadgeCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLocalRev()).compareTo(other.isSetLocalRev());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocalRev()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localRev, other.localRev);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNotificationBadgeCount_args(");
      boolean first = true;

      sb.append("localRev:");
      sb.append(this.localRev);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNotificationBadgeCount_argsStandardSchemeFactory implements SchemeFactory {
      public getNotificationBadgeCount_argsStandardScheme getScheme() {
        return new getNotificationBadgeCount_argsStandardScheme();
      }
    }

    private static class getNotificationBadgeCount_argsStandardScheme extends StandardScheme<getNotificationBadgeCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNotificationBadgeCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // LOCAL_REV
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.localRev = iprot.readI64();
                struct.setLocalRevIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNotificationBadgeCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOCAL_REV_FIELD_DESC);
        oprot.writeI64(struct.localRev);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNotificationBadgeCount_argsTupleSchemeFactory implements SchemeFactory {
      public getNotificationBadgeCount_argsTupleScheme getScheme() {
        return new getNotificationBadgeCount_argsTupleScheme();
      }
    }

    private static class getNotificationBadgeCount_argsTupleScheme extends TupleScheme<getNotificationBadgeCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNotificationBadgeCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLocalRev()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocalRev()) {
          oprot.writeI64(struct.localRev);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNotificationBadgeCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.localRev = iprot.readI64();
          struct.setLocalRevIsSet(true);
        }
      }
    }

  }

  public static class getNotificationBadgeCount_result implements org.apache.thrift.TBase<getNotificationBadgeCount_result, getNotificationBadgeCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNotificationBadgeCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNotificationBadgeCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNotificationBadgeCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNotificationBadgeCount_resultTupleSchemeFactory());
    }

    private int success; // required
    private ChannelException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNotificationBadgeCount_result.class, metaDataMap);
    }

    public getNotificationBadgeCount_result() {
    }

    public getNotificationBadgeCount_result(
      int success,
      ChannelException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNotificationBadgeCount_result(getNotificationBadgeCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public getNotificationBadgeCount_result deepCopy() {
      return new getNotificationBadgeCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ChannelException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNotificationBadgeCount_result)
        return this.equals((getNotificationBadgeCount_result)that);
      return false;
    }

    public boolean equals(getNotificationBadgeCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNotificationBadgeCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNotificationBadgeCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNotificationBadgeCount_resultStandardSchemeFactory implements SchemeFactory {
      public getNotificationBadgeCount_resultStandardScheme getScheme() {
        return new getNotificationBadgeCount_resultStandardScheme();
      }
    }

    private static class getNotificationBadgeCount_resultStandardScheme extends StandardScheme<getNotificationBadgeCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNotificationBadgeCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ChannelException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNotificationBadgeCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNotificationBadgeCount_resultTupleSchemeFactory implements SchemeFactory {
      public getNotificationBadgeCount_resultTupleScheme getScheme() {
        return new getNotificationBadgeCount_resultTupleScheme();
      }
    }

    private static class getNotificationBadgeCount_resultTupleScheme extends TupleScheme<getNotificationBadgeCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNotificationBadgeCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNotificationBadgeCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ChannelException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class issueChannelToken_args implements org.apache.thrift.TBase<issueChannelToken_args, issueChannelToken_args._Fields>, java.io.Serializable, Cloneable, Comparable<issueChannelToken_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issueChannelToken_args");

    private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new issueChannelToken_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new issueChannelToken_argsTupleSchemeFactory());
    }

    private String channelId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHANNEL_ID((short)1, "channelId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHANNEL_ID
            return CHANNEL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issueChannelToken_args.class, metaDataMap);
    }

    public issueChannelToken_args() {
    }

    public issueChannelToken_args(
      String channelId)
    {
      this();
      this.channelId = channelId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueChannelToken_args(issueChannelToken_args other) {
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
    }

    public issueChannelToken_args deepCopy() {
      return new issueChannelToken_args(this);
    }

    @Override
    public void clear() {
      this.channelId = null;
    }

    public String getChannelId() {
      return this.channelId;
    }

    public void setChannelId(String channelId) {
      this.channelId = channelId;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHANNEL_ID:
        if (value == null) {
          unsetChannelId();
        } else {
          setChannelId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHANNEL_ID:
        return getChannelId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHANNEL_ID:
        return isSetChannelId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issueChannelToken_args)
        return this.equals((issueChannelToken_args)that);
      return false;
    }

    public boolean equals(issueChannelToken_args that) {
      if (that == null)
        return false;

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_channelId = true && (isSetChannelId());
      list.add(present_channelId);
      if (present_channelId)
        list.add(channelId);

      return list.hashCode();
    }

    @Override
    public int compareTo(issueChannelToken_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(other.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, other.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("issueChannelToken_args(");
      boolean first = true;

      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issueChannelToken_argsStandardSchemeFactory implements SchemeFactory {
      public issueChannelToken_argsStandardScheme getScheme() {
        return new issueChannelToken_argsStandardScheme();
      }
    }

    private static class issueChannelToken_argsStandardScheme extends StandardScheme<issueChannelToken_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issueChannelToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelId = iprot.readString();
                struct.setChannelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issueChannelToken_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.channelId != null) {
          oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
          oprot.writeString(struct.channelId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issueChannelToken_argsTupleSchemeFactory implements SchemeFactory {
      public issueChannelToken_argsTupleScheme getScheme() {
        return new issueChannelToken_argsTupleScheme();
      }
    }

    private static class issueChannelToken_argsTupleScheme extends TupleScheme<issueChannelToken_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issueChannelToken_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChannelId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetChannelId()) {
          oprot.writeString(struct.channelId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issueChannelToken_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.channelId = iprot.readString();
          struct.setChannelIdIsSet(true);
        }
      }
    }

  }

  public static class issueChannelToken_result implements org.apache.thrift.TBase<issueChannelToken_result, issueChannelToken_result._Fields>, java.io.Serializable, Cloneable, Comparable<issueChannelToken_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issueChannelToken_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new issueChannelToken_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new issueChannelToken_resultTupleSchemeFactory());
    }

    private ChannelToken success; // required
    private ChannelException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChannelToken.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issueChannelToken_result.class, metaDataMap);
    }

    public issueChannelToken_result() {
    }

    public issueChannelToken_result(
      ChannelToken success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueChannelToken_result(issueChannelToken_result other) {
      if (other.isSetSuccess()) {
        this.success = new ChannelToken(other.success);
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public issueChannelToken_result deepCopy() {
      return new issueChannelToken_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ChannelToken getSuccess() {
      return this.success;
    }

    public void setSuccess(ChannelToken success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ChannelToken)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ChannelException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issueChannelToken_result)
        return this.equals((issueChannelToken_result)that);
      return false;
    }

    public boolean equals(issueChannelToken_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(issueChannelToken_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("issueChannelToken_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issueChannelToken_resultStandardSchemeFactory implements SchemeFactory {
      public issueChannelToken_resultStandardScheme getScheme() {
        return new issueChannelToken_resultStandardScheme();
      }
    }

    private static class issueChannelToken_resultStandardScheme extends StandardScheme<issueChannelToken_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issueChannelToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ChannelToken();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ChannelException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issueChannelToken_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issueChannelToken_resultTupleSchemeFactory implements SchemeFactory {
      public issueChannelToken_resultTupleScheme getScheme() {
        return new issueChannelToken_resultTupleScheme();
      }
    }

    private static class issueChannelToken_resultTupleScheme extends TupleScheme<issueChannelToken_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issueChannelToken_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issueChannelToken_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ChannelToken();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ChannelException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class issueRequestToken_args implements org.apache.thrift.TBase<issueRequestToken_args, issueRequestToken_args._Fields>, java.io.Serializable, Cloneable, Comparable<issueRequestToken_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issueRequestToken_args");

    private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OTP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("otpId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new issueRequestToken_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new issueRequestToken_argsTupleSchemeFactory());
    }

    private String channelId; // required
    private String otpId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHANNEL_ID((short)1, "channelId"),
      OTP_ID((short)2, "otpId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHANNEL_ID
            return CHANNEL_ID;
          case 2: // OTP_ID
            return OTP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OTP_ID, new org.apache.thrift.meta_data.FieldMetaData("otpId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issueRequestToken_args.class, metaDataMap);
    }

    public issueRequestToken_args() {
    }

    public issueRequestToken_args(
      String channelId,
      String otpId)
    {
      this();
      this.channelId = channelId;
      this.otpId = otpId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueRequestToken_args(issueRequestToken_args other) {
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
      if (other.isSetOtpId()) {
        this.otpId = other.otpId;
      }
    }

    public issueRequestToken_args deepCopy() {
      return new issueRequestToken_args(this);
    }

    @Override
    public void clear() {
      this.channelId = null;
      this.otpId = null;
    }

    public String getChannelId() {
      return this.channelId;
    }

    public void setChannelId(String channelId) {
      this.channelId = channelId;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public String getOtpId() {
      return this.otpId;
    }

    public void setOtpId(String otpId) {
      this.otpId = otpId;
    }

    public void unsetOtpId() {
      this.otpId = null;
    }

    /** Returns true if field otpId is set (has been assigned a value) and false otherwise */
    public boolean isSetOtpId() {
      return this.otpId != null;
    }

    public void setOtpIdIsSet(boolean value) {
      if (!value) {
        this.otpId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHANNEL_ID:
        if (value == null) {
          unsetChannelId();
        } else {
          setChannelId((String)value);
        }
        break;

      case OTP_ID:
        if (value == null) {
          unsetOtpId();
        } else {
          setOtpId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHANNEL_ID:
        return getChannelId();

      case OTP_ID:
        return getOtpId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHANNEL_ID:
        return isSetChannelId();
      case OTP_ID:
        return isSetOtpId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issueRequestToken_args)
        return this.equals((issueRequestToken_args)that);
      return false;
    }

    public boolean equals(issueRequestToken_args that) {
      if (that == null)
        return false;

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      boolean this_present_otpId = true && this.isSetOtpId();
      boolean that_present_otpId = true && that.isSetOtpId();
      if (this_present_otpId || that_present_otpId) {
        if (!(this_present_otpId && that_present_otpId))
          return false;
        if (!this.otpId.equals(that.otpId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_channelId = true && (isSetChannelId());
      list.add(present_channelId);
      if (present_channelId)
        list.add(channelId);

      boolean present_otpId = true && (isSetOtpId());
      list.add(present_otpId);
      if (present_otpId)
        list.add(otpId);

      return list.hashCode();
    }

    @Override
    public int compareTo(issueRequestToken_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(other.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, other.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOtpId()).compareTo(other.isSetOtpId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOtpId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.otpId, other.otpId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("issueRequestToken_args(");
      boolean first = true;

      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("otpId:");
      if (this.otpId == null) {
        sb.append("null");
      } else {
        sb.append(this.otpId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issueRequestToken_argsStandardSchemeFactory implements SchemeFactory {
      public issueRequestToken_argsStandardScheme getScheme() {
        return new issueRequestToken_argsStandardScheme();
      }
    }

    private static class issueRequestToken_argsStandardScheme extends StandardScheme<issueRequestToken_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issueRequestToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelId = iprot.readString();
                struct.setChannelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OTP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.otpId = iprot.readString();
                struct.setOtpIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issueRequestToken_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.channelId != null) {
          oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
          oprot.writeString(struct.channelId);
          oprot.writeFieldEnd();
        }
        if (struct.otpId != null) {
          oprot.writeFieldBegin(OTP_ID_FIELD_DESC);
          oprot.writeString(struct.otpId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issueRequestToken_argsTupleSchemeFactory implements SchemeFactory {
      public issueRequestToken_argsTupleScheme getScheme() {
        return new issueRequestToken_argsTupleScheme();
      }
    }

    private static class issueRequestToken_argsTupleScheme extends TupleScheme<issueRequestToken_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issueRequestToken_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChannelId()) {
          optionals.set(0);
        }
        if (struct.isSetOtpId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetChannelId()) {
          oprot.writeString(struct.channelId);
        }
        if (struct.isSetOtpId()) {
          oprot.writeString(struct.otpId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issueRequestToken_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.channelId = iprot.readString();
          struct.setChannelIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.otpId = iprot.readString();
          struct.setOtpIdIsSet(true);
        }
      }
    }

  }

  public static class issueRequestToken_result implements org.apache.thrift.TBase<issueRequestToken_result, issueRequestToken_result._Fields>, java.io.Serializable, Cloneable, Comparable<issueRequestToken_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issueRequestToken_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new issueRequestToken_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new issueRequestToken_resultTupleSchemeFactory());
    }

    private String success; // required
    private ChannelException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issueRequestToken_result.class, metaDataMap);
    }

    public issueRequestToken_result() {
    }

    public issueRequestToken_result(
      String success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueRequestToken_result(issueRequestToken_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public issueRequestToken_result deepCopy() {
      return new issueRequestToken_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ChannelException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issueRequestToken_result)
        return this.equals((issueRequestToken_result)that);
      return false;
    }

    public boolean equals(issueRequestToken_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(issueRequestToken_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("issueRequestToken_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issueRequestToken_resultStandardSchemeFactory implements SchemeFactory {
      public issueRequestToken_resultStandardScheme getScheme() {
        return new issueRequestToken_resultStandardScheme();
      }
    }

    private static class issueRequestToken_resultStandardScheme extends StandardScheme<issueRequestToken_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issueRequestToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ChannelException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issueRequestToken_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issueRequestToken_resultTupleSchemeFactory implements SchemeFactory {
      public issueRequestToken_resultTupleScheme getScheme() {
        return new issueRequestToken_resultTupleScheme();
      }
    }

    private static class issueRequestToken_resultTupleScheme extends TupleScheme<issueRequestToken_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issueRequestToken_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issueRequestToken_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ChannelException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class issueRequestTokenWithAuthScheme_args implements org.apache.thrift.TBase<issueRequestTokenWithAuthScheme_args, issueRequestTokenWithAuthScheme_args._Fields>, java.io.Serializable, Cloneable, Comparable<issueRequestTokenWithAuthScheme_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issueRequestTokenWithAuthScheme_args");

    private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OTP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("otpId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField AUTH_SCHEME_FIELD_DESC = new org.apache.thrift.protocol.TField("authScheme", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField RETURN_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("returnUrl", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new issueRequestTokenWithAuthScheme_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new issueRequestTokenWithAuthScheme_argsTupleSchemeFactory());
    }

    private String channelId; // required
    private String otpId; // required
    private List<String> authScheme; // required
    private String returnUrl; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHANNEL_ID((short)1, "channelId"),
      OTP_ID((short)2, "otpId"),
      AUTH_SCHEME((short)3, "authScheme"),
      RETURN_URL((short)4, "returnUrl");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHANNEL_ID
            return CHANNEL_ID;
          case 2: // OTP_ID
            return OTP_ID;
          case 3: // AUTH_SCHEME
            return AUTH_SCHEME;
          case 4: // RETURN_URL
            return RETURN_URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OTP_ID, new org.apache.thrift.meta_data.FieldMetaData("otpId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTH_SCHEME, new org.apache.thrift.meta_data.FieldMetaData("authScheme", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.RETURN_URL, new org.apache.thrift.meta_data.FieldMetaData("returnUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issueRequestTokenWithAuthScheme_args.class, metaDataMap);
    }

    public issueRequestTokenWithAuthScheme_args() {
    }

    public issueRequestTokenWithAuthScheme_args(
      String channelId,
      String otpId,
      List<String> authScheme,
      String returnUrl)
    {
      this();
      this.channelId = channelId;
      this.otpId = otpId;
      this.authScheme = authScheme;
      this.returnUrl = returnUrl;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueRequestTokenWithAuthScheme_args(issueRequestTokenWithAuthScheme_args other) {
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
      if (other.isSetOtpId()) {
        this.otpId = other.otpId;
      }
      if (other.isSetAuthScheme()) {
        List<String> __this__authScheme = new ArrayList<String>(other.authScheme);
        this.authScheme = __this__authScheme;
      }
      if (other.isSetReturnUrl()) {
        this.returnUrl = other.returnUrl;
      }
    }

    public issueRequestTokenWithAuthScheme_args deepCopy() {
      return new issueRequestTokenWithAuthScheme_args(this);
    }

    @Override
    public void clear() {
      this.channelId = null;
      this.otpId = null;
      this.authScheme = null;
      this.returnUrl = null;
    }

    public String getChannelId() {
      return this.channelId;
    }

    public void setChannelId(String channelId) {
      this.channelId = channelId;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public String getOtpId() {
      return this.otpId;
    }

    public void setOtpId(String otpId) {
      this.otpId = otpId;
    }

    public void unsetOtpId() {
      this.otpId = null;
    }

    /** Returns true if field otpId is set (has been assigned a value) and false otherwise */
    public boolean isSetOtpId() {
      return this.otpId != null;
    }

    public void setOtpIdIsSet(boolean value) {
      if (!value) {
        this.otpId = null;
      }
    }

    public int getAuthSchemeSize() {
      return (this.authScheme == null) ? 0 : this.authScheme.size();
    }

    public java.util.Iterator<String> getAuthSchemeIterator() {
      return (this.authScheme == null) ? null : this.authScheme.iterator();
    }

    public void addToAuthScheme(String elem) {
      if (this.authScheme == null) {
        this.authScheme = new ArrayList<String>();
      }
      this.authScheme.add(elem);
    }

    public List<String> getAuthScheme() {
      return this.authScheme;
    }

    public void setAuthScheme(List<String> authScheme) {
      this.authScheme = authScheme;
    }

    public void unsetAuthScheme() {
      this.authScheme = null;
    }

    /** Returns true if field authScheme is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthScheme() {
      return this.authScheme != null;
    }

    public void setAuthSchemeIsSet(boolean value) {
      if (!value) {
        this.authScheme = null;
      }
    }

    public String getReturnUrl() {
      return this.returnUrl;
    }

    public void setReturnUrl(String returnUrl) {
      this.returnUrl = returnUrl;
    }

    public void unsetReturnUrl() {
      this.returnUrl = null;
    }

    /** Returns true if field returnUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetReturnUrl() {
      return this.returnUrl != null;
    }

    public void setReturnUrlIsSet(boolean value) {
      if (!value) {
        this.returnUrl = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHANNEL_ID:
        if (value == null) {
          unsetChannelId();
        } else {
          setChannelId((String)value);
        }
        break;

      case OTP_ID:
        if (value == null) {
          unsetOtpId();
        } else {
          setOtpId((String)value);
        }
        break;

      case AUTH_SCHEME:
        if (value == null) {
          unsetAuthScheme();
        } else {
          setAuthScheme((List<String>)value);
        }
        break;

      case RETURN_URL:
        if (value == null) {
          unsetReturnUrl();
        } else {
          setReturnUrl((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHANNEL_ID:
        return getChannelId();

      case OTP_ID:
        return getOtpId();

      case AUTH_SCHEME:
        return getAuthScheme();

      case RETURN_URL:
        return getReturnUrl();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHANNEL_ID:
        return isSetChannelId();
      case OTP_ID:
        return isSetOtpId();
      case AUTH_SCHEME:
        return isSetAuthScheme();
      case RETURN_URL:
        return isSetReturnUrl();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issueRequestTokenWithAuthScheme_args)
        return this.equals((issueRequestTokenWithAuthScheme_args)that);
      return false;
    }

    public boolean equals(issueRequestTokenWithAuthScheme_args that) {
      if (that == null)
        return false;

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      boolean this_present_otpId = true && this.isSetOtpId();
      boolean that_present_otpId = true && that.isSetOtpId();
      if (this_present_otpId || that_present_otpId) {
        if (!(this_present_otpId && that_present_otpId))
          return false;
        if (!this.otpId.equals(that.otpId))
          return false;
      }

      boolean this_present_authScheme = true && this.isSetAuthScheme();
      boolean that_present_authScheme = true && that.isSetAuthScheme();
      if (this_present_authScheme || that_present_authScheme) {
        if (!(this_present_authScheme && that_present_authScheme))
          return false;
        if (!this.authScheme.equals(that.authScheme))
          return false;
      }

      boolean this_present_returnUrl = true && this.isSetReturnUrl();
      boolean that_present_returnUrl = true && that.isSetReturnUrl();
      if (this_present_returnUrl || that_present_returnUrl) {
        if (!(this_present_returnUrl && that_present_returnUrl))
          return false;
        if (!this.returnUrl.equals(that.returnUrl))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_channelId = true && (isSetChannelId());
      list.add(present_channelId);
      if (present_channelId)
        list.add(channelId);

      boolean present_otpId = true && (isSetOtpId());
      list.add(present_otpId);
      if (present_otpId)
        list.add(otpId);

      boolean present_authScheme = true && (isSetAuthScheme());
      list.add(present_authScheme);
      if (present_authScheme)
        list.add(authScheme);

      boolean present_returnUrl = true && (isSetReturnUrl());
      list.add(present_returnUrl);
      if (present_returnUrl)
        list.add(returnUrl);

      return list.hashCode();
    }

    @Override
    public int compareTo(issueRequestTokenWithAuthScheme_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(other.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, other.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOtpId()).compareTo(other.isSetOtpId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOtpId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.otpId, other.otpId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthScheme()).compareTo(other.isSetAuthScheme());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthScheme()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authScheme, other.authScheme);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReturnUrl()).compareTo(other.isSetReturnUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReturnUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnUrl, other.returnUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("issueRequestTokenWithAuthScheme_args(");
      boolean first = true;

      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("otpId:");
      if (this.otpId == null) {
        sb.append("null");
      } else {
        sb.append(this.otpId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authScheme:");
      if (this.authScheme == null) {
        sb.append("null");
      } else {
        sb.append(this.authScheme);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("returnUrl:");
      if (this.returnUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.returnUrl);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issueRequestTokenWithAuthScheme_argsStandardSchemeFactory implements SchemeFactory {
      public issueRequestTokenWithAuthScheme_argsStandardScheme getScheme() {
        return new issueRequestTokenWithAuthScheme_argsStandardScheme();
      }
    }

    private static class issueRequestTokenWithAuthScheme_argsStandardScheme extends StandardScheme<issueRequestTokenWithAuthScheme_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issueRequestTokenWithAuthScheme_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelId = iprot.readString();
                struct.setChannelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OTP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.otpId = iprot.readString();
                struct.setOtpIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTH_SCHEME
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list736 = iprot.readListBegin();
                  struct.authScheme = new ArrayList<String>(_list736.size);
                  String _elem737;
                  for (int _i738 = 0; _i738 < _list736.size; ++_i738)
                  {
                    _elem737 = iprot.readString();
                    struct.authScheme.add(_elem737);
                  }
                  iprot.readListEnd();
                }
                struct.setAuthSchemeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RETURN_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.returnUrl = iprot.readString();
                struct.setReturnUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issueRequestTokenWithAuthScheme_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.channelId != null) {
          oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
          oprot.writeString(struct.channelId);
          oprot.writeFieldEnd();
        }
        if (struct.otpId != null) {
          oprot.writeFieldBegin(OTP_ID_FIELD_DESC);
          oprot.writeString(struct.otpId);
          oprot.writeFieldEnd();
        }
        if (struct.authScheme != null) {
          oprot.writeFieldBegin(AUTH_SCHEME_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.authScheme.size()));
            for (String _iter739 : struct.authScheme)
            {
              oprot.writeString(_iter739);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.returnUrl != null) {
          oprot.writeFieldBegin(RETURN_URL_FIELD_DESC);
          oprot.writeString(struct.returnUrl);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issueRequestTokenWithAuthScheme_argsTupleSchemeFactory implements SchemeFactory {
      public issueRequestTokenWithAuthScheme_argsTupleScheme getScheme() {
        return new issueRequestTokenWithAuthScheme_argsTupleScheme();
      }
    }

    private static class issueRequestTokenWithAuthScheme_argsTupleScheme extends TupleScheme<issueRequestTokenWithAuthScheme_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issueRequestTokenWithAuthScheme_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChannelId()) {
          optionals.set(0);
        }
        if (struct.isSetOtpId()) {
          optionals.set(1);
        }
        if (struct.isSetAuthScheme()) {
          optionals.set(2);
        }
        if (struct.isSetReturnUrl()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetChannelId()) {
          oprot.writeString(struct.channelId);
        }
        if (struct.isSetOtpId()) {
          oprot.writeString(struct.otpId);
        }
        if (struct.isSetAuthScheme()) {
          {
            oprot.writeI32(struct.authScheme.size());
            for (String _iter740 : struct.authScheme)
            {
              oprot.writeString(_iter740);
            }
          }
        }
        if (struct.isSetReturnUrl()) {
          oprot.writeString(struct.returnUrl);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issueRequestTokenWithAuthScheme_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.channelId = iprot.readString();
          struct.setChannelIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.otpId = iprot.readString();
          struct.setOtpIdIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list741 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.authScheme = new ArrayList<String>(_list741.size);
            String _elem742;
            for (int _i743 = 0; _i743 < _list741.size; ++_i743)
            {
              _elem742 = iprot.readString();
              struct.authScheme.add(_elem742);
            }
          }
          struct.setAuthSchemeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.returnUrl = iprot.readString();
          struct.setReturnUrlIsSet(true);
        }
      }
    }

  }

  public static class issueRequestTokenWithAuthScheme_result implements org.apache.thrift.TBase<issueRequestTokenWithAuthScheme_result, issueRequestTokenWithAuthScheme_result._Fields>, java.io.Serializable, Cloneable, Comparable<issueRequestTokenWithAuthScheme_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issueRequestTokenWithAuthScheme_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new issueRequestTokenWithAuthScheme_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new issueRequestTokenWithAuthScheme_resultTupleSchemeFactory());
    }

    private RequestTokenResponse success; // required
    private ChannelException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RequestTokenResponse.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issueRequestTokenWithAuthScheme_result.class, metaDataMap);
    }

    public issueRequestTokenWithAuthScheme_result() {
    }

    public issueRequestTokenWithAuthScheme_result(
      RequestTokenResponse success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueRequestTokenWithAuthScheme_result(issueRequestTokenWithAuthScheme_result other) {
      if (other.isSetSuccess()) {
        this.success = new RequestTokenResponse(other.success);
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public issueRequestTokenWithAuthScheme_result deepCopy() {
      return new issueRequestTokenWithAuthScheme_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public RequestTokenResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(RequestTokenResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RequestTokenResponse)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ChannelException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issueRequestTokenWithAuthScheme_result)
        return this.equals((issueRequestTokenWithAuthScheme_result)that);
      return false;
    }

    public boolean equals(issueRequestTokenWithAuthScheme_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(issueRequestTokenWithAuthScheme_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("issueRequestTokenWithAuthScheme_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issueRequestTokenWithAuthScheme_resultStandardSchemeFactory implements SchemeFactory {
      public issueRequestTokenWithAuthScheme_resultStandardScheme getScheme() {
        return new issueRequestTokenWithAuthScheme_resultStandardScheme();
      }
    }

    private static class issueRequestTokenWithAuthScheme_resultStandardScheme extends StandardScheme<issueRequestTokenWithAuthScheme_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issueRequestTokenWithAuthScheme_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RequestTokenResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ChannelException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issueRequestTokenWithAuthScheme_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issueRequestTokenWithAuthScheme_resultTupleSchemeFactory implements SchemeFactory {
      public issueRequestTokenWithAuthScheme_resultTupleScheme getScheme() {
        return new issueRequestTokenWithAuthScheme_resultTupleScheme();
      }
    }

    private static class issueRequestTokenWithAuthScheme_resultTupleScheme extends TupleScheme<issueRequestTokenWithAuthScheme_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issueRequestTokenWithAuthScheme_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issueRequestTokenWithAuthScheme_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new RequestTokenResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ChannelException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class reserveCoinUse_args implements org.apache.thrift.TBase<reserveCoinUse_args, reserveCoinUse_args._Fields>, java.io.Serializable, Cloneable, Comparable<reserveCoinUse_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reserveCoinUse_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reserveCoinUse_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reserveCoinUse_argsTupleSchemeFactory());
    }

    private CoinUseReservation request; // required
    private String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)2, "request"),
      LOCALE((short)3, "locale");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // REQUEST
            return REQUEST;
          case 3: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CoinUseReservation.class)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reserveCoinUse_args.class, metaDataMap);
    }

    public reserveCoinUse_args() {
    }

    public reserveCoinUse_args(
      CoinUseReservation request,
      String locale)
    {
      this();
      this.request = request;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reserveCoinUse_args(reserveCoinUse_args other) {
      if (other.isSetRequest()) {
        this.request = new CoinUseReservation(other.request);
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public reserveCoinUse_args deepCopy() {
      return new reserveCoinUse_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
      this.locale = null;
    }

    public CoinUseReservation getRequest() {
      return this.request;
    }

    public void setRequest(CoinUseReservation request) {
      this.request = request;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public String getLocale() {
      return this.locale;
    }

    public void setLocale(String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((CoinUseReservation)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      case LOCALE:
        return getLocale();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      case LOCALE:
        return isSetLocale();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reserveCoinUse_args)
        return this.equals((reserveCoinUse_args)that);
      return false;
    }

    public boolean equals(reserveCoinUse_args that) {
      if (that == null)
        return false;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_request = true && (isSetRequest());
      list.add(present_request);
      if (present_request)
        list.add(request);

      boolean present_locale = true && (isSetLocale());
      list.add(present_locale);
      if (present_locale)
        list.add(locale);

      return list.hashCode();
    }

    @Override
    public int compareTo(reserveCoinUse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reserveCoinUse_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reserveCoinUse_argsStandardSchemeFactory implements SchemeFactory {
      public reserveCoinUse_argsStandardScheme getScheme() {
        return new reserveCoinUse_argsStandardScheme();
      }
    }

    private static class reserveCoinUse_argsStandardScheme extends StandardScheme<reserveCoinUse_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reserveCoinUse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new CoinUseReservation();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reserveCoinUse_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reserveCoinUse_argsTupleSchemeFactory implements SchemeFactory {
      public reserveCoinUse_argsTupleScheme getScheme() {
        return new reserveCoinUse_argsTupleScheme();
      }
    }

    private static class reserveCoinUse_argsTupleScheme extends TupleScheme<reserveCoinUse_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reserveCoinUse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reserveCoinUse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.request = new CoinUseReservation();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

  }

  public static class reserveCoinUse_result implements org.apache.thrift.TBase<reserveCoinUse_result, reserveCoinUse_result._Fields>, java.io.Serializable, Cloneable, Comparable<reserveCoinUse_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reserveCoinUse_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reserveCoinUse_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reserveCoinUse_resultTupleSchemeFactory());
    }

    private String success; // required
    private ChannelException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reserveCoinUse_result.class, metaDataMap);
    }

    public reserveCoinUse_result() {
    }

    public reserveCoinUse_result(
      String success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reserveCoinUse_result(reserveCoinUse_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public reserveCoinUse_result deepCopy() {
      return new reserveCoinUse_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ChannelException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reserveCoinUse_result)
        return this.equals((reserveCoinUse_result)that);
      return false;
    }

    public boolean equals(reserveCoinUse_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(reserveCoinUse_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reserveCoinUse_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reserveCoinUse_resultStandardSchemeFactory implements SchemeFactory {
      public reserveCoinUse_resultStandardScheme getScheme() {
        return new reserveCoinUse_resultStandardScheme();
      }
    }

    private static class reserveCoinUse_resultStandardScheme extends StandardScheme<reserveCoinUse_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reserveCoinUse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ChannelException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reserveCoinUse_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reserveCoinUse_resultTupleSchemeFactory implements SchemeFactory {
      public reserveCoinUse_resultTupleScheme getScheme() {
        return new reserveCoinUse_resultTupleScheme();
      }
    }

    private static class reserveCoinUse_resultTupleScheme extends TupleScheme<reserveCoinUse_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reserveCoinUse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reserveCoinUse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ChannelException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class revokeChannel_args implements org.apache.thrift.TBase<revokeChannel_args, revokeChannel_args._Fields>, java.io.Serializable, Cloneable, Comparable<revokeChannel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("revokeChannel_args");

    private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new revokeChannel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new revokeChannel_argsTupleSchemeFactory());
    }

    private String channelId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHANNEL_ID((short)1, "channelId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHANNEL_ID
            return CHANNEL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(revokeChannel_args.class, metaDataMap);
    }

    public revokeChannel_args() {
    }

    public revokeChannel_args(
      String channelId)
    {
      this();
      this.channelId = channelId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public revokeChannel_args(revokeChannel_args other) {
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
    }

    public revokeChannel_args deepCopy() {
      return new revokeChannel_args(this);
    }

    @Override
    public void clear() {
      this.channelId = null;
    }

    public String getChannelId() {
      return this.channelId;
    }

    public void setChannelId(String channelId) {
      this.channelId = channelId;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHANNEL_ID:
        if (value == null) {
          unsetChannelId();
        } else {
          setChannelId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHANNEL_ID:
        return getChannelId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHANNEL_ID:
        return isSetChannelId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof revokeChannel_args)
        return this.equals((revokeChannel_args)that);
      return false;
    }

    public boolean equals(revokeChannel_args that) {
      if (that == null)
        return false;

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_channelId = true && (isSetChannelId());
      list.add(present_channelId);
      if (present_channelId)
        list.add(channelId);

      return list.hashCode();
    }

    @Override
    public int compareTo(revokeChannel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(other.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, other.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("revokeChannel_args(");
      boolean first = true;

      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class revokeChannel_argsStandardSchemeFactory implements SchemeFactory {
      public revokeChannel_argsStandardScheme getScheme() {
        return new revokeChannel_argsStandardScheme();
      }
    }

    private static class revokeChannel_argsStandardScheme extends StandardScheme<revokeChannel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, revokeChannel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelId = iprot.readString();
                struct.setChannelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, revokeChannel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.channelId != null) {
          oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
          oprot.writeString(struct.channelId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class revokeChannel_argsTupleSchemeFactory implements SchemeFactory {
      public revokeChannel_argsTupleScheme getScheme() {
        return new revokeChannel_argsTupleScheme();
      }
    }

    private static class revokeChannel_argsTupleScheme extends TupleScheme<revokeChannel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, revokeChannel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChannelId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetChannelId()) {
          oprot.writeString(struct.channelId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, revokeChannel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.channelId = iprot.readString();
          struct.setChannelIdIsSet(true);
        }
      }
    }

  }

  public static class revokeChannel_result implements org.apache.thrift.TBase<revokeChannel_result, revokeChannel_result._Fields>, java.io.Serializable, Cloneable, Comparable<revokeChannel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("revokeChannel_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new revokeChannel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new revokeChannel_resultTupleSchemeFactory());
    }

    private ChannelException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(revokeChannel_result.class, metaDataMap);
    }

    public revokeChannel_result() {
    }

    public revokeChannel_result(
      ChannelException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public revokeChannel_result(revokeChannel_result other) {
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public revokeChannel_result deepCopy() {
      return new revokeChannel_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ChannelException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof revokeChannel_result)
        return this.equals((revokeChannel_result)that);
      return false;
    }

    public boolean equals(revokeChannel_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(revokeChannel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("revokeChannel_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class revokeChannel_resultStandardSchemeFactory implements SchemeFactory {
      public revokeChannel_resultStandardScheme getScheme() {
        return new revokeChannel_resultStandardScheme();
      }
    }

    private static class revokeChannel_resultStandardScheme extends StandardScheme<revokeChannel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, revokeChannel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ChannelException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, revokeChannel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class revokeChannel_resultTupleSchemeFactory implements SchemeFactory {
      public revokeChannel_resultTupleScheme getScheme() {
        return new revokeChannel_resultTupleScheme();
      }
    }

    private static class revokeChannel_resultTupleScheme extends TupleScheme<revokeChannel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, revokeChannel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, revokeChannel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new ChannelException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class syncChannelData_args implements org.apache.thrift.TBase<syncChannelData_args, syncChannelData_args._Fields>, java.io.Serializable, Cloneable, Comparable<syncChannelData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("syncChannelData_args");

    private static final org.apache.thrift.protocol.TField LAST_SYNCED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastSynced", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new syncChannelData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new syncChannelData_argsTupleSchemeFactory());
    }

    private long lastSynced; // required
    private String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LAST_SYNCED((short)2, "lastSynced"),
      LOCALE((short)3, "locale");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // LAST_SYNCED
            return LAST_SYNCED;
          case 3: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LASTSYNCED_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LAST_SYNCED, new org.apache.thrift.meta_data.FieldMetaData("lastSynced", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(syncChannelData_args.class, metaDataMap);
    }

    public syncChannelData_args() {
    }

    public syncChannelData_args(
      long lastSynced,
      String locale)
    {
      this();
      this.lastSynced = lastSynced;
      setLastSyncedIsSet(true);
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public syncChannelData_args(syncChannelData_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.lastSynced = other.lastSynced;
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public syncChannelData_args deepCopy() {
      return new syncChannelData_args(this);
    }

    @Override
    public void clear() {
      setLastSyncedIsSet(false);
      this.lastSynced = 0;
      this.locale = null;
    }

    public long getLastSynced() {
      return this.lastSynced;
    }

    public void setLastSynced(long lastSynced) {
      this.lastSynced = lastSynced;
      setLastSyncedIsSet(true);
    }

    public void unsetLastSynced() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTSYNCED_ISSET_ID);
    }

    /** Returns true if field lastSynced is set (has been assigned a value) and false otherwise */
    public boolean isSetLastSynced() {
      return EncodingUtils.testBit(__isset_bitfield, __LASTSYNCED_ISSET_ID);
    }

    public void setLastSyncedIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTSYNCED_ISSET_ID, value);
    }

    public String getLocale() {
      return this.locale;
    }

    public void setLocale(String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LAST_SYNCED:
        if (value == null) {
          unsetLastSynced();
        } else {
          setLastSynced((Long)value);
        }
        break;

      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LAST_SYNCED:
        return getLastSynced();

      case LOCALE:
        return getLocale();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LAST_SYNCED:
        return isSetLastSynced();
      case LOCALE:
        return isSetLocale();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof syncChannelData_args)
        return this.equals((syncChannelData_args)that);
      return false;
    }

    public boolean equals(syncChannelData_args that) {
      if (that == null)
        return false;

      boolean this_present_lastSynced = true;
      boolean that_present_lastSynced = true;
      if (this_present_lastSynced || that_present_lastSynced) {
        if (!(this_present_lastSynced && that_present_lastSynced))
          return false;
        if (this.lastSynced != that.lastSynced)
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_lastSynced = true;
      list.add(present_lastSynced);
      if (present_lastSynced)
        list.add(lastSynced);

      boolean present_locale = true && (isSetLocale());
      list.add(present_locale);
      if (present_locale)
        list.add(locale);

      return list.hashCode();
    }

    @Override
    public int compareTo(syncChannelData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLastSynced()).compareTo(other.isSetLastSynced());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastSynced()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastSynced, other.lastSynced);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("syncChannelData_args(");
      boolean first = true;

      sb.append("lastSynced:");
      sb.append(this.lastSynced);
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class syncChannelData_argsStandardSchemeFactory implements SchemeFactory {
      public syncChannelData_argsStandardScheme getScheme() {
        return new syncChannelData_argsStandardScheme();
      }
    }

    private static class syncChannelData_argsStandardScheme extends StandardScheme<syncChannelData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, syncChannelData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // LAST_SYNCED
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.lastSynced = iprot.readI64();
                struct.setLastSyncedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, syncChannelData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LAST_SYNCED_FIELD_DESC);
        oprot.writeI64(struct.lastSynced);
        oprot.writeFieldEnd();
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class syncChannelData_argsTupleSchemeFactory implements SchemeFactory {
      public syncChannelData_argsTupleScheme getScheme() {
        return new syncChannelData_argsTupleScheme();
      }
    }

    private static class syncChannelData_argsTupleScheme extends TupleScheme<syncChannelData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, syncChannelData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLastSynced()) {
          optionals.set(0);
        }
        if (struct.isSetLocale()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLastSynced()) {
          oprot.writeI64(struct.lastSynced);
        }
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, syncChannelData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.lastSynced = iprot.readI64();
          struct.setLastSyncedIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

  }

  public static class syncChannelData_result implements org.apache.thrift.TBase<syncChannelData_result, syncChannelData_result._Fields>, java.io.Serializable, Cloneable, Comparable<syncChannelData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("syncChannelData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new syncChannelData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new syncChannelData_resultTupleSchemeFactory());
    }

    private ChannelSyncDatas success; // required
    private ChannelException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChannelSyncDatas.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(syncChannelData_result.class, metaDataMap);
    }

    public syncChannelData_result() {
    }

    public syncChannelData_result(
      ChannelSyncDatas success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public syncChannelData_result(syncChannelData_result other) {
      if (other.isSetSuccess()) {
        this.success = new ChannelSyncDatas(other.success);
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public syncChannelData_result deepCopy() {
      return new syncChannelData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ChannelSyncDatas getSuccess() {
      return this.success;
    }

    public void setSuccess(ChannelSyncDatas success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ChannelSyncDatas)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ChannelException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof syncChannelData_result)
        return this.equals((syncChannelData_result)that);
      return false;
    }

    public boolean equals(syncChannelData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(syncChannelData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("syncChannelData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class syncChannelData_resultStandardSchemeFactory implements SchemeFactory {
      public syncChannelData_resultStandardScheme getScheme() {
        return new syncChannelData_resultStandardScheme();
      }
    }

    private static class syncChannelData_resultStandardScheme extends StandardScheme<syncChannelData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, syncChannelData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ChannelSyncDatas();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ChannelException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, syncChannelData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class syncChannelData_resultTupleSchemeFactory implements SchemeFactory {
      public syncChannelData_resultTupleScheme getScheme() {
        return new syncChannelData_resultTupleScheme();
      }
    }

    private static class syncChannelData_resultTupleScheme extends TupleScheme<syncChannelData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, syncChannelData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, syncChannelData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ChannelSyncDatas();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ChannelException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class updateChannelNotificationSetting_args implements org.apache.thrift.TBase<updateChannelNotificationSetting_args, updateChannelNotificationSetting_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateChannelNotificationSetting_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateChannelNotificationSetting_args");

    private static final org.apache.thrift.protocol.TField SETTING_FIELD_DESC = new org.apache.thrift.protocol.TField("setting", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateChannelNotificationSetting_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateChannelNotificationSetting_argsTupleSchemeFactory());
    }

    private List<ChannelNotificationSetting> setting; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SETTING((short)1, "setting");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SETTING
            return SETTING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SETTING, new org.apache.thrift.meta_data.FieldMetaData("setting", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChannelNotificationSetting.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateChannelNotificationSetting_args.class, metaDataMap);
    }

    public updateChannelNotificationSetting_args() {
    }

    public updateChannelNotificationSetting_args(
      List<ChannelNotificationSetting> setting)
    {
      this();
      this.setting = setting;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateChannelNotificationSetting_args(updateChannelNotificationSetting_args other) {
      if (other.isSetSetting()) {
        List<ChannelNotificationSetting> __this__setting = new ArrayList<ChannelNotificationSetting>(other.setting.size());
        for (ChannelNotificationSetting other_element : other.setting) {
          __this__setting.add(new ChannelNotificationSetting(other_element));
        }
        this.setting = __this__setting;
      }
    }

    public updateChannelNotificationSetting_args deepCopy() {
      return new updateChannelNotificationSetting_args(this);
    }

    @Override
    public void clear() {
      this.setting = null;
    }

    public int getSettingSize() {
      return (this.setting == null) ? 0 : this.setting.size();
    }

    public java.util.Iterator<ChannelNotificationSetting> getSettingIterator() {
      return (this.setting == null) ? null : this.setting.iterator();
    }

    public void addToSetting(ChannelNotificationSetting elem) {
      if (this.setting == null) {
        this.setting = new ArrayList<ChannelNotificationSetting>();
      }
      this.setting.add(elem);
    }

    public List<ChannelNotificationSetting> getSetting() {
      return this.setting;
    }

    public void setSetting(List<ChannelNotificationSetting> setting) {
      this.setting = setting;
    }

    public void unsetSetting() {
      this.setting = null;
    }

    /** Returns true if field setting is set (has been assigned a value) and false otherwise */
    public boolean isSetSetting() {
      return this.setting != null;
    }

    public void setSettingIsSet(boolean value) {
      if (!value) {
        this.setting = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SETTING:
        if (value == null) {
          unsetSetting();
        } else {
          setSetting((List<ChannelNotificationSetting>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SETTING:
        return getSetting();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SETTING:
        return isSetSetting();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateChannelNotificationSetting_args)
        return this.equals((updateChannelNotificationSetting_args)that);
      return false;
    }

    public boolean equals(updateChannelNotificationSetting_args that) {
      if (that == null)
        return false;

      boolean this_present_setting = true && this.isSetSetting();
      boolean that_present_setting = true && that.isSetSetting();
      if (this_present_setting || that_present_setting) {
        if (!(this_present_setting && that_present_setting))
          return false;
        if (!this.setting.equals(that.setting))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_setting = true && (isSetSetting());
      list.add(present_setting);
      if (present_setting)
        list.add(setting);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateChannelNotificationSetting_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSetting()).compareTo(other.isSetSetting());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSetting()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setting, other.setting);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateChannelNotificationSetting_args(");
      boolean first = true;

      sb.append("setting:");
      if (this.setting == null) {
        sb.append("null");
      } else {
        sb.append(this.setting);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateChannelNotificationSetting_argsStandardSchemeFactory implements SchemeFactory {
      public updateChannelNotificationSetting_argsStandardScheme getScheme() {
        return new updateChannelNotificationSetting_argsStandardScheme();
      }
    }

    private static class updateChannelNotificationSetting_argsStandardScheme extends StandardScheme<updateChannelNotificationSetting_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateChannelNotificationSetting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SETTING
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list744 = iprot.readListBegin();
                  struct.setting = new ArrayList<ChannelNotificationSetting>(_list744.size);
                  ChannelNotificationSetting _elem745;
                  for (int _i746 = 0; _i746 < _list744.size; ++_i746)
                  {
                    _elem745 = new ChannelNotificationSetting();
                    _elem745.read(iprot);
                    struct.setting.add(_elem745);
                  }
                  iprot.readListEnd();
                }
                struct.setSettingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateChannelNotificationSetting_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.setting != null) {
          oprot.writeFieldBegin(SETTING_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.setting.size()));
            for (ChannelNotificationSetting _iter747 : struct.setting)
            {
              _iter747.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateChannelNotificationSetting_argsTupleSchemeFactory implements SchemeFactory {
      public updateChannelNotificationSetting_argsTupleScheme getScheme() {
        return new updateChannelNotificationSetting_argsTupleScheme();
      }
    }

    private static class updateChannelNotificationSetting_argsTupleScheme extends TupleScheme<updateChannelNotificationSetting_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateChannelNotificationSetting_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSetting()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSetting()) {
          {
            oprot.writeI32(struct.setting.size());
            for (ChannelNotificationSetting _iter748 : struct.setting)
            {
              _iter748.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateChannelNotificationSetting_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list749 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.setting = new ArrayList<ChannelNotificationSetting>(_list749.size);
            ChannelNotificationSetting _elem750;
            for (int _i751 = 0; _i751 < _list749.size; ++_i751)
            {
              _elem750 = new ChannelNotificationSetting();
              _elem750.read(iprot);
              struct.setting.add(_elem750);
            }
          }
          struct.setSettingIsSet(true);
        }
      }
    }

  }

  public static class updateChannelNotificationSetting_result implements org.apache.thrift.TBase<updateChannelNotificationSetting_result, updateChannelNotificationSetting_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateChannelNotificationSetting_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateChannelNotificationSetting_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateChannelNotificationSetting_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateChannelNotificationSetting_resultTupleSchemeFactory());
    }

    private ChannelException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateChannelNotificationSetting_result.class, metaDataMap);
    }

    public updateChannelNotificationSetting_result() {
    }

    public updateChannelNotificationSetting_result(
      ChannelException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateChannelNotificationSetting_result(updateChannelNotificationSetting_result other) {
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public updateChannelNotificationSetting_result deepCopy() {
      return new updateChannelNotificationSetting_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ChannelException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateChannelNotificationSetting_result)
        return this.equals((updateChannelNotificationSetting_result)that);
      return false;
    }

    public boolean equals(updateChannelNotificationSetting_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateChannelNotificationSetting_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateChannelNotificationSetting_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateChannelNotificationSetting_resultStandardSchemeFactory implements SchemeFactory {
      public updateChannelNotificationSetting_resultStandardScheme getScheme() {
        return new updateChannelNotificationSetting_resultStandardScheme();
      }
    }

    private static class updateChannelNotificationSetting_resultStandardScheme extends StandardScheme<updateChannelNotificationSetting_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateChannelNotificationSetting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ChannelException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateChannelNotificationSetting_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateChannelNotificationSetting_resultTupleSchemeFactory implements SchemeFactory {
      public updateChannelNotificationSetting_resultTupleScheme getScheme() {
        return new updateChannelNotificationSetting_resultTupleScheme();
      }
    }

    private static class updateChannelNotificationSetting_resultTupleScheme extends TupleScheme<updateChannelNotificationSetting_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateChannelNotificationSetting_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateChannelNotificationSetting_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new ChannelException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

}
