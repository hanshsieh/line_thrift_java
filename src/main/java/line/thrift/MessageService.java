/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package line.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-04-08")
public class MessageService {

  public interface Iface {

    public MessageOperations fetchMessageOperations(long localRevision, long lastOpTimestamp, int count) throws TalkException, org.apache.thrift.TException;

    public LastReadMessageIds getLastReadMessageIds(String chatId) throws TalkException, org.apache.thrift.TException;

    public List<LastReadMessageIds> multiGetLastReadMessageIds(List<String> chatIds) throws TalkException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void fetchMessageOperations(long localRevision, long lastOpTimestamp, int count, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLastReadMessageIds(String chatId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void multiGetLastReadMessageIds(List<String> chatIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public MessageOperations fetchMessageOperations(long localRevision, long lastOpTimestamp, int count) throws TalkException, org.apache.thrift.TException
    {
      sendFetchMessageOperations(localRevision, lastOpTimestamp, count);
      return recvFetchMessageOperations();
    }

    public void sendFetchMessageOperations(long localRevision, long lastOpTimestamp, int count) throws org.apache.thrift.TException
    {
      fetchMessageOperations_args args = new fetchMessageOperations_args();
      args.setLocalRevision(localRevision);
      args.setLastOpTimestamp(lastOpTimestamp);
      args.setCount(count);
      sendBase("fetchMessageOperations", args);
    }

    public MessageOperations recvFetchMessageOperations() throws TalkException, org.apache.thrift.TException
    {
      fetchMessageOperations_result result = new fetchMessageOperations_result();
      receiveBase(result, "fetchMessageOperations");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchMessageOperations failed: unknown result");
    }

    public LastReadMessageIds getLastReadMessageIds(String chatId) throws TalkException, org.apache.thrift.TException
    {
      sendGetLastReadMessageIds(chatId);
      return recvGetLastReadMessageIds();
    }

    public void sendGetLastReadMessageIds(String chatId) throws org.apache.thrift.TException
    {
      getLastReadMessageIds_args args = new getLastReadMessageIds_args();
      args.setChatId(chatId);
      sendBase("getLastReadMessageIds", args);
    }

    public LastReadMessageIds recvGetLastReadMessageIds() throws TalkException, org.apache.thrift.TException
    {
      getLastReadMessageIds_result result = new getLastReadMessageIds_result();
      receiveBase(result, "getLastReadMessageIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLastReadMessageIds failed: unknown result");
    }

    public List<LastReadMessageIds> multiGetLastReadMessageIds(List<String> chatIds) throws TalkException, org.apache.thrift.TException
    {
      sendMultiGetLastReadMessageIds(chatIds);
      return recvMultiGetLastReadMessageIds();
    }

    public void sendMultiGetLastReadMessageIds(List<String> chatIds) throws org.apache.thrift.TException
    {
      multiGetLastReadMessageIds_args args = new multiGetLastReadMessageIds_args();
      args.setChatIds(chatIds);
      sendBase("multiGetLastReadMessageIds", args);
    }

    public List<LastReadMessageIds> recvMultiGetLastReadMessageIds() throws TalkException, org.apache.thrift.TException
    {
      multiGetLastReadMessageIds_result result = new multiGetLastReadMessageIds_result();
      receiveBase(result, "multiGetLastReadMessageIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "multiGetLastReadMessageIds failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void fetchMessageOperations(long localRevision, long lastOpTimestamp, int count, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetchMessageOperations_call method_call = new fetchMessageOperations_call(localRevision, lastOpTimestamp, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchMessageOperations_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long localRevision;
      private long lastOpTimestamp;
      private int count;
      public fetchMessageOperations_call(long localRevision, long lastOpTimestamp, int count, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.localRevision = localRevision;
        this.lastOpTimestamp = lastOpTimestamp;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchMessageOperations", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetchMessageOperations_args args = new fetchMessageOperations_args();
        args.setLocalRevision(localRevision);
        args.setLastOpTimestamp(lastOpTimestamp);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MessageOperations getResult() throws TalkException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvFetchMessageOperations();
      }
    }

    public void getLastReadMessageIds(String chatId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLastReadMessageIds_call method_call = new getLastReadMessageIds_call(chatId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLastReadMessageIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String chatId;
      public getLastReadMessageIds_call(String chatId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.chatId = chatId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLastReadMessageIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLastReadMessageIds_args args = new getLastReadMessageIds_args();
        args.setChatId(chatId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public LastReadMessageIds getResult() throws TalkException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetLastReadMessageIds();
      }
    }

    public void multiGetLastReadMessageIds(List<String> chatIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      multiGetLastReadMessageIds_call method_call = new multiGetLastReadMessageIds_call(chatIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class multiGetLastReadMessageIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> chatIds;
      public multiGetLastReadMessageIds_call(List<String> chatIds, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.chatIds = chatIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multiGetLastReadMessageIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        multiGetLastReadMessageIds_args args = new multiGetLastReadMessageIds_args();
        args.setChatIds(chatIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<LastReadMessageIds> getResult() throws TalkException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvMultiGetLastReadMessageIds();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("fetchMessageOperations", new fetchMessageOperations());
      processMap.put("getLastReadMessageIds", new getLastReadMessageIds());
      processMap.put("multiGetLastReadMessageIds", new multiGetLastReadMessageIds());
      return processMap;
    }

    public static class fetchMessageOperations<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchMessageOperations_args> {
      public fetchMessageOperations() {
        super("fetchMessageOperations");
      }

      public fetchMessageOperations_args getEmptyArgsInstance() {
        return new fetchMessageOperations_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public fetchMessageOperations_result getResult(I iface, fetchMessageOperations_args args) throws org.apache.thrift.TException {
        fetchMessageOperations_result result = new fetchMessageOperations_result();
        try {
          result.success = iface.fetchMessageOperations(args.localRevision, args.lastOpTimestamp, args.count);
        } catch (TalkException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getLastReadMessageIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLastReadMessageIds_args> {
      public getLastReadMessageIds() {
        super("getLastReadMessageIds");
      }

      public getLastReadMessageIds_args getEmptyArgsInstance() {
        return new getLastReadMessageIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLastReadMessageIds_result getResult(I iface, getLastReadMessageIds_args args) throws org.apache.thrift.TException {
        getLastReadMessageIds_result result = new getLastReadMessageIds_result();
        try {
          result.success = iface.getLastReadMessageIds(args.chatId);
        } catch (TalkException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class multiGetLastReadMessageIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, multiGetLastReadMessageIds_args> {
      public multiGetLastReadMessageIds() {
        super("multiGetLastReadMessageIds");
      }

      public multiGetLastReadMessageIds_args getEmptyArgsInstance() {
        return new multiGetLastReadMessageIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public multiGetLastReadMessageIds_result getResult(I iface, multiGetLastReadMessageIds_args args) throws org.apache.thrift.TException {
        multiGetLastReadMessageIds_result result = new multiGetLastReadMessageIds_result();
        try {
          result.success = iface.multiGetLastReadMessageIds(args.chatIds);
        } catch (TalkException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("fetchMessageOperations", new fetchMessageOperations());
      processMap.put("getLastReadMessageIds", new getLastReadMessageIds());
      processMap.put("multiGetLastReadMessageIds", new multiGetLastReadMessageIds());
      return processMap;
    }

    public static class fetchMessageOperations<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fetchMessageOperations_args, MessageOperations> {
      public fetchMessageOperations() {
        super("fetchMessageOperations");
      }

      public fetchMessageOperations_args getEmptyArgsInstance() {
        return new fetchMessageOperations_args();
      }

      public AsyncMethodCallback<MessageOperations> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MessageOperations>() { 
          public void onComplete(MessageOperations o) {
            fetchMessageOperations_result result = new fetchMessageOperations_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            fetchMessageOperations_result result = new fetchMessageOperations_result();
            if (e instanceof TalkException) {
                        result.e = (TalkException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fetchMessageOperations_args args, org.apache.thrift.async.AsyncMethodCallback<MessageOperations> resultHandler) throws TException {
        iface.fetchMessageOperations(args.localRevision, args.lastOpTimestamp, args.count,resultHandler);
      }
    }

    public static class getLastReadMessageIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLastReadMessageIds_args, LastReadMessageIds> {
      public getLastReadMessageIds() {
        super("getLastReadMessageIds");
      }

      public getLastReadMessageIds_args getEmptyArgsInstance() {
        return new getLastReadMessageIds_args();
      }

      public AsyncMethodCallback<LastReadMessageIds> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<LastReadMessageIds>() { 
          public void onComplete(LastReadMessageIds o) {
            getLastReadMessageIds_result result = new getLastReadMessageIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLastReadMessageIds_result result = new getLastReadMessageIds_result();
            if (e instanceof TalkException) {
                        result.e = (TalkException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLastReadMessageIds_args args, org.apache.thrift.async.AsyncMethodCallback<LastReadMessageIds> resultHandler) throws TException {
        iface.getLastReadMessageIds(args.chatId,resultHandler);
      }
    }

    public static class multiGetLastReadMessageIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, multiGetLastReadMessageIds_args, List<LastReadMessageIds>> {
      public multiGetLastReadMessageIds() {
        super("multiGetLastReadMessageIds");
      }

      public multiGetLastReadMessageIds_args getEmptyArgsInstance() {
        return new multiGetLastReadMessageIds_args();
      }

      public AsyncMethodCallback<List<LastReadMessageIds>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<LastReadMessageIds>>() { 
          public void onComplete(List<LastReadMessageIds> o) {
            multiGetLastReadMessageIds_result result = new multiGetLastReadMessageIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            multiGetLastReadMessageIds_result result = new multiGetLastReadMessageIds_result();
            if (e instanceof TalkException) {
                        result.e = (TalkException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, multiGetLastReadMessageIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<LastReadMessageIds>> resultHandler) throws TException {
        iface.multiGetLastReadMessageIds(args.chatIds,resultHandler);
      }
    }

  }

  public static class fetchMessageOperations_args implements org.apache.thrift.TBase<fetchMessageOperations_args, fetchMessageOperations_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetchMessageOperations_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchMessageOperations_args");

    private static final org.apache.thrift.protocol.TField LOCAL_REVISION_FIELD_DESC = new org.apache.thrift.protocol.TField("localRevision", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField LAST_OP_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastOpTimestamp", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchMessageOperations_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchMessageOperations_argsTupleSchemeFactory());
    }

    private long localRevision; // required
    private long lastOpTimestamp; // required
    private int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCAL_REVISION((short)2, "localRevision"),
      LAST_OP_TIMESTAMP((short)3, "lastOpTimestamp"),
      COUNT((short)4, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // LOCAL_REVISION
            return LOCAL_REVISION;
          case 3: // LAST_OP_TIMESTAMP
            return LAST_OP_TIMESTAMP;
          case 4: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOCALREVISION_ISSET_ID = 0;
    private static final int __LASTOPTIMESTAMP_ISSET_ID = 1;
    private static final int __COUNT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCAL_REVISION, new org.apache.thrift.meta_data.FieldMetaData("localRevision", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LAST_OP_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastOpTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchMessageOperations_args.class, metaDataMap);
    }

    public fetchMessageOperations_args() {
    }

    public fetchMessageOperations_args(
      long localRevision,
      long lastOpTimestamp,
      int count)
    {
      this();
      this.localRevision = localRevision;
      setLocalRevisionIsSet(true);
      this.lastOpTimestamp = lastOpTimestamp;
      setLastOpTimestampIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchMessageOperations_args(fetchMessageOperations_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.localRevision = other.localRevision;
      this.lastOpTimestamp = other.lastOpTimestamp;
      this.count = other.count;
    }

    public fetchMessageOperations_args deepCopy() {
      return new fetchMessageOperations_args(this);
    }

    @Override
    public void clear() {
      setLocalRevisionIsSet(false);
      this.localRevision = 0;
      setLastOpTimestampIsSet(false);
      this.lastOpTimestamp = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public long getLocalRevision() {
      return this.localRevision;
    }

    public void setLocalRevision(long localRevision) {
      this.localRevision = localRevision;
      setLocalRevisionIsSet(true);
    }

    public void unsetLocalRevision() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCALREVISION_ISSET_ID);
    }

    /** Returns true if field localRevision is set (has been assigned a value) and false otherwise */
    public boolean isSetLocalRevision() {
      return EncodingUtils.testBit(__isset_bitfield, __LOCALREVISION_ISSET_ID);
    }

    public void setLocalRevisionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCALREVISION_ISSET_ID, value);
    }

    public long getLastOpTimestamp() {
      return this.lastOpTimestamp;
    }

    public void setLastOpTimestamp(long lastOpTimestamp) {
      this.lastOpTimestamp = lastOpTimestamp;
      setLastOpTimestampIsSet(true);
    }

    public void unsetLastOpTimestamp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTOPTIMESTAMP_ISSET_ID);
    }

    /** Returns true if field lastOpTimestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetLastOpTimestamp() {
      return EncodingUtils.testBit(__isset_bitfield, __LASTOPTIMESTAMP_ISSET_ID);
    }

    public void setLastOpTimestampIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTOPTIMESTAMP_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public void setCount(int count) {
      this.count = count;
      setCountIsSet(true);
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOCAL_REVISION:
        if (value == null) {
          unsetLocalRevision();
        } else {
          setLocalRevision((Long)value);
        }
        break;

      case LAST_OP_TIMESTAMP:
        if (value == null) {
          unsetLastOpTimestamp();
        } else {
          setLastOpTimestamp((Long)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCAL_REVISION:
        return getLocalRevision();

      case LAST_OP_TIMESTAMP:
        return getLastOpTimestamp();

      case COUNT:
        return getCount();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOCAL_REVISION:
        return isSetLocalRevision();
      case LAST_OP_TIMESTAMP:
        return isSetLastOpTimestamp();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchMessageOperations_args)
        return this.equals((fetchMessageOperations_args)that);
      return false;
    }

    public boolean equals(fetchMessageOperations_args that) {
      if (that == null)
        return false;

      boolean this_present_localRevision = true;
      boolean that_present_localRevision = true;
      if (this_present_localRevision || that_present_localRevision) {
        if (!(this_present_localRevision && that_present_localRevision))
          return false;
        if (this.localRevision != that.localRevision)
          return false;
      }

      boolean this_present_lastOpTimestamp = true;
      boolean that_present_lastOpTimestamp = true;
      if (this_present_lastOpTimestamp || that_present_lastOpTimestamp) {
        if (!(this_present_lastOpTimestamp && that_present_lastOpTimestamp))
          return false;
        if (this.lastOpTimestamp != that.lastOpTimestamp)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_localRevision = true;
      list.add(present_localRevision);
      if (present_localRevision)
        list.add(localRevision);

      boolean present_lastOpTimestamp = true;
      list.add(present_lastOpTimestamp);
      if (present_lastOpTimestamp)
        list.add(lastOpTimestamp);

      boolean present_count = true;
      list.add(present_count);
      if (present_count)
        list.add(count);

      return list.hashCode();
    }

    @Override
    public int compareTo(fetchMessageOperations_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLocalRevision()).compareTo(other.isSetLocalRevision());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocalRevision()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localRevision, other.localRevision);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLastOpTimestamp()).compareTo(other.isSetLastOpTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastOpTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastOpTimestamp, other.lastOpTimestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchMessageOperations_args(");
      boolean first = true;

      sb.append("localRevision:");
      sb.append(this.localRevision);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastOpTimestamp:");
      sb.append(this.lastOpTimestamp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchMessageOperations_argsStandardSchemeFactory implements SchemeFactory {
      public fetchMessageOperations_argsStandardScheme getScheme() {
        return new fetchMessageOperations_argsStandardScheme();
      }
    }

    private static class fetchMessageOperations_argsStandardScheme extends StandardScheme<fetchMessageOperations_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchMessageOperations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // LOCAL_REVISION
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.localRevision = iprot.readI64();
                struct.setLocalRevisionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LAST_OP_TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.lastOpTimestamp = iprot.readI64();
                struct.setLastOpTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchMessageOperations_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOCAL_REVISION_FIELD_DESC);
        oprot.writeI64(struct.localRevision);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LAST_OP_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.lastOpTimestamp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchMessageOperations_argsTupleSchemeFactory implements SchemeFactory {
      public fetchMessageOperations_argsTupleScheme getScheme() {
        return new fetchMessageOperations_argsTupleScheme();
      }
    }

    private static class fetchMessageOperations_argsTupleScheme extends TupleScheme<fetchMessageOperations_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchMessageOperations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLocalRevision()) {
          optionals.set(0);
        }
        if (struct.isSetLastOpTimestamp()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetLocalRevision()) {
          oprot.writeI64(struct.localRevision);
        }
        if (struct.isSetLastOpTimestamp()) {
          oprot.writeI64(struct.lastOpTimestamp);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchMessageOperations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.localRevision = iprot.readI64();
          struct.setLocalRevisionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lastOpTimestamp = iprot.readI64();
          struct.setLastOpTimestampIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

  }

  public static class fetchMessageOperations_result implements org.apache.thrift.TBase<fetchMessageOperations_result, fetchMessageOperations_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetchMessageOperations_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchMessageOperations_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchMessageOperations_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchMessageOperations_resultTupleSchemeFactory());
    }

    private MessageOperations success; // required
    private TalkException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MessageOperations.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchMessageOperations_result.class, metaDataMap);
    }

    public fetchMessageOperations_result() {
    }

    public fetchMessageOperations_result(
      MessageOperations success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchMessageOperations_result(fetchMessageOperations_result other) {
      if (other.isSetSuccess()) {
        this.success = new MessageOperations(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public fetchMessageOperations_result deepCopy() {
      return new fetchMessageOperations_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public MessageOperations getSuccess() {
      return this.success;
    }

    public void setSuccess(MessageOperations success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MessageOperations)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TalkException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchMessageOperations_result)
        return this.equals((fetchMessageOperations_result)that);
      return false;
    }

    public boolean equals(fetchMessageOperations_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(fetchMessageOperations_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchMessageOperations_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchMessageOperations_resultStandardSchemeFactory implements SchemeFactory {
      public fetchMessageOperations_resultStandardScheme getScheme() {
        return new fetchMessageOperations_resultStandardScheme();
      }
    }

    private static class fetchMessageOperations_resultStandardScheme extends StandardScheme<fetchMessageOperations_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchMessageOperations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MessageOperations();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TalkException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchMessageOperations_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchMessageOperations_resultTupleSchemeFactory implements SchemeFactory {
      public fetchMessageOperations_resultTupleScheme getScheme() {
        return new fetchMessageOperations_resultTupleScheme();
      }
    }

    private static class fetchMessageOperations_resultTupleScheme extends TupleScheme<fetchMessageOperations_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchMessageOperations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchMessageOperations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new MessageOperations();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new TalkException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getLastReadMessageIds_args implements org.apache.thrift.TBase<getLastReadMessageIds_args, getLastReadMessageIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLastReadMessageIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLastReadMessageIds_args");

    private static final org.apache.thrift.protocol.TField CHAT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chatId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLastReadMessageIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLastReadMessageIds_argsTupleSchemeFactory());
    }

    private String chatId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHAT_ID((short)2, "chatId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // CHAT_ID
            return CHAT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHAT_ID, new org.apache.thrift.meta_data.FieldMetaData("chatId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLastReadMessageIds_args.class, metaDataMap);
    }

    public getLastReadMessageIds_args() {
    }

    public getLastReadMessageIds_args(
      String chatId)
    {
      this();
      this.chatId = chatId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLastReadMessageIds_args(getLastReadMessageIds_args other) {
      if (other.isSetChatId()) {
        this.chatId = other.chatId;
      }
    }

    public getLastReadMessageIds_args deepCopy() {
      return new getLastReadMessageIds_args(this);
    }

    @Override
    public void clear() {
      this.chatId = null;
    }

    public String getChatId() {
      return this.chatId;
    }

    public void setChatId(String chatId) {
      this.chatId = chatId;
    }

    public void unsetChatId() {
      this.chatId = null;
    }

    /** Returns true if field chatId is set (has been assigned a value) and false otherwise */
    public boolean isSetChatId() {
      return this.chatId != null;
    }

    public void setChatIdIsSet(boolean value) {
      if (!value) {
        this.chatId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHAT_ID:
        if (value == null) {
          unsetChatId();
        } else {
          setChatId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHAT_ID:
        return getChatId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHAT_ID:
        return isSetChatId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLastReadMessageIds_args)
        return this.equals((getLastReadMessageIds_args)that);
      return false;
    }

    public boolean equals(getLastReadMessageIds_args that) {
      if (that == null)
        return false;

      boolean this_present_chatId = true && this.isSetChatId();
      boolean that_present_chatId = true && that.isSetChatId();
      if (this_present_chatId || that_present_chatId) {
        if (!(this_present_chatId && that_present_chatId))
          return false;
        if (!this.chatId.equals(that.chatId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_chatId = true && (isSetChatId());
      list.add(present_chatId);
      if (present_chatId)
        list.add(chatId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLastReadMessageIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChatId()).compareTo(other.isSetChatId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChatId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chatId, other.chatId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLastReadMessageIds_args(");
      boolean first = true;

      sb.append("chatId:");
      if (this.chatId == null) {
        sb.append("null");
      } else {
        sb.append(this.chatId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLastReadMessageIds_argsStandardSchemeFactory implements SchemeFactory {
      public getLastReadMessageIds_argsStandardScheme getScheme() {
        return new getLastReadMessageIds_argsStandardScheme();
      }
    }

    private static class getLastReadMessageIds_argsStandardScheme extends StandardScheme<getLastReadMessageIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLastReadMessageIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // CHAT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.chatId = iprot.readString();
                struct.setChatIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLastReadMessageIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.chatId != null) {
          oprot.writeFieldBegin(CHAT_ID_FIELD_DESC);
          oprot.writeString(struct.chatId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLastReadMessageIds_argsTupleSchemeFactory implements SchemeFactory {
      public getLastReadMessageIds_argsTupleScheme getScheme() {
        return new getLastReadMessageIds_argsTupleScheme();
      }
    }

    private static class getLastReadMessageIds_argsTupleScheme extends TupleScheme<getLastReadMessageIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLastReadMessageIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChatId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetChatId()) {
          oprot.writeString(struct.chatId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLastReadMessageIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.chatId = iprot.readString();
          struct.setChatIdIsSet(true);
        }
      }
    }

  }

  public static class getLastReadMessageIds_result implements org.apache.thrift.TBase<getLastReadMessageIds_result, getLastReadMessageIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLastReadMessageIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLastReadMessageIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLastReadMessageIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLastReadMessageIds_resultTupleSchemeFactory());
    }

    private LastReadMessageIds success; // required
    private TalkException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LastReadMessageIds.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLastReadMessageIds_result.class, metaDataMap);
    }

    public getLastReadMessageIds_result() {
    }

    public getLastReadMessageIds_result(
      LastReadMessageIds success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLastReadMessageIds_result(getLastReadMessageIds_result other) {
      if (other.isSetSuccess()) {
        this.success = new LastReadMessageIds(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getLastReadMessageIds_result deepCopy() {
      return new getLastReadMessageIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public LastReadMessageIds getSuccess() {
      return this.success;
    }

    public void setSuccess(LastReadMessageIds success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((LastReadMessageIds)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TalkException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLastReadMessageIds_result)
        return this.equals((getLastReadMessageIds_result)that);
      return false;
    }

    public boolean equals(getLastReadMessageIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLastReadMessageIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLastReadMessageIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLastReadMessageIds_resultStandardSchemeFactory implements SchemeFactory {
      public getLastReadMessageIds_resultStandardScheme getScheme() {
        return new getLastReadMessageIds_resultStandardScheme();
      }
    }

    private static class getLastReadMessageIds_resultStandardScheme extends StandardScheme<getLastReadMessageIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLastReadMessageIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new LastReadMessageIds();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TalkException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLastReadMessageIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLastReadMessageIds_resultTupleSchemeFactory implements SchemeFactory {
      public getLastReadMessageIds_resultTupleScheme getScheme() {
        return new getLastReadMessageIds_resultTupleScheme();
      }
    }

    private static class getLastReadMessageIds_resultTupleScheme extends TupleScheme<getLastReadMessageIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLastReadMessageIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLastReadMessageIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new LastReadMessageIds();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new TalkException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class multiGetLastReadMessageIds_args implements org.apache.thrift.TBase<multiGetLastReadMessageIds_args, multiGetLastReadMessageIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<multiGetLastReadMessageIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multiGetLastReadMessageIds_args");

    private static final org.apache.thrift.protocol.TField CHAT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("chatIds", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multiGetLastReadMessageIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multiGetLastReadMessageIds_argsTupleSchemeFactory());
    }

    private List<String> chatIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHAT_IDS((short)2, "chatIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // CHAT_IDS
            return CHAT_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHAT_IDS, new org.apache.thrift.meta_data.FieldMetaData("chatIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multiGetLastReadMessageIds_args.class, metaDataMap);
    }

    public multiGetLastReadMessageIds_args() {
    }

    public multiGetLastReadMessageIds_args(
      List<String> chatIds)
    {
      this();
      this.chatIds = chatIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiGetLastReadMessageIds_args(multiGetLastReadMessageIds_args other) {
      if (other.isSetChatIds()) {
        List<String> __this__chatIds = new ArrayList<String>(other.chatIds);
        this.chatIds = __this__chatIds;
      }
    }

    public multiGetLastReadMessageIds_args deepCopy() {
      return new multiGetLastReadMessageIds_args(this);
    }

    @Override
    public void clear() {
      this.chatIds = null;
    }

    public int getChatIdsSize() {
      return (this.chatIds == null) ? 0 : this.chatIds.size();
    }

    public java.util.Iterator<String> getChatIdsIterator() {
      return (this.chatIds == null) ? null : this.chatIds.iterator();
    }

    public void addToChatIds(String elem) {
      if (this.chatIds == null) {
        this.chatIds = new ArrayList<String>();
      }
      this.chatIds.add(elem);
    }

    public List<String> getChatIds() {
      return this.chatIds;
    }

    public void setChatIds(List<String> chatIds) {
      this.chatIds = chatIds;
    }

    public void unsetChatIds() {
      this.chatIds = null;
    }

    /** Returns true if field chatIds is set (has been assigned a value) and false otherwise */
    public boolean isSetChatIds() {
      return this.chatIds != null;
    }

    public void setChatIdsIsSet(boolean value) {
      if (!value) {
        this.chatIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHAT_IDS:
        if (value == null) {
          unsetChatIds();
        } else {
          setChatIds((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHAT_IDS:
        return getChatIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHAT_IDS:
        return isSetChatIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiGetLastReadMessageIds_args)
        return this.equals((multiGetLastReadMessageIds_args)that);
      return false;
    }

    public boolean equals(multiGetLastReadMessageIds_args that) {
      if (that == null)
        return false;

      boolean this_present_chatIds = true && this.isSetChatIds();
      boolean that_present_chatIds = true && that.isSetChatIds();
      if (this_present_chatIds || that_present_chatIds) {
        if (!(this_present_chatIds && that_present_chatIds))
          return false;
        if (!this.chatIds.equals(that.chatIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_chatIds = true && (isSetChatIds());
      list.add(present_chatIds);
      if (present_chatIds)
        list.add(chatIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(multiGetLastReadMessageIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChatIds()).compareTo(other.isSetChatIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChatIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chatIds, other.chatIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiGetLastReadMessageIds_args(");
      boolean first = true;

      sb.append("chatIds:");
      if (this.chatIds == null) {
        sb.append("null");
      } else {
        sb.append(this.chatIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multiGetLastReadMessageIds_argsStandardSchemeFactory implements SchemeFactory {
      public multiGetLastReadMessageIds_argsStandardScheme getScheme() {
        return new multiGetLastReadMessageIds_argsStandardScheme();
      }
    }

    private static class multiGetLastReadMessageIds_argsStandardScheme extends StandardScheme<multiGetLastReadMessageIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multiGetLastReadMessageIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // CHAT_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list752 = iprot.readListBegin();
                  struct.chatIds = new ArrayList<String>(_list752.size);
                  String _elem753;
                  for (int _i754 = 0; _i754 < _list752.size; ++_i754)
                  {
                    _elem753 = iprot.readString();
                    struct.chatIds.add(_elem753);
                  }
                  iprot.readListEnd();
                }
                struct.setChatIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multiGetLastReadMessageIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.chatIds != null) {
          oprot.writeFieldBegin(CHAT_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.chatIds.size()));
            for (String _iter755 : struct.chatIds)
            {
              oprot.writeString(_iter755);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multiGetLastReadMessageIds_argsTupleSchemeFactory implements SchemeFactory {
      public multiGetLastReadMessageIds_argsTupleScheme getScheme() {
        return new multiGetLastReadMessageIds_argsTupleScheme();
      }
    }

    private static class multiGetLastReadMessageIds_argsTupleScheme extends TupleScheme<multiGetLastReadMessageIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multiGetLastReadMessageIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChatIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetChatIds()) {
          {
            oprot.writeI32(struct.chatIds.size());
            for (String _iter756 : struct.chatIds)
            {
              oprot.writeString(_iter756);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multiGetLastReadMessageIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list757 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.chatIds = new ArrayList<String>(_list757.size);
            String _elem758;
            for (int _i759 = 0; _i759 < _list757.size; ++_i759)
            {
              _elem758 = iprot.readString();
              struct.chatIds.add(_elem758);
            }
          }
          struct.setChatIdsIsSet(true);
        }
      }
    }

  }

  public static class multiGetLastReadMessageIds_result implements org.apache.thrift.TBase<multiGetLastReadMessageIds_result, multiGetLastReadMessageIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<multiGetLastReadMessageIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multiGetLastReadMessageIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multiGetLastReadMessageIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multiGetLastReadMessageIds_resultTupleSchemeFactory());
    }

    private List<LastReadMessageIds> success; // required
    private TalkException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LastReadMessageIds.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multiGetLastReadMessageIds_result.class, metaDataMap);
    }

    public multiGetLastReadMessageIds_result() {
    }

    public multiGetLastReadMessageIds_result(
      List<LastReadMessageIds> success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiGetLastReadMessageIds_result(multiGetLastReadMessageIds_result other) {
      if (other.isSetSuccess()) {
        List<LastReadMessageIds> __this__success = new ArrayList<LastReadMessageIds>(other.success.size());
        for (LastReadMessageIds other_element : other.success) {
          __this__success.add(new LastReadMessageIds(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public multiGetLastReadMessageIds_result deepCopy() {
      return new multiGetLastReadMessageIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<LastReadMessageIds> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(LastReadMessageIds elem) {
      if (this.success == null) {
        this.success = new ArrayList<LastReadMessageIds>();
      }
      this.success.add(elem);
    }

    public List<LastReadMessageIds> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<LastReadMessageIds> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<LastReadMessageIds>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TalkException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiGetLastReadMessageIds_result)
        return this.equals((multiGetLastReadMessageIds_result)that);
      return false;
    }

    public boolean equals(multiGetLastReadMessageIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(multiGetLastReadMessageIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiGetLastReadMessageIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multiGetLastReadMessageIds_resultStandardSchemeFactory implements SchemeFactory {
      public multiGetLastReadMessageIds_resultStandardScheme getScheme() {
        return new multiGetLastReadMessageIds_resultStandardScheme();
      }
    }

    private static class multiGetLastReadMessageIds_resultStandardScheme extends StandardScheme<multiGetLastReadMessageIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multiGetLastReadMessageIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list760 = iprot.readListBegin();
                  struct.success = new ArrayList<LastReadMessageIds>(_list760.size);
                  LastReadMessageIds _elem761;
                  for (int _i762 = 0; _i762 < _list760.size; ++_i762)
                  {
                    _elem761 = new LastReadMessageIds();
                    _elem761.read(iprot);
                    struct.success.add(_elem761);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TalkException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multiGetLastReadMessageIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (LastReadMessageIds _iter763 : struct.success)
            {
              _iter763.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multiGetLastReadMessageIds_resultTupleSchemeFactory implements SchemeFactory {
      public multiGetLastReadMessageIds_resultTupleScheme getScheme() {
        return new multiGetLastReadMessageIds_resultTupleScheme();
      }
    }

    private static class multiGetLastReadMessageIds_resultTupleScheme extends TupleScheme<multiGetLastReadMessageIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multiGetLastReadMessageIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (LastReadMessageIds _iter764 : struct.success)
            {
              _iter764.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multiGetLastReadMessageIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list765 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<LastReadMessageIds>(_list765.size);
            LastReadMessageIds _elem766;
            for (int _i767 = 0; _i767 < _list765.size; ++_i767)
            {
              _elem766 = new LastReadMessageIds();
              _elem766.read(iprot);
              struct.success.add(_elem766);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new TalkException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

}
