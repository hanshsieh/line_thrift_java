/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package line.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-04-08")
public class ProductSimpleList implements org.apache.thrift.TBase<ProductSimpleList, ProductSimpleList._Fields>, java.io.Serializable, Cloneable, Comparable<ProductSimpleList> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProductSimpleList");

  private static final org.apache.thrift.protocol.TField HAS_NEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("hasNext", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField REINVOKE_HOUR_FIELD_DESC = new org.apache.thrift.protocol.TField("reinvokeHour", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_VERSION_SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("lastVersionSeq", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField PRODUCT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("productList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField RECENT_NEW_RELEASE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("recentNewReleaseDate", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField RECENT_EVENT_RELEASE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("recentEventReleaseDate", org.apache.thrift.protocol.TType.I64, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProductSimpleListStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProductSimpleListTupleSchemeFactory());
  }

  private boolean hasNext; // required
  private int reinvokeHour; // required
  private long lastVersionSeq; // required
  private List<ProductSimple> productList; // required
  private long recentNewReleaseDate; // required
  private long recentEventReleaseDate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HAS_NEXT((short)1, "hasNext"),
    REINVOKE_HOUR((short)2, "reinvokeHour"),
    LAST_VERSION_SEQ((short)3, "lastVersionSeq"),
    PRODUCT_LIST((short)4, "productList"),
    RECENT_NEW_RELEASE_DATE((short)5, "recentNewReleaseDate"),
    RECENT_EVENT_RELEASE_DATE((short)6, "recentEventReleaseDate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HAS_NEXT
          return HAS_NEXT;
        case 2: // REINVOKE_HOUR
          return REINVOKE_HOUR;
        case 3: // LAST_VERSION_SEQ
          return LAST_VERSION_SEQ;
        case 4: // PRODUCT_LIST
          return PRODUCT_LIST;
        case 5: // RECENT_NEW_RELEASE_DATE
          return RECENT_NEW_RELEASE_DATE;
        case 6: // RECENT_EVENT_RELEASE_DATE
          return RECENT_EVENT_RELEASE_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HASNEXT_ISSET_ID = 0;
  private static final int __REINVOKEHOUR_ISSET_ID = 1;
  private static final int __LASTVERSIONSEQ_ISSET_ID = 2;
  private static final int __RECENTNEWRELEASEDATE_ISSET_ID = 3;
  private static final int __RECENTEVENTRELEASEDATE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HAS_NEXT, new org.apache.thrift.meta_data.FieldMetaData("hasNext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REINVOKE_HOUR, new org.apache.thrift.meta_data.FieldMetaData("reinvokeHour", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_VERSION_SEQ, new org.apache.thrift.meta_data.FieldMetaData("lastVersionSeq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRODUCT_LIST, new org.apache.thrift.meta_data.FieldMetaData("productList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductSimple.class))));
    tmpMap.put(_Fields.RECENT_NEW_RELEASE_DATE, new org.apache.thrift.meta_data.FieldMetaData("recentNewReleaseDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RECENT_EVENT_RELEASE_DATE, new org.apache.thrift.meta_data.FieldMetaData("recentEventReleaseDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProductSimpleList.class, metaDataMap);
  }

  public ProductSimpleList() {
  }

  public ProductSimpleList(
    boolean hasNext,
    int reinvokeHour,
    long lastVersionSeq,
    List<ProductSimple> productList,
    long recentNewReleaseDate,
    long recentEventReleaseDate)
  {
    this();
    this.hasNext = hasNext;
    setHasNextIsSet(true);
    this.reinvokeHour = reinvokeHour;
    setReinvokeHourIsSet(true);
    this.lastVersionSeq = lastVersionSeq;
    setLastVersionSeqIsSet(true);
    this.productList = productList;
    this.recentNewReleaseDate = recentNewReleaseDate;
    setRecentNewReleaseDateIsSet(true);
    this.recentEventReleaseDate = recentEventReleaseDate;
    setRecentEventReleaseDateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductSimpleList(ProductSimpleList other) {
    __isset_bitfield = other.__isset_bitfield;
    this.hasNext = other.hasNext;
    this.reinvokeHour = other.reinvokeHour;
    this.lastVersionSeq = other.lastVersionSeq;
    if (other.isSetProductList()) {
      List<ProductSimple> __this__productList = new ArrayList<ProductSimple>(other.productList.size());
      for (ProductSimple other_element : other.productList) {
        __this__productList.add(new ProductSimple(other_element));
      }
      this.productList = __this__productList;
    }
    this.recentNewReleaseDate = other.recentNewReleaseDate;
    this.recentEventReleaseDate = other.recentEventReleaseDate;
  }

  public ProductSimpleList deepCopy() {
    return new ProductSimpleList(this);
  }

  @Override
  public void clear() {
    setHasNextIsSet(false);
    this.hasNext = false;
    setReinvokeHourIsSet(false);
    this.reinvokeHour = 0;
    setLastVersionSeqIsSet(false);
    this.lastVersionSeq = 0;
    this.productList = null;
    setRecentNewReleaseDateIsSet(false);
    this.recentNewReleaseDate = 0;
    setRecentEventReleaseDateIsSet(false);
    this.recentEventReleaseDate = 0;
  }

  public boolean isHasNext() {
    return this.hasNext;
  }

  public void setHasNext(boolean hasNext) {
    this.hasNext = hasNext;
    setHasNextIsSet(true);
  }

  public void unsetHasNext() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASNEXT_ISSET_ID);
  }

  /** Returns true if field hasNext is set (has been assigned a value) and false otherwise */
  public boolean isSetHasNext() {
    return EncodingUtils.testBit(__isset_bitfield, __HASNEXT_ISSET_ID);
  }

  public void setHasNextIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASNEXT_ISSET_ID, value);
  }

  public int getReinvokeHour() {
    return this.reinvokeHour;
  }

  public void setReinvokeHour(int reinvokeHour) {
    this.reinvokeHour = reinvokeHour;
    setReinvokeHourIsSet(true);
  }

  public void unsetReinvokeHour() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REINVOKEHOUR_ISSET_ID);
  }

  /** Returns true if field reinvokeHour is set (has been assigned a value) and false otherwise */
  public boolean isSetReinvokeHour() {
    return EncodingUtils.testBit(__isset_bitfield, __REINVOKEHOUR_ISSET_ID);
  }

  public void setReinvokeHourIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REINVOKEHOUR_ISSET_ID, value);
  }

  public long getLastVersionSeq() {
    return this.lastVersionSeq;
  }

  public void setLastVersionSeq(long lastVersionSeq) {
    this.lastVersionSeq = lastVersionSeq;
    setLastVersionSeqIsSet(true);
  }

  public void unsetLastVersionSeq() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTVERSIONSEQ_ISSET_ID);
  }

  /** Returns true if field lastVersionSeq is set (has been assigned a value) and false otherwise */
  public boolean isSetLastVersionSeq() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTVERSIONSEQ_ISSET_ID);
  }

  public void setLastVersionSeqIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTVERSIONSEQ_ISSET_ID, value);
  }

  public int getProductListSize() {
    return (this.productList == null) ? 0 : this.productList.size();
  }

  public java.util.Iterator<ProductSimple> getProductListIterator() {
    return (this.productList == null) ? null : this.productList.iterator();
  }

  public void addToProductList(ProductSimple elem) {
    if (this.productList == null) {
      this.productList = new ArrayList<ProductSimple>();
    }
    this.productList.add(elem);
  }

  public List<ProductSimple> getProductList() {
    return this.productList;
  }

  public void setProductList(List<ProductSimple> productList) {
    this.productList = productList;
  }

  public void unsetProductList() {
    this.productList = null;
  }

  /** Returns true if field productList is set (has been assigned a value) and false otherwise */
  public boolean isSetProductList() {
    return this.productList != null;
  }

  public void setProductListIsSet(boolean value) {
    if (!value) {
      this.productList = null;
    }
  }

  public long getRecentNewReleaseDate() {
    return this.recentNewReleaseDate;
  }

  public void setRecentNewReleaseDate(long recentNewReleaseDate) {
    this.recentNewReleaseDate = recentNewReleaseDate;
    setRecentNewReleaseDateIsSet(true);
  }

  public void unsetRecentNewReleaseDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECENTNEWRELEASEDATE_ISSET_ID);
  }

  /** Returns true if field recentNewReleaseDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRecentNewReleaseDate() {
    return EncodingUtils.testBit(__isset_bitfield, __RECENTNEWRELEASEDATE_ISSET_ID);
  }

  public void setRecentNewReleaseDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECENTNEWRELEASEDATE_ISSET_ID, value);
  }

  public long getRecentEventReleaseDate() {
    return this.recentEventReleaseDate;
  }

  public void setRecentEventReleaseDate(long recentEventReleaseDate) {
    this.recentEventReleaseDate = recentEventReleaseDate;
    setRecentEventReleaseDateIsSet(true);
  }

  public void unsetRecentEventReleaseDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECENTEVENTRELEASEDATE_ISSET_ID);
  }

  /** Returns true if field recentEventReleaseDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRecentEventReleaseDate() {
    return EncodingUtils.testBit(__isset_bitfield, __RECENTEVENTRELEASEDATE_ISSET_ID);
  }

  public void setRecentEventReleaseDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECENTEVENTRELEASEDATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HAS_NEXT:
      if (value == null) {
        unsetHasNext();
      } else {
        setHasNext((Boolean)value);
      }
      break;

    case REINVOKE_HOUR:
      if (value == null) {
        unsetReinvokeHour();
      } else {
        setReinvokeHour((Integer)value);
      }
      break;

    case LAST_VERSION_SEQ:
      if (value == null) {
        unsetLastVersionSeq();
      } else {
        setLastVersionSeq((Long)value);
      }
      break;

    case PRODUCT_LIST:
      if (value == null) {
        unsetProductList();
      } else {
        setProductList((List<ProductSimple>)value);
      }
      break;

    case RECENT_NEW_RELEASE_DATE:
      if (value == null) {
        unsetRecentNewReleaseDate();
      } else {
        setRecentNewReleaseDate((Long)value);
      }
      break;

    case RECENT_EVENT_RELEASE_DATE:
      if (value == null) {
        unsetRecentEventReleaseDate();
      } else {
        setRecentEventReleaseDate((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HAS_NEXT:
      return isHasNext();

    case REINVOKE_HOUR:
      return getReinvokeHour();

    case LAST_VERSION_SEQ:
      return getLastVersionSeq();

    case PRODUCT_LIST:
      return getProductList();

    case RECENT_NEW_RELEASE_DATE:
      return getRecentNewReleaseDate();

    case RECENT_EVENT_RELEASE_DATE:
      return getRecentEventReleaseDate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HAS_NEXT:
      return isSetHasNext();
    case REINVOKE_HOUR:
      return isSetReinvokeHour();
    case LAST_VERSION_SEQ:
      return isSetLastVersionSeq();
    case PRODUCT_LIST:
      return isSetProductList();
    case RECENT_NEW_RELEASE_DATE:
      return isSetRecentNewReleaseDate();
    case RECENT_EVENT_RELEASE_DATE:
      return isSetRecentEventReleaseDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductSimpleList)
      return this.equals((ProductSimpleList)that);
    return false;
  }

  public boolean equals(ProductSimpleList that) {
    if (that == null)
      return false;

    boolean this_present_hasNext = true;
    boolean that_present_hasNext = true;
    if (this_present_hasNext || that_present_hasNext) {
      if (!(this_present_hasNext && that_present_hasNext))
        return false;
      if (this.hasNext != that.hasNext)
        return false;
    }

    boolean this_present_reinvokeHour = true;
    boolean that_present_reinvokeHour = true;
    if (this_present_reinvokeHour || that_present_reinvokeHour) {
      if (!(this_present_reinvokeHour && that_present_reinvokeHour))
        return false;
      if (this.reinvokeHour != that.reinvokeHour)
        return false;
    }

    boolean this_present_lastVersionSeq = true;
    boolean that_present_lastVersionSeq = true;
    if (this_present_lastVersionSeq || that_present_lastVersionSeq) {
      if (!(this_present_lastVersionSeq && that_present_lastVersionSeq))
        return false;
      if (this.lastVersionSeq != that.lastVersionSeq)
        return false;
    }

    boolean this_present_productList = true && this.isSetProductList();
    boolean that_present_productList = true && that.isSetProductList();
    if (this_present_productList || that_present_productList) {
      if (!(this_present_productList && that_present_productList))
        return false;
      if (!this.productList.equals(that.productList))
        return false;
    }

    boolean this_present_recentNewReleaseDate = true;
    boolean that_present_recentNewReleaseDate = true;
    if (this_present_recentNewReleaseDate || that_present_recentNewReleaseDate) {
      if (!(this_present_recentNewReleaseDate && that_present_recentNewReleaseDate))
        return false;
      if (this.recentNewReleaseDate != that.recentNewReleaseDate)
        return false;
    }

    boolean this_present_recentEventReleaseDate = true;
    boolean that_present_recentEventReleaseDate = true;
    if (this_present_recentEventReleaseDate || that_present_recentEventReleaseDate) {
      if (!(this_present_recentEventReleaseDate && that_present_recentEventReleaseDate))
        return false;
      if (this.recentEventReleaseDate != that.recentEventReleaseDate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_hasNext = true;
    list.add(present_hasNext);
    if (present_hasNext)
      list.add(hasNext);

    boolean present_reinvokeHour = true;
    list.add(present_reinvokeHour);
    if (present_reinvokeHour)
      list.add(reinvokeHour);

    boolean present_lastVersionSeq = true;
    list.add(present_lastVersionSeq);
    if (present_lastVersionSeq)
      list.add(lastVersionSeq);

    boolean present_productList = true && (isSetProductList());
    list.add(present_productList);
    if (present_productList)
      list.add(productList);

    boolean present_recentNewReleaseDate = true;
    list.add(present_recentNewReleaseDate);
    if (present_recentNewReleaseDate)
      list.add(recentNewReleaseDate);

    boolean present_recentEventReleaseDate = true;
    list.add(present_recentEventReleaseDate);
    if (present_recentEventReleaseDate)
      list.add(recentEventReleaseDate);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProductSimpleList other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHasNext()).compareTo(other.isSetHasNext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasNext()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasNext, other.hasNext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReinvokeHour()).compareTo(other.isSetReinvokeHour());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReinvokeHour()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reinvokeHour, other.reinvokeHour);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastVersionSeq()).compareTo(other.isSetLastVersionSeq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastVersionSeq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastVersionSeq, other.lastVersionSeq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductList()).compareTo(other.isSetProductList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productList, other.productList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecentNewReleaseDate()).compareTo(other.isSetRecentNewReleaseDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecentNewReleaseDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recentNewReleaseDate, other.recentNewReleaseDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecentEventReleaseDate()).compareTo(other.isSetRecentEventReleaseDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecentEventReleaseDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recentEventReleaseDate, other.recentEventReleaseDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProductSimpleList(");
    boolean first = true;

    sb.append("hasNext:");
    sb.append(this.hasNext);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reinvokeHour:");
    sb.append(this.reinvokeHour);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastVersionSeq:");
    sb.append(this.lastVersionSeq);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productList:");
    if (this.productList == null) {
      sb.append("null");
    } else {
      sb.append(this.productList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recentNewReleaseDate:");
    sb.append(this.recentNewReleaseDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recentEventReleaseDate:");
    sb.append(this.recentEventReleaseDate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProductSimpleListStandardSchemeFactory implements SchemeFactory {
    public ProductSimpleListStandardScheme getScheme() {
      return new ProductSimpleListStandardScheme();
    }
  }

  private static class ProductSimpleListStandardScheme extends StandardScheme<ProductSimpleList> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProductSimpleList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HAS_NEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasNext = iprot.readBool();
              struct.setHasNextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REINVOKE_HOUR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reinvokeHour = iprot.readI32();
              struct.setReinvokeHourIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_VERSION_SEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastVersionSeq = iprot.readI64();
              struct.setLastVersionSeqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRODUCT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list256 = iprot.readListBegin();
                struct.productList = new ArrayList<ProductSimple>(_list256.size);
                ProductSimple _elem257;
                for (int _i258 = 0; _i258 < _list256.size; ++_i258)
                {
                  _elem257 = new ProductSimple();
                  _elem257.read(iprot);
                  struct.productList.add(_elem257);
                }
                iprot.readListEnd();
              }
              struct.setProductListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RECENT_NEW_RELEASE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.recentNewReleaseDate = iprot.readI64();
              struct.setRecentNewReleaseDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RECENT_EVENT_RELEASE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.recentEventReleaseDate = iprot.readI64();
              struct.setRecentEventReleaseDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProductSimpleList struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(HAS_NEXT_FIELD_DESC);
      oprot.writeBool(struct.hasNext);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REINVOKE_HOUR_FIELD_DESC);
      oprot.writeI32(struct.reinvokeHour);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_VERSION_SEQ_FIELD_DESC);
      oprot.writeI64(struct.lastVersionSeq);
      oprot.writeFieldEnd();
      if (struct.productList != null) {
        oprot.writeFieldBegin(PRODUCT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.productList.size()));
          for (ProductSimple _iter259 : struct.productList)
          {
            _iter259.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RECENT_NEW_RELEASE_DATE_FIELD_DESC);
      oprot.writeI64(struct.recentNewReleaseDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECENT_EVENT_RELEASE_DATE_FIELD_DESC);
      oprot.writeI64(struct.recentEventReleaseDate);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProductSimpleListTupleSchemeFactory implements SchemeFactory {
    public ProductSimpleListTupleScheme getScheme() {
      return new ProductSimpleListTupleScheme();
    }
  }

  private static class ProductSimpleListTupleScheme extends TupleScheme<ProductSimpleList> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProductSimpleList struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHasNext()) {
        optionals.set(0);
      }
      if (struct.isSetReinvokeHour()) {
        optionals.set(1);
      }
      if (struct.isSetLastVersionSeq()) {
        optionals.set(2);
      }
      if (struct.isSetProductList()) {
        optionals.set(3);
      }
      if (struct.isSetRecentNewReleaseDate()) {
        optionals.set(4);
      }
      if (struct.isSetRecentEventReleaseDate()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetHasNext()) {
        oprot.writeBool(struct.hasNext);
      }
      if (struct.isSetReinvokeHour()) {
        oprot.writeI32(struct.reinvokeHour);
      }
      if (struct.isSetLastVersionSeq()) {
        oprot.writeI64(struct.lastVersionSeq);
      }
      if (struct.isSetProductList()) {
        {
          oprot.writeI32(struct.productList.size());
          for (ProductSimple _iter260 : struct.productList)
          {
            _iter260.write(oprot);
          }
        }
      }
      if (struct.isSetRecentNewReleaseDate()) {
        oprot.writeI64(struct.recentNewReleaseDate);
      }
      if (struct.isSetRecentEventReleaseDate()) {
        oprot.writeI64(struct.recentEventReleaseDate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProductSimpleList struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.hasNext = iprot.readBool();
        struct.setHasNextIsSet(true);
      }
      if (incoming.get(1)) {
        struct.reinvokeHour = iprot.readI32();
        struct.setReinvokeHourIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lastVersionSeq = iprot.readI64();
        struct.setLastVersionSeqIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list261 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.productList = new ArrayList<ProductSimple>(_list261.size);
          ProductSimple _elem262;
          for (int _i263 = 0; _i263 < _list261.size; ++_i263)
          {
            _elem262 = new ProductSimple();
            _elem262.read(iprot);
            struct.productList.add(_elem262);
          }
        }
        struct.setProductListIsSet(true);
      }
      if (incoming.get(4)) {
        struct.recentNewReleaseDate = iprot.readI64();
        struct.setRecentNewReleaseDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.recentEventReleaseDate = iprot.readI64();
        struct.setRecentEventReleaseDateIsSet(true);
      }
    }
  }

}

