/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.linecorp.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-04-08")
public class Settings implements org.apache.thrift.TBase<Settings, Settings._Fields>, java.io.Serializable, Cloneable, Comparable<Settings> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Settings");

  private static final org.apache.thrift.protocol.TField NOTIFICATION_ENABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("notificationEnable", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField NOTIFICATION_MUTE_EXPIRATION_FIELD_DESC = new org.apache.thrift.protocol.TField("notificationMuteExpiration", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField NOTIFICATION_NEW_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("notificationNewMessage", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField NOTIFICATION_GROUP_INVITATION_FIELD_DESC = new org.apache.thrift.protocol.TField("notificationGroupInvitation", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField NOTIFICATION_SHOW_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("notificationShowMessage", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField NOTIFICATION_INCOMING_CALL_FIELD_DESC = new org.apache.thrift.protocol.TField("notificationIncomingCall", org.apache.thrift.protocol.TType.BOOL, (short)15);
  private static final org.apache.thrift.protocol.TField NOTIFICATION_SOUND_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("notificationSoundMessage", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField NOTIFICATION_SOUND_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("notificationSoundGroup", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField NOTIFICATION_DISABLED_WITH_SUB_FIELD_DESC = new org.apache.thrift.protocol.TField("notificationDisabledWithSub", org.apache.thrift.protocol.TType.BOOL, (short)18);
  private static final org.apache.thrift.protocol.TField PRIVACY_SYNC_CONTACTS_FIELD_DESC = new org.apache.thrift.protocol.TField("privacySyncContacts", org.apache.thrift.protocol.TType.BOOL, (short)20);
  private static final org.apache.thrift.protocol.TField PRIVACY_SEARCH_BY_PHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("privacySearchByPhoneNumber", org.apache.thrift.protocol.TType.BOOL, (short)21);
  private static final org.apache.thrift.protocol.TField PRIVACY_SEARCH_BY_USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("privacySearchByUserid", org.apache.thrift.protocol.TType.BOOL, (short)22);
  private static final org.apache.thrift.protocol.TField PRIVACY_SEARCH_BY_EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("privacySearchByEmail", org.apache.thrift.protocol.TType.BOOL, (short)23);
  private static final org.apache.thrift.protocol.TField PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("privacyAllowSecondaryDeviceLogin", org.apache.thrift.protocol.TType.BOOL, (short)24);
  private static final org.apache.thrift.protocol.TField PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME_FIELD_DESC = new org.apache.thrift.protocol.TField("privacyProfileImagePostToMyhome", org.apache.thrift.protocol.TType.BOOL, (short)25);
  private static final org.apache.thrift.protocol.TField PRIVACY_RECEIVE_MESSAGES_FROM_NOT_FRIEND_FIELD_DESC = new org.apache.thrift.protocol.TField("privacyReceiveMessagesFromNotFriend", org.apache.thrift.protocol.TType.BOOL, (short)26);
  private static final org.apache.thrift.protocol.TField CONTACT_MY_TICKET_FIELD_DESC = new org.apache.thrift.protocol.TField("contactMyTicket", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField IDENTITY_PROVIDER_FIELD_DESC = new org.apache.thrift.protocol.TField("identityProvider", org.apache.thrift.protocol.TType.I32, (short)40);
  private static final org.apache.thrift.protocol.TField IDENTITY_IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("identityIdentifier", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField SNS_ACCOUNTS_FIELD_DESC = new org.apache.thrift.protocol.TField("snsAccounts", org.apache.thrift.protocol.TType.MAP, (short)42);
  private static final org.apache.thrift.protocol.TField PHONE_REGISTRATION_FIELD_DESC = new org.apache.thrift.protocol.TField("phoneRegistration", org.apache.thrift.protocol.TType.BOOL, (short)43);
  private static final org.apache.thrift.protocol.TField EMAIL_CONFIRMATION_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("emailConfirmationStatus", org.apache.thrift.protocol.TType.I32, (short)44);
  private static final org.apache.thrift.protocol.TField PREFERENCE_LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("preferenceLocale", org.apache.thrift.protocol.TType.STRING, (short)50);
  private static final org.apache.thrift.protocol.TField CUSTOM_MODES_FIELD_DESC = new org.apache.thrift.protocol.TField("customModes", org.apache.thrift.protocol.TType.MAP, (short)60);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SettingsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SettingsTupleSchemeFactory());
  }

  private boolean notificationEnable; // required
  private long notificationMuteExpiration; // required
  private boolean notificationNewMessage; // required
  private boolean notificationGroupInvitation; // required
  private boolean notificationShowMessage; // required
  private boolean notificationIncomingCall; // required
  private String notificationSoundMessage; // required
  private String notificationSoundGroup; // required
  private boolean notificationDisabledWithSub; // required
  private boolean privacySyncContacts; // required
  private boolean privacySearchByPhoneNumber; // required
  private boolean privacySearchByUserid; // required
  private boolean privacySearchByEmail; // required
  private boolean privacyAllowSecondaryDeviceLogin; // required
  private boolean privacyProfileImagePostToMyhome; // required
  private boolean privacyReceiveMessagesFromNotFriend; // required
  private String contactMyTicket; // required
  private IdentityProvider identityProvider; // required
  private String identityIdentifier; // required
  private Map<SnsIdType,String> snsAccounts; // required
  private boolean phoneRegistration; // required
  private EmailConfirmationStatus emailConfirmationStatus; // required
  private String preferenceLocale; // required
  private Map<CustomMode,String> customModes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NOTIFICATION_ENABLE((short)10, "notificationEnable"),
    NOTIFICATION_MUTE_EXPIRATION((short)11, "notificationMuteExpiration"),
    NOTIFICATION_NEW_MESSAGE((short)12, "notificationNewMessage"),
    NOTIFICATION_GROUP_INVITATION((short)13, "notificationGroupInvitation"),
    NOTIFICATION_SHOW_MESSAGE((short)14, "notificationShowMessage"),
    NOTIFICATION_INCOMING_CALL((short)15, "notificationIncomingCall"),
    NOTIFICATION_SOUND_MESSAGE((short)16, "notificationSoundMessage"),
    NOTIFICATION_SOUND_GROUP((short)17, "notificationSoundGroup"),
    NOTIFICATION_DISABLED_WITH_SUB((short)18, "notificationDisabledWithSub"),
    PRIVACY_SYNC_CONTACTS((short)20, "privacySyncContacts"),
    PRIVACY_SEARCH_BY_PHONE_NUMBER((short)21, "privacySearchByPhoneNumber"),
    PRIVACY_SEARCH_BY_USERID((short)22, "privacySearchByUserid"),
    PRIVACY_SEARCH_BY_EMAIL((short)23, "privacySearchByEmail"),
    PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN((short)24, "privacyAllowSecondaryDeviceLogin"),
    PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME((short)25, "privacyProfileImagePostToMyhome"),
    PRIVACY_RECEIVE_MESSAGES_FROM_NOT_FRIEND((short)26, "privacyReceiveMessagesFromNotFriend"),
    CONTACT_MY_TICKET((short)30, "contactMyTicket"),
    /**
     * 
     * @see IdentityProvider
     */
    IDENTITY_PROVIDER((short)40, "identityProvider"),
    IDENTITY_IDENTIFIER((short)41, "identityIdentifier"),
    SNS_ACCOUNTS((short)42, "snsAccounts"),
    PHONE_REGISTRATION((short)43, "phoneRegistration"),
    /**
     * 
     * @see EmailConfirmationStatus
     */
    EMAIL_CONFIRMATION_STATUS((short)44, "emailConfirmationStatus"),
    PREFERENCE_LOCALE((short)50, "preferenceLocale"),
    CUSTOM_MODES((short)60, "customModes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 10: // NOTIFICATION_ENABLE
          return NOTIFICATION_ENABLE;
        case 11: // NOTIFICATION_MUTE_EXPIRATION
          return NOTIFICATION_MUTE_EXPIRATION;
        case 12: // NOTIFICATION_NEW_MESSAGE
          return NOTIFICATION_NEW_MESSAGE;
        case 13: // NOTIFICATION_GROUP_INVITATION
          return NOTIFICATION_GROUP_INVITATION;
        case 14: // NOTIFICATION_SHOW_MESSAGE
          return NOTIFICATION_SHOW_MESSAGE;
        case 15: // NOTIFICATION_INCOMING_CALL
          return NOTIFICATION_INCOMING_CALL;
        case 16: // NOTIFICATION_SOUND_MESSAGE
          return NOTIFICATION_SOUND_MESSAGE;
        case 17: // NOTIFICATION_SOUND_GROUP
          return NOTIFICATION_SOUND_GROUP;
        case 18: // NOTIFICATION_DISABLED_WITH_SUB
          return NOTIFICATION_DISABLED_WITH_SUB;
        case 20: // PRIVACY_SYNC_CONTACTS
          return PRIVACY_SYNC_CONTACTS;
        case 21: // PRIVACY_SEARCH_BY_PHONE_NUMBER
          return PRIVACY_SEARCH_BY_PHONE_NUMBER;
        case 22: // PRIVACY_SEARCH_BY_USERID
          return PRIVACY_SEARCH_BY_USERID;
        case 23: // PRIVACY_SEARCH_BY_EMAIL
          return PRIVACY_SEARCH_BY_EMAIL;
        case 24: // PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN
          return PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN;
        case 25: // PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME
          return PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME;
        case 26: // PRIVACY_RECEIVE_MESSAGES_FROM_NOT_FRIEND
          return PRIVACY_RECEIVE_MESSAGES_FROM_NOT_FRIEND;
        case 30: // CONTACT_MY_TICKET
          return CONTACT_MY_TICKET;
        case 40: // IDENTITY_PROVIDER
          return IDENTITY_PROVIDER;
        case 41: // IDENTITY_IDENTIFIER
          return IDENTITY_IDENTIFIER;
        case 42: // SNS_ACCOUNTS
          return SNS_ACCOUNTS;
        case 43: // PHONE_REGISTRATION
          return PHONE_REGISTRATION;
        case 44: // EMAIL_CONFIRMATION_STATUS
          return EMAIL_CONFIRMATION_STATUS;
        case 50: // PREFERENCE_LOCALE
          return PREFERENCE_LOCALE;
        case 60: // CUSTOM_MODES
          return CUSTOM_MODES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NOTIFICATIONENABLE_ISSET_ID = 0;
  private static final int __NOTIFICATIONMUTEEXPIRATION_ISSET_ID = 1;
  private static final int __NOTIFICATIONNEWMESSAGE_ISSET_ID = 2;
  private static final int __NOTIFICATIONGROUPINVITATION_ISSET_ID = 3;
  private static final int __NOTIFICATIONSHOWMESSAGE_ISSET_ID = 4;
  private static final int __NOTIFICATIONINCOMINGCALL_ISSET_ID = 5;
  private static final int __NOTIFICATIONDISABLEDWITHSUB_ISSET_ID = 6;
  private static final int __PRIVACYSYNCCONTACTS_ISSET_ID = 7;
  private static final int __PRIVACYSEARCHBYPHONENUMBER_ISSET_ID = 8;
  private static final int __PRIVACYSEARCHBYUSERID_ISSET_ID = 9;
  private static final int __PRIVACYSEARCHBYEMAIL_ISSET_ID = 10;
  private static final int __PRIVACYALLOWSECONDARYDEVICELOGIN_ISSET_ID = 11;
  private static final int __PRIVACYPROFILEIMAGEPOSTTOMYHOME_ISSET_ID = 12;
  private static final int __PRIVACYRECEIVEMESSAGESFROMNOTFRIEND_ISSET_ID = 13;
  private static final int __PHONEREGISTRATION_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NOTIFICATION_ENABLE, new org.apache.thrift.meta_data.FieldMetaData("notificationEnable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NOTIFICATION_MUTE_EXPIRATION, new org.apache.thrift.meta_data.FieldMetaData("notificationMuteExpiration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NOTIFICATION_NEW_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("notificationNewMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NOTIFICATION_GROUP_INVITATION, new org.apache.thrift.meta_data.FieldMetaData("notificationGroupInvitation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NOTIFICATION_SHOW_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("notificationShowMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NOTIFICATION_INCOMING_CALL, new org.apache.thrift.meta_data.FieldMetaData("notificationIncomingCall", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NOTIFICATION_SOUND_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("notificationSoundMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTIFICATION_SOUND_GROUP, new org.apache.thrift.meta_data.FieldMetaData("notificationSoundGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTIFICATION_DISABLED_WITH_SUB, new org.apache.thrift.meta_data.FieldMetaData("notificationDisabledWithSub", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PRIVACY_SYNC_CONTACTS, new org.apache.thrift.meta_data.FieldMetaData("privacySyncContacts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PRIVACY_SEARCH_BY_PHONE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("privacySearchByPhoneNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PRIVACY_SEARCH_BY_USERID, new org.apache.thrift.meta_data.FieldMetaData("privacySearchByUserid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PRIVACY_SEARCH_BY_EMAIL, new org.apache.thrift.meta_data.FieldMetaData("privacySearchByEmail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN, new org.apache.thrift.meta_data.FieldMetaData("privacyAllowSecondaryDeviceLogin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME, new org.apache.thrift.meta_data.FieldMetaData("privacyProfileImagePostToMyhome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PRIVACY_RECEIVE_MESSAGES_FROM_NOT_FRIEND, new org.apache.thrift.meta_data.FieldMetaData("privacyReceiveMessagesFromNotFriend", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CONTACT_MY_TICKET, new org.apache.thrift.meta_data.FieldMetaData("contactMyTicket", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDENTITY_PROVIDER, new org.apache.thrift.meta_data.FieldMetaData("identityProvider", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, IdentityProvider.class)));
    tmpMap.put(_Fields.IDENTITY_IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("identityIdentifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SNS_ACCOUNTS, new org.apache.thrift.meta_data.FieldMetaData("snsAccounts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SnsIdType.class), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PHONE_REGISTRATION, new org.apache.thrift.meta_data.FieldMetaData("phoneRegistration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EMAIL_CONFIRMATION_STATUS, new org.apache.thrift.meta_data.FieldMetaData("emailConfirmationStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EmailConfirmationStatus.class)));
    tmpMap.put(_Fields.PREFERENCE_LOCALE, new org.apache.thrift.meta_data.FieldMetaData("preferenceLocale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUSTOM_MODES, new org.apache.thrift.meta_data.FieldMetaData("customModes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CustomMode.class), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Settings.class, metaDataMap);
  }

  public Settings() {
  }

  public Settings(
    boolean notificationEnable,
    long notificationMuteExpiration,
    boolean notificationNewMessage,
    boolean notificationGroupInvitation,
    boolean notificationShowMessage,
    boolean notificationIncomingCall,
    String notificationSoundMessage,
    String notificationSoundGroup,
    boolean notificationDisabledWithSub,
    boolean privacySyncContacts,
    boolean privacySearchByPhoneNumber,
    boolean privacySearchByUserid,
    boolean privacySearchByEmail,
    boolean privacyAllowSecondaryDeviceLogin,
    boolean privacyProfileImagePostToMyhome,
    boolean privacyReceiveMessagesFromNotFriend,
    String contactMyTicket,
    IdentityProvider identityProvider,
    String identityIdentifier,
    Map<SnsIdType,String> snsAccounts,
    boolean phoneRegistration,
    EmailConfirmationStatus emailConfirmationStatus,
    String preferenceLocale,
    Map<CustomMode,String> customModes)
  {
    this();
    this.notificationEnable = notificationEnable;
    setNotificationEnableIsSet(true);
    this.notificationMuteExpiration = notificationMuteExpiration;
    setNotificationMuteExpirationIsSet(true);
    this.notificationNewMessage = notificationNewMessage;
    setNotificationNewMessageIsSet(true);
    this.notificationGroupInvitation = notificationGroupInvitation;
    setNotificationGroupInvitationIsSet(true);
    this.notificationShowMessage = notificationShowMessage;
    setNotificationShowMessageIsSet(true);
    this.notificationIncomingCall = notificationIncomingCall;
    setNotificationIncomingCallIsSet(true);
    this.notificationSoundMessage = notificationSoundMessage;
    this.notificationSoundGroup = notificationSoundGroup;
    this.notificationDisabledWithSub = notificationDisabledWithSub;
    setNotificationDisabledWithSubIsSet(true);
    this.privacySyncContacts = privacySyncContacts;
    setPrivacySyncContactsIsSet(true);
    this.privacySearchByPhoneNumber = privacySearchByPhoneNumber;
    setPrivacySearchByPhoneNumberIsSet(true);
    this.privacySearchByUserid = privacySearchByUserid;
    setPrivacySearchByUseridIsSet(true);
    this.privacySearchByEmail = privacySearchByEmail;
    setPrivacySearchByEmailIsSet(true);
    this.privacyAllowSecondaryDeviceLogin = privacyAllowSecondaryDeviceLogin;
    setPrivacyAllowSecondaryDeviceLoginIsSet(true);
    this.privacyProfileImagePostToMyhome = privacyProfileImagePostToMyhome;
    setPrivacyProfileImagePostToMyhomeIsSet(true);
    this.privacyReceiveMessagesFromNotFriend = privacyReceiveMessagesFromNotFriend;
    setPrivacyReceiveMessagesFromNotFriendIsSet(true);
    this.contactMyTicket = contactMyTicket;
    this.identityProvider = identityProvider;
    this.identityIdentifier = identityIdentifier;
    this.snsAccounts = snsAccounts;
    this.phoneRegistration = phoneRegistration;
    setPhoneRegistrationIsSet(true);
    this.emailConfirmationStatus = emailConfirmationStatus;
    this.preferenceLocale = preferenceLocale;
    this.customModes = customModes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Settings(Settings other) {
    __isset_bitfield = other.__isset_bitfield;
    this.notificationEnable = other.notificationEnable;
    this.notificationMuteExpiration = other.notificationMuteExpiration;
    this.notificationNewMessage = other.notificationNewMessage;
    this.notificationGroupInvitation = other.notificationGroupInvitation;
    this.notificationShowMessage = other.notificationShowMessage;
    this.notificationIncomingCall = other.notificationIncomingCall;
    if (other.isSetNotificationSoundMessage()) {
      this.notificationSoundMessage = other.notificationSoundMessage;
    }
    if (other.isSetNotificationSoundGroup()) {
      this.notificationSoundGroup = other.notificationSoundGroup;
    }
    this.notificationDisabledWithSub = other.notificationDisabledWithSub;
    this.privacySyncContacts = other.privacySyncContacts;
    this.privacySearchByPhoneNumber = other.privacySearchByPhoneNumber;
    this.privacySearchByUserid = other.privacySearchByUserid;
    this.privacySearchByEmail = other.privacySearchByEmail;
    this.privacyAllowSecondaryDeviceLogin = other.privacyAllowSecondaryDeviceLogin;
    this.privacyProfileImagePostToMyhome = other.privacyProfileImagePostToMyhome;
    this.privacyReceiveMessagesFromNotFriend = other.privacyReceiveMessagesFromNotFriend;
    if (other.isSetContactMyTicket()) {
      this.contactMyTicket = other.contactMyTicket;
    }
    if (other.isSetIdentityProvider()) {
      this.identityProvider = other.identityProvider;
    }
    if (other.isSetIdentityIdentifier()) {
      this.identityIdentifier = other.identityIdentifier;
    }
    if (other.isSetSnsAccounts()) {
      Map<SnsIdType,String> __this__snsAccounts = new HashMap<SnsIdType,String>(other.snsAccounts.size());
      for (Map.Entry<SnsIdType, String> other_element : other.snsAccounts.entrySet()) {

        SnsIdType other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        SnsIdType __this__snsAccounts_copy_key = other_element_key;

        String __this__snsAccounts_copy_value = other_element_value;

        __this__snsAccounts.put(__this__snsAccounts_copy_key, __this__snsAccounts_copy_value);
      }
      this.snsAccounts = __this__snsAccounts;
    }
    this.phoneRegistration = other.phoneRegistration;
    if (other.isSetEmailConfirmationStatus()) {
      this.emailConfirmationStatus = other.emailConfirmationStatus;
    }
    if (other.isSetPreferenceLocale()) {
      this.preferenceLocale = other.preferenceLocale;
    }
    if (other.isSetCustomModes()) {
      Map<CustomMode,String> __this__customModes = new HashMap<CustomMode,String>(other.customModes.size());
      for (Map.Entry<CustomMode, String> other_element : other.customModes.entrySet()) {

        CustomMode other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        CustomMode __this__customModes_copy_key = other_element_key;

        String __this__customModes_copy_value = other_element_value;

        __this__customModes.put(__this__customModes_copy_key, __this__customModes_copy_value);
      }
      this.customModes = __this__customModes;
    }
  }

  public Settings deepCopy() {
    return new Settings(this);
  }

  @Override
  public void clear() {
    setNotificationEnableIsSet(false);
    this.notificationEnable = false;
    setNotificationMuteExpirationIsSet(false);
    this.notificationMuteExpiration = 0;
    setNotificationNewMessageIsSet(false);
    this.notificationNewMessage = false;
    setNotificationGroupInvitationIsSet(false);
    this.notificationGroupInvitation = false;
    setNotificationShowMessageIsSet(false);
    this.notificationShowMessage = false;
    setNotificationIncomingCallIsSet(false);
    this.notificationIncomingCall = false;
    this.notificationSoundMessage = null;
    this.notificationSoundGroup = null;
    setNotificationDisabledWithSubIsSet(false);
    this.notificationDisabledWithSub = false;
    setPrivacySyncContactsIsSet(false);
    this.privacySyncContacts = false;
    setPrivacySearchByPhoneNumberIsSet(false);
    this.privacySearchByPhoneNumber = false;
    setPrivacySearchByUseridIsSet(false);
    this.privacySearchByUserid = false;
    setPrivacySearchByEmailIsSet(false);
    this.privacySearchByEmail = false;
    setPrivacyAllowSecondaryDeviceLoginIsSet(false);
    this.privacyAllowSecondaryDeviceLogin = false;
    setPrivacyProfileImagePostToMyhomeIsSet(false);
    this.privacyProfileImagePostToMyhome = false;
    setPrivacyReceiveMessagesFromNotFriendIsSet(false);
    this.privacyReceiveMessagesFromNotFriend = false;
    this.contactMyTicket = null;
    this.identityProvider = null;
    this.identityIdentifier = null;
    this.snsAccounts = null;
    setPhoneRegistrationIsSet(false);
    this.phoneRegistration = false;
    this.emailConfirmationStatus = null;
    this.preferenceLocale = null;
    this.customModes = null;
  }

  public boolean isNotificationEnable() {
    return this.notificationEnable;
  }

  public void setNotificationEnable(boolean notificationEnable) {
    this.notificationEnable = notificationEnable;
    setNotificationEnableIsSet(true);
  }

  public void unsetNotificationEnable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTIFICATIONENABLE_ISSET_ID);
  }

  /** Returns true if field notificationEnable is set (has been assigned a value) and false otherwise */
  public boolean isSetNotificationEnable() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTIFICATIONENABLE_ISSET_ID);
  }

  public void setNotificationEnableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTIFICATIONENABLE_ISSET_ID, value);
  }

  public long getNotificationMuteExpiration() {
    return this.notificationMuteExpiration;
  }

  public void setNotificationMuteExpiration(long notificationMuteExpiration) {
    this.notificationMuteExpiration = notificationMuteExpiration;
    setNotificationMuteExpirationIsSet(true);
  }

  public void unsetNotificationMuteExpiration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTIFICATIONMUTEEXPIRATION_ISSET_ID);
  }

  /** Returns true if field notificationMuteExpiration is set (has been assigned a value) and false otherwise */
  public boolean isSetNotificationMuteExpiration() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTIFICATIONMUTEEXPIRATION_ISSET_ID);
  }

  public void setNotificationMuteExpirationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTIFICATIONMUTEEXPIRATION_ISSET_ID, value);
  }

  public boolean isNotificationNewMessage() {
    return this.notificationNewMessage;
  }

  public void setNotificationNewMessage(boolean notificationNewMessage) {
    this.notificationNewMessage = notificationNewMessage;
    setNotificationNewMessageIsSet(true);
  }

  public void unsetNotificationNewMessage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTIFICATIONNEWMESSAGE_ISSET_ID);
  }

  /** Returns true if field notificationNewMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetNotificationNewMessage() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTIFICATIONNEWMESSAGE_ISSET_ID);
  }

  public void setNotificationNewMessageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTIFICATIONNEWMESSAGE_ISSET_ID, value);
  }

  public boolean isNotificationGroupInvitation() {
    return this.notificationGroupInvitation;
  }

  public void setNotificationGroupInvitation(boolean notificationGroupInvitation) {
    this.notificationGroupInvitation = notificationGroupInvitation;
    setNotificationGroupInvitationIsSet(true);
  }

  public void unsetNotificationGroupInvitation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTIFICATIONGROUPINVITATION_ISSET_ID);
  }

  /** Returns true if field notificationGroupInvitation is set (has been assigned a value) and false otherwise */
  public boolean isSetNotificationGroupInvitation() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTIFICATIONGROUPINVITATION_ISSET_ID);
  }

  public void setNotificationGroupInvitationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTIFICATIONGROUPINVITATION_ISSET_ID, value);
  }

  public boolean isNotificationShowMessage() {
    return this.notificationShowMessage;
  }

  public void setNotificationShowMessage(boolean notificationShowMessage) {
    this.notificationShowMessage = notificationShowMessage;
    setNotificationShowMessageIsSet(true);
  }

  public void unsetNotificationShowMessage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTIFICATIONSHOWMESSAGE_ISSET_ID);
  }

  /** Returns true if field notificationShowMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetNotificationShowMessage() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTIFICATIONSHOWMESSAGE_ISSET_ID);
  }

  public void setNotificationShowMessageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTIFICATIONSHOWMESSAGE_ISSET_ID, value);
  }

  public boolean isNotificationIncomingCall() {
    return this.notificationIncomingCall;
  }

  public void setNotificationIncomingCall(boolean notificationIncomingCall) {
    this.notificationIncomingCall = notificationIncomingCall;
    setNotificationIncomingCallIsSet(true);
  }

  public void unsetNotificationIncomingCall() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTIFICATIONINCOMINGCALL_ISSET_ID);
  }

  /** Returns true if field notificationIncomingCall is set (has been assigned a value) and false otherwise */
  public boolean isSetNotificationIncomingCall() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTIFICATIONINCOMINGCALL_ISSET_ID);
  }

  public void setNotificationIncomingCallIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTIFICATIONINCOMINGCALL_ISSET_ID, value);
  }

  public String getNotificationSoundMessage() {
    return this.notificationSoundMessage;
  }

  public void setNotificationSoundMessage(String notificationSoundMessage) {
    this.notificationSoundMessage = notificationSoundMessage;
  }

  public void unsetNotificationSoundMessage() {
    this.notificationSoundMessage = null;
  }

  /** Returns true if field notificationSoundMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetNotificationSoundMessage() {
    return this.notificationSoundMessage != null;
  }

  public void setNotificationSoundMessageIsSet(boolean value) {
    if (!value) {
      this.notificationSoundMessage = null;
    }
  }

  public String getNotificationSoundGroup() {
    return this.notificationSoundGroup;
  }

  public void setNotificationSoundGroup(String notificationSoundGroup) {
    this.notificationSoundGroup = notificationSoundGroup;
  }

  public void unsetNotificationSoundGroup() {
    this.notificationSoundGroup = null;
  }

  /** Returns true if field notificationSoundGroup is set (has been assigned a value) and false otherwise */
  public boolean isSetNotificationSoundGroup() {
    return this.notificationSoundGroup != null;
  }

  public void setNotificationSoundGroupIsSet(boolean value) {
    if (!value) {
      this.notificationSoundGroup = null;
    }
  }

  public boolean isNotificationDisabledWithSub() {
    return this.notificationDisabledWithSub;
  }

  public void setNotificationDisabledWithSub(boolean notificationDisabledWithSub) {
    this.notificationDisabledWithSub = notificationDisabledWithSub;
    setNotificationDisabledWithSubIsSet(true);
  }

  public void unsetNotificationDisabledWithSub() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTIFICATIONDISABLEDWITHSUB_ISSET_ID);
  }

  /** Returns true if field notificationDisabledWithSub is set (has been assigned a value) and false otherwise */
  public boolean isSetNotificationDisabledWithSub() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTIFICATIONDISABLEDWITHSUB_ISSET_ID);
  }

  public void setNotificationDisabledWithSubIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTIFICATIONDISABLEDWITHSUB_ISSET_ID, value);
  }

  public boolean isPrivacySyncContacts() {
    return this.privacySyncContacts;
  }

  public void setPrivacySyncContacts(boolean privacySyncContacts) {
    this.privacySyncContacts = privacySyncContacts;
    setPrivacySyncContactsIsSet(true);
  }

  public void unsetPrivacySyncContacts() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIVACYSYNCCONTACTS_ISSET_ID);
  }

  /** Returns true if field privacySyncContacts is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivacySyncContacts() {
    return EncodingUtils.testBit(__isset_bitfield, __PRIVACYSYNCCONTACTS_ISSET_ID);
  }

  public void setPrivacySyncContactsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIVACYSYNCCONTACTS_ISSET_ID, value);
  }

  public boolean isPrivacySearchByPhoneNumber() {
    return this.privacySearchByPhoneNumber;
  }

  public void setPrivacySearchByPhoneNumber(boolean privacySearchByPhoneNumber) {
    this.privacySearchByPhoneNumber = privacySearchByPhoneNumber;
    setPrivacySearchByPhoneNumberIsSet(true);
  }

  public void unsetPrivacySearchByPhoneNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIVACYSEARCHBYPHONENUMBER_ISSET_ID);
  }

  /** Returns true if field privacySearchByPhoneNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivacySearchByPhoneNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __PRIVACYSEARCHBYPHONENUMBER_ISSET_ID);
  }

  public void setPrivacySearchByPhoneNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIVACYSEARCHBYPHONENUMBER_ISSET_ID, value);
  }

  public boolean isPrivacySearchByUserid() {
    return this.privacySearchByUserid;
  }

  public void setPrivacySearchByUserid(boolean privacySearchByUserid) {
    this.privacySearchByUserid = privacySearchByUserid;
    setPrivacySearchByUseridIsSet(true);
  }

  public void unsetPrivacySearchByUserid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIVACYSEARCHBYUSERID_ISSET_ID);
  }

  /** Returns true if field privacySearchByUserid is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivacySearchByUserid() {
    return EncodingUtils.testBit(__isset_bitfield, __PRIVACYSEARCHBYUSERID_ISSET_ID);
  }

  public void setPrivacySearchByUseridIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIVACYSEARCHBYUSERID_ISSET_ID, value);
  }

  public boolean isPrivacySearchByEmail() {
    return this.privacySearchByEmail;
  }

  public void setPrivacySearchByEmail(boolean privacySearchByEmail) {
    this.privacySearchByEmail = privacySearchByEmail;
    setPrivacySearchByEmailIsSet(true);
  }

  public void unsetPrivacySearchByEmail() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIVACYSEARCHBYEMAIL_ISSET_ID);
  }

  /** Returns true if field privacySearchByEmail is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivacySearchByEmail() {
    return EncodingUtils.testBit(__isset_bitfield, __PRIVACYSEARCHBYEMAIL_ISSET_ID);
  }

  public void setPrivacySearchByEmailIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIVACYSEARCHBYEMAIL_ISSET_ID, value);
  }

  public boolean isPrivacyAllowSecondaryDeviceLogin() {
    return this.privacyAllowSecondaryDeviceLogin;
  }

  public void setPrivacyAllowSecondaryDeviceLogin(boolean privacyAllowSecondaryDeviceLogin) {
    this.privacyAllowSecondaryDeviceLogin = privacyAllowSecondaryDeviceLogin;
    setPrivacyAllowSecondaryDeviceLoginIsSet(true);
  }

  public void unsetPrivacyAllowSecondaryDeviceLogin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIVACYALLOWSECONDARYDEVICELOGIN_ISSET_ID);
  }

  /** Returns true if field privacyAllowSecondaryDeviceLogin is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivacyAllowSecondaryDeviceLogin() {
    return EncodingUtils.testBit(__isset_bitfield, __PRIVACYALLOWSECONDARYDEVICELOGIN_ISSET_ID);
  }

  public void setPrivacyAllowSecondaryDeviceLoginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIVACYALLOWSECONDARYDEVICELOGIN_ISSET_ID, value);
  }

  public boolean isPrivacyProfileImagePostToMyhome() {
    return this.privacyProfileImagePostToMyhome;
  }

  public void setPrivacyProfileImagePostToMyhome(boolean privacyProfileImagePostToMyhome) {
    this.privacyProfileImagePostToMyhome = privacyProfileImagePostToMyhome;
    setPrivacyProfileImagePostToMyhomeIsSet(true);
  }

  public void unsetPrivacyProfileImagePostToMyhome() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIVACYPROFILEIMAGEPOSTTOMYHOME_ISSET_ID);
  }

  /** Returns true if field privacyProfileImagePostToMyhome is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivacyProfileImagePostToMyhome() {
    return EncodingUtils.testBit(__isset_bitfield, __PRIVACYPROFILEIMAGEPOSTTOMYHOME_ISSET_ID);
  }

  public void setPrivacyProfileImagePostToMyhomeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIVACYPROFILEIMAGEPOSTTOMYHOME_ISSET_ID, value);
  }

  public boolean isPrivacyReceiveMessagesFromNotFriend() {
    return this.privacyReceiveMessagesFromNotFriend;
  }

  public void setPrivacyReceiveMessagesFromNotFriend(boolean privacyReceiveMessagesFromNotFriend) {
    this.privacyReceiveMessagesFromNotFriend = privacyReceiveMessagesFromNotFriend;
    setPrivacyReceiveMessagesFromNotFriendIsSet(true);
  }

  public void unsetPrivacyReceiveMessagesFromNotFriend() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIVACYRECEIVEMESSAGESFROMNOTFRIEND_ISSET_ID);
  }

  /** Returns true if field privacyReceiveMessagesFromNotFriend is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivacyReceiveMessagesFromNotFriend() {
    return EncodingUtils.testBit(__isset_bitfield, __PRIVACYRECEIVEMESSAGESFROMNOTFRIEND_ISSET_ID);
  }

  public void setPrivacyReceiveMessagesFromNotFriendIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIVACYRECEIVEMESSAGESFROMNOTFRIEND_ISSET_ID, value);
  }

  public String getContactMyTicket() {
    return this.contactMyTicket;
  }

  public void setContactMyTicket(String contactMyTicket) {
    this.contactMyTicket = contactMyTicket;
  }

  public void unsetContactMyTicket() {
    this.contactMyTicket = null;
  }

  /** Returns true if field contactMyTicket is set (has been assigned a value) and false otherwise */
  public boolean isSetContactMyTicket() {
    return this.contactMyTicket != null;
  }

  public void setContactMyTicketIsSet(boolean value) {
    if (!value) {
      this.contactMyTicket = null;
    }
  }

  /**
   * 
   * @see IdentityProvider
   */
  public IdentityProvider getIdentityProvider() {
    return this.identityProvider;
  }

  /**
   * 
   * @see IdentityProvider
   */
  public void setIdentityProvider(IdentityProvider identityProvider) {
    this.identityProvider = identityProvider;
  }

  public void unsetIdentityProvider() {
    this.identityProvider = null;
  }

  /** Returns true if field identityProvider is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentityProvider() {
    return this.identityProvider != null;
  }

  public void setIdentityProviderIsSet(boolean value) {
    if (!value) {
      this.identityProvider = null;
    }
  }

  public String getIdentityIdentifier() {
    return this.identityIdentifier;
  }

  public void setIdentityIdentifier(String identityIdentifier) {
    this.identityIdentifier = identityIdentifier;
  }

  public void unsetIdentityIdentifier() {
    this.identityIdentifier = null;
  }

  /** Returns true if field identityIdentifier is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentityIdentifier() {
    return this.identityIdentifier != null;
  }

  public void setIdentityIdentifierIsSet(boolean value) {
    if (!value) {
      this.identityIdentifier = null;
    }
  }

  public int getSnsAccountsSize() {
    return (this.snsAccounts == null) ? 0 : this.snsAccounts.size();
  }

  public void putToSnsAccounts(SnsIdType key, String val) {
    if (this.snsAccounts == null) {
      this.snsAccounts = new HashMap<SnsIdType,String>();
    }
    this.snsAccounts.put(key, val);
  }

  public Map<SnsIdType,String> getSnsAccounts() {
    return this.snsAccounts;
  }

  public void setSnsAccounts(Map<SnsIdType,String> snsAccounts) {
    this.snsAccounts = snsAccounts;
  }

  public void unsetSnsAccounts() {
    this.snsAccounts = null;
  }

  /** Returns true if field snsAccounts is set (has been assigned a value) and false otherwise */
  public boolean isSetSnsAccounts() {
    return this.snsAccounts != null;
  }

  public void setSnsAccountsIsSet(boolean value) {
    if (!value) {
      this.snsAccounts = null;
    }
  }

  public boolean isPhoneRegistration() {
    return this.phoneRegistration;
  }

  public void setPhoneRegistration(boolean phoneRegistration) {
    this.phoneRegistration = phoneRegistration;
    setPhoneRegistrationIsSet(true);
  }

  public void unsetPhoneRegistration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PHONEREGISTRATION_ISSET_ID);
  }

  /** Returns true if field phoneRegistration is set (has been assigned a value) and false otherwise */
  public boolean isSetPhoneRegistration() {
    return EncodingUtils.testBit(__isset_bitfield, __PHONEREGISTRATION_ISSET_ID);
  }

  public void setPhoneRegistrationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PHONEREGISTRATION_ISSET_ID, value);
  }

  /**
   * 
   * @see EmailConfirmationStatus
   */
  public EmailConfirmationStatus getEmailConfirmationStatus() {
    return this.emailConfirmationStatus;
  }

  /**
   * 
   * @see EmailConfirmationStatus
   */
  public void setEmailConfirmationStatus(EmailConfirmationStatus emailConfirmationStatus) {
    this.emailConfirmationStatus = emailConfirmationStatus;
  }

  public void unsetEmailConfirmationStatus() {
    this.emailConfirmationStatus = null;
  }

  /** Returns true if field emailConfirmationStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetEmailConfirmationStatus() {
    return this.emailConfirmationStatus != null;
  }

  public void setEmailConfirmationStatusIsSet(boolean value) {
    if (!value) {
      this.emailConfirmationStatus = null;
    }
  }

  public String getPreferenceLocale() {
    return this.preferenceLocale;
  }

  public void setPreferenceLocale(String preferenceLocale) {
    this.preferenceLocale = preferenceLocale;
  }

  public void unsetPreferenceLocale() {
    this.preferenceLocale = null;
  }

  /** Returns true if field preferenceLocale is set (has been assigned a value) and false otherwise */
  public boolean isSetPreferenceLocale() {
    return this.preferenceLocale != null;
  }

  public void setPreferenceLocaleIsSet(boolean value) {
    if (!value) {
      this.preferenceLocale = null;
    }
  }

  public int getCustomModesSize() {
    return (this.customModes == null) ? 0 : this.customModes.size();
  }

  public void putToCustomModes(CustomMode key, String val) {
    if (this.customModes == null) {
      this.customModes = new HashMap<CustomMode,String>();
    }
    this.customModes.put(key, val);
  }

  public Map<CustomMode,String> getCustomModes() {
    return this.customModes;
  }

  public void setCustomModes(Map<CustomMode,String> customModes) {
    this.customModes = customModes;
  }

  public void unsetCustomModes() {
    this.customModes = null;
  }

  /** Returns true if field customModes is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomModes() {
    return this.customModes != null;
  }

  public void setCustomModesIsSet(boolean value) {
    if (!value) {
      this.customModes = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NOTIFICATION_ENABLE:
      if (value == null) {
        unsetNotificationEnable();
      } else {
        setNotificationEnable((Boolean)value);
      }
      break;

    case NOTIFICATION_MUTE_EXPIRATION:
      if (value == null) {
        unsetNotificationMuteExpiration();
      } else {
        setNotificationMuteExpiration((Long)value);
      }
      break;

    case NOTIFICATION_NEW_MESSAGE:
      if (value == null) {
        unsetNotificationNewMessage();
      } else {
        setNotificationNewMessage((Boolean)value);
      }
      break;

    case NOTIFICATION_GROUP_INVITATION:
      if (value == null) {
        unsetNotificationGroupInvitation();
      } else {
        setNotificationGroupInvitation((Boolean)value);
      }
      break;

    case NOTIFICATION_SHOW_MESSAGE:
      if (value == null) {
        unsetNotificationShowMessage();
      } else {
        setNotificationShowMessage((Boolean)value);
      }
      break;

    case NOTIFICATION_INCOMING_CALL:
      if (value == null) {
        unsetNotificationIncomingCall();
      } else {
        setNotificationIncomingCall((Boolean)value);
      }
      break;

    case NOTIFICATION_SOUND_MESSAGE:
      if (value == null) {
        unsetNotificationSoundMessage();
      } else {
        setNotificationSoundMessage((String)value);
      }
      break;

    case NOTIFICATION_SOUND_GROUP:
      if (value == null) {
        unsetNotificationSoundGroup();
      } else {
        setNotificationSoundGroup((String)value);
      }
      break;

    case NOTIFICATION_DISABLED_WITH_SUB:
      if (value == null) {
        unsetNotificationDisabledWithSub();
      } else {
        setNotificationDisabledWithSub((Boolean)value);
      }
      break;

    case PRIVACY_SYNC_CONTACTS:
      if (value == null) {
        unsetPrivacySyncContacts();
      } else {
        setPrivacySyncContacts((Boolean)value);
      }
      break;

    case PRIVACY_SEARCH_BY_PHONE_NUMBER:
      if (value == null) {
        unsetPrivacySearchByPhoneNumber();
      } else {
        setPrivacySearchByPhoneNumber((Boolean)value);
      }
      break;

    case PRIVACY_SEARCH_BY_USERID:
      if (value == null) {
        unsetPrivacySearchByUserid();
      } else {
        setPrivacySearchByUserid((Boolean)value);
      }
      break;

    case PRIVACY_SEARCH_BY_EMAIL:
      if (value == null) {
        unsetPrivacySearchByEmail();
      } else {
        setPrivacySearchByEmail((Boolean)value);
      }
      break;

    case PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN:
      if (value == null) {
        unsetPrivacyAllowSecondaryDeviceLogin();
      } else {
        setPrivacyAllowSecondaryDeviceLogin((Boolean)value);
      }
      break;

    case PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME:
      if (value == null) {
        unsetPrivacyProfileImagePostToMyhome();
      } else {
        setPrivacyProfileImagePostToMyhome((Boolean)value);
      }
      break;

    case PRIVACY_RECEIVE_MESSAGES_FROM_NOT_FRIEND:
      if (value == null) {
        unsetPrivacyReceiveMessagesFromNotFriend();
      } else {
        setPrivacyReceiveMessagesFromNotFriend((Boolean)value);
      }
      break;

    case CONTACT_MY_TICKET:
      if (value == null) {
        unsetContactMyTicket();
      } else {
        setContactMyTicket((String)value);
      }
      break;

    case IDENTITY_PROVIDER:
      if (value == null) {
        unsetIdentityProvider();
      } else {
        setIdentityProvider((IdentityProvider)value);
      }
      break;

    case IDENTITY_IDENTIFIER:
      if (value == null) {
        unsetIdentityIdentifier();
      } else {
        setIdentityIdentifier((String)value);
      }
      break;

    case SNS_ACCOUNTS:
      if (value == null) {
        unsetSnsAccounts();
      } else {
        setSnsAccounts((Map<SnsIdType,String>)value);
      }
      break;

    case PHONE_REGISTRATION:
      if (value == null) {
        unsetPhoneRegistration();
      } else {
        setPhoneRegistration((Boolean)value);
      }
      break;

    case EMAIL_CONFIRMATION_STATUS:
      if (value == null) {
        unsetEmailConfirmationStatus();
      } else {
        setEmailConfirmationStatus((EmailConfirmationStatus)value);
      }
      break;

    case PREFERENCE_LOCALE:
      if (value == null) {
        unsetPreferenceLocale();
      } else {
        setPreferenceLocale((String)value);
      }
      break;

    case CUSTOM_MODES:
      if (value == null) {
        unsetCustomModes();
      } else {
        setCustomModes((Map<CustomMode,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NOTIFICATION_ENABLE:
      return isNotificationEnable();

    case NOTIFICATION_MUTE_EXPIRATION:
      return getNotificationMuteExpiration();

    case NOTIFICATION_NEW_MESSAGE:
      return isNotificationNewMessage();

    case NOTIFICATION_GROUP_INVITATION:
      return isNotificationGroupInvitation();

    case NOTIFICATION_SHOW_MESSAGE:
      return isNotificationShowMessage();

    case NOTIFICATION_INCOMING_CALL:
      return isNotificationIncomingCall();

    case NOTIFICATION_SOUND_MESSAGE:
      return getNotificationSoundMessage();

    case NOTIFICATION_SOUND_GROUP:
      return getNotificationSoundGroup();

    case NOTIFICATION_DISABLED_WITH_SUB:
      return isNotificationDisabledWithSub();

    case PRIVACY_SYNC_CONTACTS:
      return isPrivacySyncContacts();

    case PRIVACY_SEARCH_BY_PHONE_NUMBER:
      return isPrivacySearchByPhoneNumber();

    case PRIVACY_SEARCH_BY_USERID:
      return isPrivacySearchByUserid();

    case PRIVACY_SEARCH_BY_EMAIL:
      return isPrivacySearchByEmail();

    case PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN:
      return isPrivacyAllowSecondaryDeviceLogin();

    case PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME:
      return isPrivacyProfileImagePostToMyhome();

    case PRIVACY_RECEIVE_MESSAGES_FROM_NOT_FRIEND:
      return isPrivacyReceiveMessagesFromNotFriend();

    case CONTACT_MY_TICKET:
      return getContactMyTicket();

    case IDENTITY_PROVIDER:
      return getIdentityProvider();

    case IDENTITY_IDENTIFIER:
      return getIdentityIdentifier();

    case SNS_ACCOUNTS:
      return getSnsAccounts();

    case PHONE_REGISTRATION:
      return isPhoneRegistration();

    case EMAIL_CONFIRMATION_STATUS:
      return getEmailConfirmationStatus();

    case PREFERENCE_LOCALE:
      return getPreferenceLocale();

    case CUSTOM_MODES:
      return getCustomModes();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NOTIFICATION_ENABLE:
      return isSetNotificationEnable();
    case NOTIFICATION_MUTE_EXPIRATION:
      return isSetNotificationMuteExpiration();
    case NOTIFICATION_NEW_MESSAGE:
      return isSetNotificationNewMessage();
    case NOTIFICATION_GROUP_INVITATION:
      return isSetNotificationGroupInvitation();
    case NOTIFICATION_SHOW_MESSAGE:
      return isSetNotificationShowMessage();
    case NOTIFICATION_INCOMING_CALL:
      return isSetNotificationIncomingCall();
    case NOTIFICATION_SOUND_MESSAGE:
      return isSetNotificationSoundMessage();
    case NOTIFICATION_SOUND_GROUP:
      return isSetNotificationSoundGroup();
    case NOTIFICATION_DISABLED_WITH_SUB:
      return isSetNotificationDisabledWithSub();
    case PRIVACY_SYNC_CONTACTS:
      return isSetPrivacySyncContacts();
    case PRIVACY_SEARCH_BY_PHONE_NUMBER:
      return isSetPrivacySearchByPhoneNumber();
    case PRIVACY_SEARCH_BY_USERID:
      return isSetPrivacySearchByUserid();
    case PRIVACY_SEARCH_BY_EMAIL:
      return isSetPrivacySearchByEmail();
    case PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN:
      return isSetPrivacyAllowSecondaryDeviceLogin();
    case PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME:
      return isSetPrivacyProfileImagePostToMyhome();
    case PRIVACY_RECEIVE_MESSAGES_FROM_NOT_FRIEND:
      return isSetPrivacyReceiveMessagesFromNotFriend();
    case CONTACT_MY_TICKET:
      return isSetContactMyTicket();
    case IDENTITY_PROVIDER:
      return isSetIdentityProvider();
    case IDENTITY_IDENTIFIER:
      return isSetIdentityIdentifier();
    case SNS_ACCOUNTS:
      return isSetSnsAccounts();
    case PHONE_REGISTRATION:
      return isSetPhoneRegistration();
    case EMAIL_CONFIRMATION_STATUS:
      return isSetEmailConfirmationStatus();
    case PREFERENCE_LOCALE:
      return isSetPreferenceLocale();
    case CUSTOM_MODES:
      return isSetCustomModes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Settings)
      return this.equals((Settings)that);
    return false;
  }

  public boolean equals(Settings that) {
    if (that == null)
      return false;

    boolean this_present_notificationEnable = true;
    boolean that_present_notificationEnable = true;
    if (this_present_notificationEnable || that_present_notificationEnable) {
      if (!(this_present_notificationEnable && that_present_notificationEnable))
        return false;
      if (this.notificationEnable != that.notificationEnable)
        return false;
    }

    boolean this_present_notificationMuteExpiration = true;
    boolean that_present_notificationMuteExpiration = true;
    if (this_present_notificationMuteExpiration || that_present_notificationMuteExpiration) {
      if (!(this_present_notificationMuteExpiration && that_present_notificationMuteExpiration))
        return false;
      if (this.notificationMuteExpiration != that.notificationMuteExpiration)
        return false;
    }

    boolean this_present_notificationNewMessage = true;
    boolean that_present_notificationNewMessage = true;
    if (this_present_notificationNewMessage || that_present_notificationNewMessage) {
      if (!(this_present_notificationNewMessage && that_present_notificationNewMessage))
        return false;
      if (this.notificationNewMessage != that.notificationNewMessage)
        return false;
    }

    boolean this_present_notificationGroupInvitation = true;
    boolean that_present_notificationGroupInvitation = true;
    if (this_present_notificationGroupInvitation || that_present_notificationGroupInvitation) {
      if (!(this_present_notificationGroupInvitation && that_present_notificationGroupInvitation))
        return false;
      if (this.notificationGroupInvitation != that.notificationGroupInvitation)
        return false;
    }

    boolean this_present_notificationShowMessage = true;
    boolean that_present_notificationShowMessage = true;
    if (this_present_notificationShowMessage || that_present_notificationShowMessage) {
      if (!(this_present_notificationShowMessage && that_present_notificationShowMessage))
        return false;
      if (this.notificationShowMessage != that.notificationShowMessage)
        return false;
    }

    boolean this_present_notificationIncomingCall = true;
    boolean that_present_notificationIncomingCall = true;
    if (this_present_notificationIncomingCall || that_present_notificationIncomingCall) {
      if (!(this_present_notificationIncomingCall && that_present_notificationIncomingCall))
        return false;
      if (this.notificationIncomingCall != that.notificationIncomingCall)
        return false;
    }

    boolean this_present_notificationSoundMessage = true && this.isSetNotificationSoundMessage();
    boolean that_present_notificationSoundMessage = true && that.isSetNotificationSoundMessage();
    if (this_present_notificationSoundMessage || that_present_notificationSoundMessage) {
      if (!(this_present_notificationSoundMessage && that_present_notificationSoundMessage))
        return false;
      if (!this.notificationSoundMessage.equals(that.notificationSoundMessage))
        return false;
    }

    boolean this_present_notificationSoundGroup = true && this.isSetNotificationSoundGroup();
    boolean that_present_notificationSoundGroup = true && that.isSetNotificationSoundGroup();
    if (this_present_notificationSoundGroup || that_present_notificationSoundGroup) {
      if (!(this_present_notificationSoundGroup && that_present_notificationSoundGroup))
        return false;
      if (!this.notificationSoundGroup.equals(that.notificationSoundGroup))
        return false;
    }

    boolean this_present_notificationDisabledWithSub = true;
    boolean that_present_notificationDisabledWithSub = true;
    if (this_present_notificationDisabledWithSub || that_present_notificationDisabledWithSub) {
      if (!(this_present_notificationDisabledWithSub && that_present_notificationDisabledWithSub))
        return false;
      if (this.notificationDisabledWithSub != that.notificationDisabledWithSub)
        return false;
    }

    boolean this_present_privacySyncContacts = true;
    boolean that_present_privacySyncContacts = true;
    if (this_present_privacySyncContacts || that_present_privacySyncContacts) {
      if (!(this_present_privacySyncContacts && that_present_privacySyncContacts))
        return false;
      if (this.privacySyncContacts != that.privacySyncContacts)
        return false;
    }

    boolean this_present_privacySearchByPhoneNumber = true;
    boolean that_present_privacySearchByPhoneNumber = true;
    if (this_present_privacySearchByPhoneNumber || that_present_privacySearchByPhoneNumber) {
      if (!(this_present_privacySearchByPhoneNumber && that_present_privacySearchByPhoneNumber))
        return false;
      if (this.privacySearchByPhoneNumber != that.privacySearchByPhoneNumber)
        return false;
    }

    boolean this_present_privacySearchByUserid = true;
    boolean that_present_privacySearchByUserid = true;
    if (this_present_privacySearchByUserid || that_present_privacySearchByUserid) {
      if (!(this_present_privacySearchByUserid && that_present_privacySearchByUserid))
        return false;
      if (this.privacySearchByUserid != that.privacySearchByUserid)
        return false;
    }

    boolean this_present_privacySearchByEmail = true;
    boolean that_present_privacySearchByEmail = true;
    if (this_present_privacySearchByEmail || that_present_privacySearchByEmail) {
      if (!(this_present_privacySearchByEmail && that_present_privacySearchByEmail))
        return false;
      if (this.privacySearchByEmail != that.privacySearchByEmail)
        return false;
    }

    boolean this_present_privacyAllowSecondaryDeviceLogin = true;
    boolean that_present_privacyAllowSecondaryDeviceLogin = true;
    if (this_present_privacyAllowSecondaryDeviceLogin || that_present_privacyAllowSecondaryDeviceLogin) {
      if (!(this_present_privacyAllowSecondaryDeviceLogin && that_present_privacyAllowSecondaryDeviceLogin))
        return false;
      if (this.privacyAllowSecondaryDeviceLogin != that.privacyAllowSecondaryDeviceLogin)
        return false;
    }

    boolean this_present_privacyProfileImagePostToMyhome = true;
    boolean that_present_privacyProfileImagePostToMyhome = true;
    if (this_present_privacyProfileImagePostToMyhome || that_present_privacyProfileImagePostToMyhome) {
      if (!(this_present_privacyProfileImagePostToMyhome && that_present_privacyProfileImagePostToMyhome))
        return false;
      if (this.privacyProfileImagePostToMyhome != that.privacyProfileImagePostToMyhome)
        return false;
    }

    boolean this_present_privacyReceiveMessagesFromNotFriend = true;
    boolean that_present_privacyReceiveMessagesFromNotFriend = true;
    if (this_present_privacyReceiveMessagesFromNotFriend || that_present_privacyReceiveMessagesFromNotFriend) {
      if (!(this_present_privacyReceiveMessagesFromNotFriend && that_present_privacyReceiveMessagesFromNotFriend))
        return false;
      if (this.privacyReceiveMessagesFromNotFriend != that.privacyReceiveMessagesFromNotFriend)
        return false;
    }

    boolean this_present_contactMyTicket = true && this.isSetContactMyTicket();
    boolean that_present_contactMyTicket = true && that.isSetContactMyTicket();
    if (this_present_contactMyTicket || that_present_contactMyTicket) {
      if (!(this_present_contactMyTicket && that_present_contactMyTicket))
        return false;
      if (!this.contactMyTicket.equals(that.contactMyTicket))
        return false;
    }

    boolean this_present_identityProvider = true && this.isSetIdentityProvider();
    boolean that_present_identityProvider = true && that.isSetIdentityProvider();
    if (this_present_identityProvider || that_present_identityProvider) {
      if (!(this_present_identityProvider && that_present_identityProvider))
        return false;
      if (!this.identityProvider.equals(that.identityProvider))
        return false;
    }

    boolean this_present_identityIdentifier = true && this.isSetIdentityIdentifier();
    boolean that_present_identityIdentifier = true && that.isSetIdentityIdentifier();
    if (this_present_identityIdentifier || that_present_identityIdentifier) {
      if (!(this_present_identityIdentifier && that_present_identityIdentifier))
        return false;
      if (!this.identityIdentifier.equals(that.identityIdentifier))
        return false;
    }

    boolean this_present_snsAccounts = true && this.isSetSnsAccounts();
    boolean that_present_snsAccounts = true && that.isSetSnsAccounts();
    if (this_present_snsAccounts || that_present_snsAccounts) {
      if (!(this_present_snsAccounts && that_present_snsAccounts))
        return false;
      if (!this.snsAccounts.equals(that.snsAccounts))
        return false;
    }

    boolean this_present_phoneRegistration = true;
    boolean that_present_phoneRegistration = true;
    if (this_present_phoneRegistration || that_present_phoneRegistration) {
      if (!(this_present_phoneRegistration && that_present_phoneRegistration))
        return false;
      if (this.phoneRegistration != that.phoneRegistration)
        return false;
    }

    boolean this_present_emailConfirmationStatus = true && this.isSetEmailConfirmationStatus();
    boolean that_present_emailConfirmationStatus = true && that.isSetEmailConfirmationStatus();
    if (this_present_emailConfirmationStatus || that_present_emailConfirmationStatus) {
      if (!(this_present_emailConfirmationStatus && that_present_emailConfirmationStatus))
        return false;
      if (!this.emailConfirmationStatus.equals(that.emailConfirmationStatus))
        return false;
    }

    boolean this_present_preferenceLocale = true && this.isSetPreferenceLocale();
    boolean that_present_preferenceLocale = true && that.isSetPreferenceLocale();
    if (this_present_preferenceLocale || that_present_preferenceLocale) {
      if (!(this_present_preferenceLocale && that_present_preferenceLocale))
        return false;
      if (!this.preferenceLocale.equals(that.preferenceLocale))
        return false;
    }

    boolean this_present_customModes = true && this.isSetCustomModes();
    boolean that_present_customModes = true && that.isSetCustomModes();
    if (this_present_customModes || that_present_customModes) {
      if (!(this_present_customModes && that_present_customModes))
        return false;
      if (!this.customModes.equals(that.customModes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_notificationEnable = true;
    list.add(present_notificationEnable);
    if (present_notificationEnable)
      list.add(notificationEnable);

    boolean present_notificationMuteExpiration = true;
    list.add(present_notificationMuteExpiration);
    if (present_notificationMuteExpiration)
      list.add(notificationMuteExpiration);

    boolean present_notificationNewMessage = true;
    list.add(present_notificationNewMessage);
    if (present_notificationNewMessage)
      list.add(notificationNewMessage);

    boolean present_notificationGroupInvitation = true;
    list.add(present_notificationGroupInvitation);
    if (present_notificationGroupInvitation)
      list.add(notificationGroupInvitation);

    boolean present_notificationShowMessage = true;
    list.add(present_notificationShowMessage);
    if (present_notificationShowMessage)
      list.add(notificationShowMessage);

    boolean present_notificationIncomingCall = true;
    list.add(present_notificationIncomingCall);
    if (present_notificationIncomingCall)
      list.add(notificationIncomingCall);

    boolean present_notificationSoundMessage = true && (isSetNotificationSoundMessage());
    list.add(present_notificationSoundMessage);
    if (present_notificationSoundMessage)
      list.add(notificationSoundMessage);

    boolean present_notificationSoundGroup = true && (isSetNotificationSoundGroup());
    list.add(present_notificationSoundGroup);
    if (present_notificationSoundGroup)
      list.add(notificationSoundGroup);

    boolean present_notificationDisabledWithSub = true;
    list.add(present_notificationDisabledWithSub);
    if (present_notificationDisabledWithSub)
      list.add(notificationDisabledWithSub);

    boolean present_privacySyncContacts = true;
    list.add(present_privacySyncContacts);
    if (present_privacySyncContacts)
      list.add(privacySyncContacts);

    boolean present_privacySearchByPhoneNumber = true;
    list.add(present_privacySearchByPhoneNumber);
    if (present_privacySearchByPhoneNumber)
      list.add(privacySearchByPhoneNumber);

    boolean present_privacySearchByUserid = true;
    list.add(present_privacySearchByUserid);
    if (present_privacySearchByUserid)
      list.add(privacySearchByUserid);

    boolean present_privacySearchByEmail = true;
    list.add(present_privacySearchByEmail);
    if (present_privacySearchByEmail)
      list.add(privacySearchByEmail);

    boolean present_privacyAllowSecondaryDeviceLogin = true;
    list.add(present_privacyAllowSecondaryDeviceLogin);
    if (present_privacyAllowSecondaryDeviceLogin)
      list.add(privacyAllowSecondaryDeviceLogin);

    boolean present_privacyProfileImagePostToMyhome = true;
    list.add(present_privacyProfileImagePostToMyhome);
    if (present_privacyProfileImagePostToMyhome)
      list.add(privacyProfileImagePostToMyhome);

    boolean present_privacyReceiveMessagesFromNotFriend = true;
    list.add(present_privacyReceiveMessagesFromNotFriend);
    if (present_privacyReceiveMessagesFromNotFriend)
      list.add(privacyReceiveMessagesFromNotFriend);

    boolean present_contactMyTicket = true && (isSetContactMyTicket());
    list.add(present_contactMyTicket);
    if (present_contactMyTicket)
      list.add(contactMyTicket);

    boolean present_identityProvider = true && (isSetIdentityProvider());
    list.add(present_identityProvider);
    if (present_identityProvider)
      list.add(identityProvider.getValue());

    boolean present_identityIdentifier = true && (isSetIdentityIdentifier());
    list.add(present_identityIdentifier);
    if (present_identityIdentifier)
      list.add(identityIdentifier);

    boolean present_snsAccounts = true && (isSetSnsAccounts());
    list.add(present_snsAccounts);
    if (present_snsAccounts)
      list.add(snsAccounts);

    boolean present_phoneRegistration = true;
    list.add(present_phoneRegistration);
    if (present_phoneRegistration)
      list.add(phoneRegistration);

    boolean present_emailConfirmationStatus = true && (isSetEmailConfirmationStatus());
    list.add(present_emailConfirmationStatus);
    if (present_emailConfirmationStatus)
      list.add(emailConfirmationStatus.getValue());

    boolean present_preferenceLocale = true && (isSetPreferenceLocale());
    list.add(present_preferenceLocale);
    if (present_preferenceLocale)
      list.add(preferenceLocale);

    boolean present_customModes = true && (isSetCustomModes());
    list.add(present_customModes);
    if (present_customModes)
      list.add(customModes);

    return list.hashCode();
  }

  @Override
  public int compareTo(Settings other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNotificationEnable()).compareTo(other.isSetNotificationEnable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotificationEnable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notificationEnable, other.notificationEnable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotificationMuteExpiration()).compareTo(other.isSetNotificationMuteExpiration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotificationMuteExpiration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notificationMuteExpiration, other.notificationMuteExpiration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotificationNewMessage()).compareTo(other.isSetNotificationNewMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotificationNewMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notificationNewMessage, other.notificationNewMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotificationGroupInvitation()).compareTo(other.isSetNotificationGroupInvitation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotificationGroupInvitation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notificationGroupInvitation, other.notificationGroupInvitation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotificationShowMessage()).compareTo(other.isSetNotificationShowMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotificationShowMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notificationShowMessage, other.notificationShowMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotificationIncomingCall()).compareTo(other.isSetNotificationIncomingCall());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotificationIncomingCall()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notificationIncomingCall, other.notificationIncomingCall);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotificationSoundMessage()).compareTo(other.isSetNotificationSoundMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotificationSoundMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notificationSoundMessage, other.notificationSoundMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotificationSoundGroup()).compareTo(other.isSetNotificationSoundGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotificationSoundGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notificationSoundGroup, other.notificationSoundGroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotificationDisabledWithSub()).compareTo(other.isSetNotificationDisabledWithSub());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotificationDisabledWithSub()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notificationDisabledWithSub, other.notificationDisabledWithSub);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrivacySyncContacts()).compareTo(other.isSetPrivacySyncContacts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivacySyncContacts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privacySyncContacts, other.privacySyncContacts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrivacySearchByPhoneNumber()).compareTo(other.isSetPrivacySearchByPhoneNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivacySearchByPhoneNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privacySearchByPhoneNumber, other.privacySearchByPhoneNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrivacySearchByUserid()).compareTo(other.isSetPrivacySearchByUserid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivacySearchByUserid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privacySearchByUserid, other.privacySearchByUserid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrivacySearchByEmail()).compareTo(other.isSetPrivacySearchByEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivacySearchByEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privacySearchByEmail, other.privacySearchByEmail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrivacyAllowSecondaryDeviceLogin()).compareTo(other.isSetPrivacyAllowSecondaryDeviceLogin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivacyAllowSecondaryDeviceLogin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privacyAllowSecondaryDeviceLogin, other.privacyAllowSecondaryDeviceLogin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrivacyProfileImagePostToMyhome()).compareTo(other.isSetPrivacyProfileImagePostToMyhome());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivacyProfileImagePostToMyhome()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privacyProfileImagePostToMyhome, other.privacyProfileImagePostToMyhome);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrivacyReceiveMessagesFromNotFriend()).compareTo(other.isSetPrivacyReceiveMessagesFromNotFriend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivacyReceiveMessagesFromNotFriend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privacyReceiveMessagesFromNotFriend, other.privacyReceiveMessagesFromNotFriend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContactMyTicket()).compareTo(other.isSetContactMyTicket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContactMyTicket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contactMyTicket, other.contactMyTicket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentityProvider()).compareTo(other.isSetIdentityProvider());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentityProvider()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identityProvider, other.identityProvider);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentityIdentifier()).compareTo(other.isSetIdentityIdentifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentityIdentifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identityIdentifier, other.identityIdentifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSnsAccounts()).compareTo(other.isSetSnsAccounts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSnsAccounts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snsAccounts, other.snsAccounts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhoneRegistration()).compareTo(other.isSetPhoneRegistration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhoneRegistration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phoneRegistration, other.phoneRegistration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmailConfirmationStatus()).compareTo(other.isSetEmailConfirmationStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmailConfirmationStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emailConfirmationStatus, other.emailConfirmationStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreferenceLocale()).compareTo(other.isSetPreferenceLocale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreferenceLocale()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preferenceLocale, other.preferenceLocale);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomModes()).compareTo(other.isSetCustomModes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomModes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customModes, other.customModes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Settings(");
    boolean first = true;

    sb.append("notificationEnable:");
    sb.append(this.notificationEnable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notificationMuteExpiration:");
    sb.append(this.notificationMuteExpiration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notificationNewMessage:");
    sb.append(this.notificationNewMessage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notificationGroupInvitation:");
    sb.append(this.notificationGroupInvitation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notificationShowMessage:");
    sb.append(this.notificationShowMessage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notificationIncomingCall:");
    sb.append(this.notificationIncomingCall);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notificationSoundMessage:");
    if (this.notificationSoundMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.notificationSoundMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notificationSoundGroup:");
    if (this.notificationSoundGroup == null) {
      sb.append("null");
    } else {
      sb.append(this.notificationSoundGroup);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notificationDisabledWithSub:");
    sb.append(this.notificationDisabledWithSub);
    first = false;
    if (!first) sb.append(", ");
    sb.append("privacySyncContacts:");
    sb.append(this.privacySyncContacts);
    first = false;
    if (!first) sb.append(", ");
    sb.append("privacySearchByPhoneNumber:");
    sb.append(this.privacySearchByPhoneNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("privacySearchByUserid:");
    sb.append(this.privacySearchByUserid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("privacySearchByEmail:");
    sb.append(this.privacySearchByEmail);
    first = false;
    if (!first) sb.append(", ");
    sb.append("privacyAllowSecondaryDeviceLogin:");
    sb.append(this.privacyAllowSecondaryDeviceLogin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("privacyProfileImagePostToMyhome:");
    sb.append(this.privacyProfileImagePostToMyhome);
    first = false;
    if (!first) sb.append(", ");
    sb.append("privacyReceiveMessagesFromNotFriend:");
    sb.append(this.privacyReceiveMessagesFromNotFriend);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contactMyTicket:");
    if (this.contactMyTicket == null) {
      sb.append("null");
    } else {
      sb.append(this.contactMyTicket);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identityProvider:");
    if (this.identityProvider == null) {
      sb.append("null");
    } else {
      sb.append(this.identityProvider);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identityIdentifier:");
    if (this.identityIdentifier == null) {
      sb.append("null");
    } else {
      sb.append(this.identityIdentifier);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("snsAccounts:");
    if (this.snsAccounts == null) {
      sb.append("null");
    } else {
      sb.append(this.snsAccounts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phoneRegistration:");
    sb.append(this.phoneRegistration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("emailConfirmationStatus:");
    if (this.emailConfirmationStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.emailConfirmationStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("preferenceLocale:");
    if (this.preferenceLocale == null) {
      sb.append("null");
    } else {
      sb.append(this.preferenceLocale);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("customModes:");
    if (this.customModes == null) {
      sb.append("null");
    } else {
      sb.append(this.customModes);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SettingsStandardSchemeFactory implements SchemeFactory {
    public SettingsStandardScheme getScheme() {
      return new SettingsStandardScheme();
    }
  }

  private static class SettingsStandardScheme extends StandardScheme<Settings> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Settings struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 10: // NOTIFICATION_ENABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.notificationEnable = iprot.readBool();
              struct.setNotificationEnableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NOTIFICATION_MUTE_EXPIRATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.notificationMuteExpiration = iprot.readI64();
              struct.setNotificationMuteExpirationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // NOTIFICATION_NEW_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.notificationNewMessage = iprot.readBool();
              struct.setNotificationNewMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NOTIFICATION_GROUP_INVITATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.notificationGroupInvitation = iprot.readBool();
              struct.setNotificationGroupInvitationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // NOTIFICATION_SHOW_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.notificationShowMessage = iprot.readBool();
              struct.setNotificationShowMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // NOTIFICATION_INCOMING_CALL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.notificationIncomingCall = iprot.readBool();
              struct.setNotificationIncomingCallIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // NOTIFICATION_SOUND_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.notificationSoundMessage = iprot.readString();
              struct.setNotificationSoundMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // NOTIFICATION_SOUND_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.notificationSoundGroup = iprot.readString();
              struct.setNotificationSoundGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // NOTIFICATION_DISABLED_WITH_SUB
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.notificationDisabledWithSub = iprot.readBool();
              struct.setNotificationDisabledWithSubIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PRIVACY_SYNC_CONTACTS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.privacySyncContacts = iprot.readBool();
              struct.setPrivacySyncContactsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // PRIVACY_SEARCH_BY_PHONE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.privacySearchByPhoneNumber = iprot.readBool();
              struct.setPrivacySearchByPhoneNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PRIVACY_SEARCH_BY_USERID
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.privacySearchByUserid = iprot.readBool();
              struct.setPrivacySearchByUseridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // PRIVACY_SEARCH_BY_EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.privacySearchByEmail = iprot.readBool();
              struct.setPrivacySearchByEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.privacyAllowSecondaryDeviceLogin = iprot.readBool();
              struct.setPrivacyAllowSecondaryDeviceLoginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.privacyProfileImagePostToMyhome = iprot.readBool();
              struct.setPrivacyProfileImagePostToMyhomeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // PRIVACY_RECEIVE_MESSAGES_FROM_NOT_FRIEND
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.privacyReceiveMessagesFromNotFriend = iprot.readBool();
              struct.setPrivacyReceiveMessagesFromNotFriendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // CONTACT_MY_TICKET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contactMyTicket = iprot.readString();
              struct.setContactMyTicketIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // IDENTITY_PROVIDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.identityProvider = com.linecorp.thrift.IdentityProvider.findByValue(iprot.readI32());
              struct.setIdentityProviderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // IDENTITY_IDENTIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identityIdentifier = iprot.readString();
              struct.setIdentityIdentifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // SNS_ACCOUNTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map288 = iprot.readMapBegin();
                struct.snsAccounts = new HashMap<SnsIdType,String>(2*_map288.size);
                SnsIdType _key289;
                String _val290;
                for (int _i291 = 0; _i291 < _map288.size; ++_i291)
                {
                  _key289 = com.linecorp.thrift.SnsIdType.findByValue(iprot.readI32());
                  _val290 = iprot.readString();
                  struct.snsAccounts.put(_key289, _val290);
                }
                iprot.readMapEnd();
              }
              struct.setSnsAccountsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // PHONE_REGISTRATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.phoneRegistration = iprot.readBool();
              struct.setPhoneRegistrationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // EMAIL_CONFIRMATION_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.emailConfirmationStatus = com.linecorp.thrift.EmailConfirmationStatus.findByValue(iprot.readI32());
              struct.setEmailConfirmationStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // PREFERENCE_LOCALE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.preferenceLocale = iprot.readString();
              struct.setPreferenceLocaleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // CUSTOM_MODES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map292 = iprot.readMapBegin();
                struct.customModes = new HashMap<CustomMode,String>(2*_map292.size);
                CustomMode _key293;
                String _val294;
                for (int _i295 = 0; _i295 < _map292.size; ++_i295)
                {
                  _key293 = com.linecorp.thrift.CustomMode.findByValue(iprot.readI32());
                  _val294 = iprot.readString();
                  struct.customModes.put(_key293, _val294);
                }
                iprot.readMapEnd();
              }
              struct.setCustomModesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Settings struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NOTIFICATION_ENABLE_FIELD_DESC);
      oprot.writeBool(struct.notificationEnable);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTIFICATION_MUTE_EXPIRATION_FIELD_DESC);
      oprot.writeI64(struct.notificationMuteExpiration);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTIFICATION_NEW_MESSAGE_FIELD_DESC);
      oprot.writeBool(struct.notificationNewMessage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTIFICATION_GROUP_INVITATION_FIELD_DESC);
      oprot.writeBool(struct.notificationGroupInvitation);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTIFICATION_SHOW_MESSAGE_FIELD_DESC);
      oprot.writeBool(struct.notificationShowMessage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTIFICATION_INCOMING_CALL_FIELD_DESC);
      oprot.writeBool(struct.notificationIncomingCall);
      oprot.writeFieldEnd();
      if (struct.notificationSoundMessage != null) {
        oprot.writeFieldBegin(NOTIFICATION_SOUND_MESSAGE_FIELD_DESC);
        oprot.writeString(struct.notificationSoundMessage);
        oprot.writeFieldEnd();
      }
      if (struct.notificationSoundGroup != null) {
        oprot.writeFieldBegin(NOTIFICATION_SOUND_GROUP_FIELD_DESC);
        oprot.writeString(struct.notificationSoundGroup);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NOTIFICATION_DISABLED_WITH_SUB_FIELD_DESC);
      oprot.writeBool(struct.notificationDisabledWithSub);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIVACY_SYNC_CONTACTS_FIELD_DESC);
      oprot.writeBool(struct.privacySyncContacts);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIVACY_SEARCH_BY_PHONE_NUMBER_FIELD_DESC);
      oprot.writeBool(struct.privacySearchByPhoneNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIVACY_SEARCH_BY_USERID_FIELD_DESC);
      oprot.writeBool(struct.privacySearchByUserid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIVACY_SEARCH_BY_EMAIL_FIELD_DESC);
      oprot.writeBool(struct.privacySearchByEmail);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN_FIELD_DESC);
      oprot.writeBool(struct.privacyAllowSecondaryDeviceLogin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME_FIELD_DESC);
      oprot.writeBool(struct.privacyProfileImagePostToMyhome);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIVACY_RECEIVE_MESSAGES_FROM_NOT_FRIEND_FIELD_DESC);
      oprot.writeBool(struct.privacyReceiveMessagesFromNotFriend);
      oprot.writeFieldEnd();
      if (struct.contactMyTicket != null) {
        oprot.writeFieldBegin(CONTACT_MY_TICKET_FIELD_DESC);
        oprot.writeString(struct.contactMyTicket);
        oprot.writeFieldEnd();
      }
      if (struct.identityProvider != null) {
        oprot.writeFieldBegin(IDENTITY_PROVIDER_FIELD_DESC);
        oprot.writeI32(struct.identityProvider.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.identityIdentifier != null) {
        oprot.writeFieldBegin(IDENTITY_IDENTIFIER_FIELD_DESC);
        oprot.writeString(struct.identityIdentifier);
        oprot.writeFieldEnd();
      }
      if (struct.snsAccounts != null) {
        oprot.writeFieldBegin(SNS_ACCOUNTS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.snsAccounts.size()));
          for (Map.Entry<SnsIdType, String> _iter296 : struct.snsAccounts.entrySet())
          {
            oprot.writeI32(_iter296.getKey().getValue());
            oprot.writeString(_iter296.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PHONE_REGISTRATION_FIELD_DESC);
      oprot.writeBool(struct.phoneRegistration);
      oprot.writeFieldEnd();
      if (struct.emailConfirmationStatus != null) {
        oprot.writeFieldBegin(EMAIL_CONFIRMATION_STATUS_FIELD_DESC);
        oprot.writeI32(struct.emailConfirmationStatus.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.preferenceLocale != null) {
        oprot.writeFieldBegin(PREFERENCE_LOCALE_FIELD_DESC);
        oprot.writeString(struct.preferenceLocale);
        oprot.writeFieldEnd();
      }
      if (struct.customModes != null) {
        oprot.writeFieldBegin(CUSTOM_MODES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.customModes.size()));
          for (Map.Entry<CustomMode, String> _iter297 : struct.customModes.entrySet())
          {
            oprot.writeI32(_iter297.getKey().getValue());
            oprot.writeString(_iter297.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SettingsTupleSchemeFactory implements SchemeFactory {
    public SettingsTupleScheme getScheme() {
      return new SettingsTupleScheme();
    }
  }

  private static class SettingsTupleScheme extends TupleScheme<Settings> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Settings struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNotificationEnable()) {
        optionals.set(0);
      }
      if (struct.isSetNotificationMuteExpiration()) {
        optionals.set(1);
      }
      if (struct.isSetNotificationNewMessage()) {
        optionals.set(2);
      }
      if (struct.isSetNotificationGroupInvitation()) {
        optionals.set(3);
      }
      if (struct.isSetNotificationShowMessage()) {
        optionals.set(4);
      }
      if (struct.isSetNotificationIncomingCall()) {
        optionals.set(5);
      }
      if (struct.isSetNotificationSoundMessage()) {
        optionals.set(6);
      }
      if (struct.isSetNotificationSoundGroup()) {
        optionals.set(7);
      }
      if (struct.isSetNotificationDisabledWithSub()) {
        optionals.set(8);
      }
      if (struct.isSetPrivacySyncContacts()) {
        optionals.set(9);
      }
      if (struct.isSetPrivacySearchByPhoneNumber()) {
        optionals.set(10);
      }
      if (struct.isSetPrivacySearchByUserid()) {
        optionals.set(11);
      }
      if (struct.isSetPrivacySearchByEmail()) {
        optionals.set(12);
      }
      if (struct.isSetPrivacyAllowSecondaryDeviceLogin()) {
        optionals.set(13);
      }
      if (struct.isSetPrivacyProfileImagePostToMyhome()) {
        optionals.set(14);
      }
      if (struct.isSetPrivacyReceiveMessagesFromNotFriend()) {
        optionals.set(15);
      }
      if (struct.isSetContactMyTicket()) {
        optionals.set(16);
      }
      if (struct.isSetIdentityProvider()) {
        optionals.set(17);
      }
      if (struct.isSetIdentityIdentifier()) {
        optionals.set(18);
      }
      if (struct.isSetSnsAccounts()) {
        optionals.set(19);
      }
      if (struct.isSetPhoneRegistration()) {
        optionals.set(20);
      }
      if (struct.isSetEmailConfirmationStatus()) {
        optionals.set(21);
      }
      if (struct.isSetPreferenceLocale()) {
        optionals.set(22);
      }
      if (struct.isSetCustomModes()) {
        optionals.set(23);
      }
      oprot.writeBitSet(optionals, 24);
      if (struct.isSetNotificationEnable()) {
        oprot.writeBool(struct.notificationEnable);
      }
      if (struct.isSetNotificationMuteExpiration()) {
        oprot.writeI64(struct.notificationMuteExpiration);
      }
      if (struct.isSetNotificationNewMessage()) {
        oprot.writeBool(struct.notificationNewMessage);
      }
      if (struct.isSetNotificationGroupInvitation()) {
        oprot.writeBool(struct.notificationGroupInvitation);
      }
      if (struct.isSetNotificationShowMessage()) {
        oprot.writeBool(struct.notificationShowMessage);
      }
      if (struct.isSetNotificationIncomingCall()) {
        oprot.writeBool(struct.notificationIncomingCall);
      }
      if (struct.isSetNotificationSoundMessage()) {
        oprot.writeString(struct.notificationSoundMessage);
      }
      if (struct.isSetNotificationSoundGroup()) {
        oprot.writeString(struct.notificationSoundGroup);
      }
      if (struct.isSetNotificationDisabledWithSub()) {
        oprot.writeBool(struct.notificationDisabledWithSub);
      }
      if (struct.isSetPrivacySyncContacts()) {
        oprot.writeBool(struct.privacySyncContacts);
      }
      if (struct.isSetPrivacySearchByPhoneNumber()) {
        oprot.writeBool(struct.privacySearchByPhoneNumber);
      }
      if (struct.isSetPrivacySearchByUserid()) {
        oprot.writeBool(struct.privacySearchByUserid);
      }
      if (struct.isSetPrivacySearchByEmail()) {
        oprot.writeBool(struct.privacySearchByEmail);
      }
      if (struct.isSetPrivacyAllowSecondaryDeviceLogin()) {
        oprot.writeBool(struct.privacyAllowSecondaryDeviceLogin);
      }
      if (struct.isSetPrivacyProfileImagePostToMyhome()) {
        oprot.writeBool(struct.privacyProfileImagePostToMyhome);
      }
      if (struct.isSetPrivacyReceiveMessagesFromNotFriend()) {
        oprot.writeBool(struct.privacyReceiveMessagesFromNotFriend);
      }
      if (struct.isSetContactMyTicket()) {
        oprot.writeString(struct.contactMyTicket);
      }
      if (struct.isSetIdentityProvider()) {
        oprot.writeI32(struct.identityProvider.getValue());
      }
      if (struct.isSetIdentityIdentifier()) {
        oprot.writeString(struct.identityIdentifier);
      }
      if (struct.isSetSnsAccounts()) {
        {
          oprot.writeI32(struct.snsAccounts.size());
          for (Map.Entry<SnsIdType, String> _iter298 : struct.snsAccounts.entrySet())
          {
            oprot.writeI32(_iter298.getKey().getValue());
            oprot.writeString(_iter298.getValue());
          }
        }
      }
      if (struct.isSetPhoneRegistration()) {
        oprot.writeBool(struct.phoneRegistration);
      }
      if (struct.isSetEmailConfirmationStatus()) {
        oprot.writeI32(struct.emailConfirmationStatus.getValue());
      }
      if (struct.isSetPreferenceLocale()) {
        oprot.writeString(struct.preferenceLocale);
      }
      if (struct.isSetCustomModes()) {
        {
          oprot.writeI32(struct.customModes.size());
          for (Map.Entry<CustomMode, String> _iter299 : struct.customModes.entrySet())
          {
            oprot.writeI32(_iter299.getKey().getValue());
            oprot.writeString(_iter299.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Settings struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(24);
      if (incoming.get(0)) {
        struct.notificationEnable = iprot.readBool();
        struct.setNotificationEnableIsSet(true);
      }
      if (incoming.get(1)) {
        struct.notificationMuteExpiration = iprot.readI64();
        struct.setNotificationMuteExpirationIsSet(true);
      }
      if (incoming.get(2)) {
        struct.notificationNewMessage = iprot.readBool();
        struct.setNotificationNewMessageIsSet(true);
      }
      if (incoming.get(3)) {
        struct.notificationGroupInvitation = iprot.readBool();
        struct.setNotificationGroupInvitationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.notificationShowMessage = iprot.readBool();
        struct.setNotificationShowMessageIsSet(true);
      }
      if (incoming.get(5)) {
        struct.notificationIncomingCall = iprot.readBool();
        struct.setNotificationIncomingCallIsSet(true);
      }
      if (incoming.get(6)) {
        struct.notificationSoundMessage = iprot.readString();
        struct.setNotificationSoundMessageIsSet(true);
      }
      if (incoming.get(7)) {
        struct.notificationSoundGroup = iprot.readString();
        struct.setNotificationSoundGroupIsSet(true);
      }
      if (incoming.get(8)) {
        struct.notificationDisabledWithSub = iprot.readBool();
        struct.setNotificationDisabledWithSubIsSet(true);
      }
      if (incoming.get(9)) {
        struct.privacySyncContacts = iprot.readBool();
        struct.setPrivacySyncContactsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.privacySearchByPhoneNumber = iprot.readBool();
        struct.setPrivacySearchByPhoneNumberIsSet(true);
      }
      if (incoming.get(11)) {
        struct.privacySearchByUserid = iprot.readBool();
        struct.setPrivacySearchByUseridIsSet(true);
      }
      if (incoming.get(12)) {
        struct.privacySearchByEmail = iprot.readBool();
        struct.setPrivacySearchByEmailIsSet(true);
      }
      if (incoming.get(13)) {
        struct.privacyAllowSecondaryDeviceLogin = iprot.readBool();
        struct.setPrivacyAllowSecondaryDeviceLoginIsSet(true);
      }
      if (incoming.get(14)) {
        struct.privacyProfileImagePostToMyhome = iprot.readBool();
        struct.setPrivacyProfileImagePostToMyhomeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.privacyReceiveMessagesFromNotFriend = iprot.readBool();
        struct.setPrivacyReceiveMessagesFromNotFriendIsSet(true);
      }
      if (incoming.get(16)) {
        struct.contactMyTicket = iprot.readString();
        struct.setContactMyTicketIsSet(true);
      }
      if (incoming.get(17)) {
        struct.identityProvider = com.linecorp.thrift.IdentityProvider.findByValue(iprot.readI32());
        struct.setIdentityProviderIsSet(true);
      }
      if (incoming.get(18)) {
        struct.identityIdentifier = iprot.readString();
        struct.setIdentityIdentifierIsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TMap _map300 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.snsAccounts = new HashMap<SnsIdType,String>(2*_map300.size);
          SnsIdType _key301;
          String _val302;
          for (int _i303 = 0; _i303 < _map300.size; ++_i303)
          {
            _key301 = com.linecorp.thrift.SnsIdType.findByValue(iprot.readI32());
            _val302 = iprot.readString();
            struct.snsAccounts.put(_key301, _val302);
          }
        }
        struct.setSnsAccountsIsSet(true);
      }
      if (incoming.get(20)) {
        struct.phoneRegistration = iprot.readBool();
        struct.setPhoneRegistrationIsSet(true);
      }
      if (incoming.get(21)) {
        struct.emailConfirmationStatus = com.linecorp.thrift.EmailConfirmationStatus.findByValue(iprot.readI32());
        struct.setEmailConfirmationStatusIsSet(true);
      }
      if (incoming.get(22)) {
        struct.preferenceLocale = iprot.readString();
        struct.setPreferenceLocaleIsSet(true);
      }
      if (incoming.get(23)) {
        {
          org.apache.thrift.protocol.TMap _map304 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.customModes = new HashMap<CustomMode,String>(2*_map304.size);
          CustomMode _key305;
          String _val306;
          for (int _i307 = 0; _i307 < _map304.size; ++_i307)
          {
            _key305 = com.linecorp.thrift.CustomMode.findByValue(iprot.readI32());
            _val306 = iprot.readString();
            struct.customModes.put(_key305, _val306);
          }
        }
        struct.setCustomModesIsSet(true);
      }
    }
  }

}

