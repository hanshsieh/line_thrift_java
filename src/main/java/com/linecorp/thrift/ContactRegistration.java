/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.linecorp.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-04-08")
public class ContactRegistration implements org.apache.thrift.TBase<ContactRegistration, ContactRegistration._Fields>, java.io.Serializable, Cloneable, Comparable<ContactRegistration> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ContactRegistration");

  private static final org.apache.thrift.protocol.TField CONTACT_FIELD_DESC = new org.apache.thrift.protocol.TField("contact", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField LUID_FIELD_DESC = new org.apache.thrift.protocol.TField("luid", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CONTACT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("contactType", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField CONTACT_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("contactKey", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ContactRegistrationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ContactRegistrationTupleSchemeFactory());
  }

  private Contact contact; // required
  private String luid; // required
  private ContactType contactType; // required
  private String contactKey; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONTACT((short)1, "contact"),
    LUID((short)10, "luid"),
    /**
     * 
     * @see ContactType
     */
    CONTACT_TYPE((short)11, "contactType"),
    CONTACT_KEY((short)12, "contactKey");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONTACT
          return CONTACT;
        case 10: // LUID
          return LUID;
        case 11: // CONTACT_TYPE
          return CONTACT_TYPE;
        case 12: // CONTACT_KEY
          return CONTACT_KEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONTACT, new org.apache.thrift.meta_data.FieldMetaData("contact", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Contact.class)));
    tmpMap.put(_Fields.LUID, new org.apache.thrift.meta_data.FieldMetaData("luid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTACT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("contactType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ContactType.class)));
    tmpMap.put(_Fields.CONTACT_KEY, new org.apache.thrift.meta_data.FieldMetaData("contactKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ContactRegistration.class, metaDataMap);
  }

  public ContactRegistration() {
  }

  public ContactRegistration(
    Contact contact,
    String luid,
    ContactType contactType,
    String contactKey)
  {
    this();
    this.contact = contact;
    this.luid = luid;
    this.contactType = contactType;
    this.contactKey = contactKey;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ContactRegistration(ContactRegistration other) {
    if (other.isSetContact()) {
      this.contact = new Contact(other.contact);
    }
    if (other.isSetLuid()) {
      this.luid = other.luid;
    }
    if (other.isSetContactType()) {
      this.contactType = other.contactType;
    }
    if (other.isSetContactKey()) {
      this.contactKey = other.contactKey;
    }
  }

  public ContactRegistration deepCopy() {
    return new ContactRegistration(this);
  }

  @Override
  public void clear() {
    this.contact = null;
    this.luid = null;
    this.contactType = null;
    this.contactKey = null;
  }

  public Contact getContact() {
    return this.contact;
  }

  public void setContact(Contact contact) {
    this.contact = contact;
  }

  public void unsetContact() {
    this.contact = null;
  }

  /** Returns true if field contact is set (has been assigned a value) and false otherwise */
  public boolean isSetContact() {
    return this.contact != null;
  }

  public void setContactIsSet(boolean value) {
    if (!value) {
      this.contact = null;
    }
  }

  public String getLuid() {
    return this.luid;
  }

  public void setLuid(String luid) {
    this.luid = luid;
  }

  public void unsetLuid() {
    this.luid = null;
  }

  /** Returns true if field luid is set (has been assigned a value) and false otherwise */
  public boolean isSetLuid() {
    return this.luid != null;
  }

  public void setLuidIsSet(boolean value) {
    if (!value) {
      this.luid = null;
    }
  }

  /**
   * 
   * @see ContactType
   */
  public ContactType getContactType() {
    return this.contactType;
  }

  /**
   * 
   * @see ContactType
   */
  public void setContactType(ContactType contactType) {
    this.contactType = contactType;
  }

  public void unsetContactType() {
    this.contactType = null;
  }

  /** Returns true if field contactType is set (has been assigned a value) and false otherwise */
  public boolean isSetContactType() {
    return this.contactType != null;
  }

  public void setContactTypeIsSet(boolean value) {
    if (!value) {
      this.contactType = null;
    }
  }

  public String getContactKey() {
    return this.contactKey;
  }

  public void setContactKey(String contactKey) {
    this.contactKey = contactKey;
  }

  public void unsetContactKey() {
    this.contactKey = null;
  }

  /** Returns true if field contactKey is set (has been assigned a value) and false otherwise */
  public boolean isSetContactKey() {
    return this.contactKey != null;
  }

  public void setContactKeyIsSet(boolean value) {
    if (!value) {
      this.contactKey = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONTACT:
      if (value == null) {
        unsetContact();
      } else {
        setContact((Contact)value);
      }
      break;

    case LUID:
      if (value == null) {
        unsetLuid();
      } else {
        setLuid((String)value);
      }
      break;

    case CONTACT_TYPE:
      if (value == null) {
        unsetContactType();
      } else {
        setContactType((ContactType)value);
      }
      break;

    case CONTACT_KEY:
      if (value == null) {
        unsetContactKey();
      } else {
        setContactKey((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONTACT:
      return getContact();

    case LUID:
      return getLuid();

    case CONTACT_TYPE:
      return getContactType();

    case CONTACT_KEY:
      return getContactKey();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONTACT:
      return isSetContact();
    case LUID:
      return isSetLuid();
    case CONTACT_TYPE:
      return isSetContactType();
    case CONTACT_KEY:
      return isSetContactKey();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ContactRegistration)
      return this.equals((ContactRegistration)that);
    return false;
  }

  public boolean equals(ContactRegistration that) {
    if (that == null)
      return false;

    boolean this_present_contact = true && this.isSetContact();
    boolean that_present_contact = true && that.isSetContact();
    if (this_present_contact || that_present_contact) {
      if (!(this_present_contact && that_present_contact))
        return false;
      if (!this.contact.equals(that.contact))
        return false;
    }

    boolean this_present_luid = true && this.isSetLuid();
    boolean that_present_luid = true && that.isSetLuid();
    if (this_present_luid || that_present_luid) {
      if (!(this_present_luid && that_present_luid))
        return false;
      if (!this.luid.equals(that.luid))
        return false;
    }

    boolean this_present_contactType = true && this.isSetContactType();
    boolean that_present_contactType = true && that.isSetContactType();
    if (this_present_contactType || that_present_contactType) {
      if (!(this_present_contactType && that_present_contactType))
        return false;
      if (!this.contactType.equals(that.contactType))
        return false;
    }

    boolean this_present_contactKey = true && this.isSetContactKey();
    boolean that_present_contactKey = true && that.isSetContactKey();
    if (this_present_contactKey || that_present_contactKey) {
      if (!(this_present_contactKey && that_present_contactKey))
        return false;
      if (!this.contactKey.equals(that.contactKey))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_contact = true && (isSetContact());
    list.add(present_contact);
    if (present_contact)
      list.add(contact);

    boolean present_luid = true && (isSetLuid());
    list.add(present_luid);
    if (present_luid)
      list.add(luid);

    boolean present_contactType = true && (isSetContactType());
    list.add(present_contactType);
    if (present_contactType)
      list.add(contactType.getValue());

    boolean present_contactKey = true && (isSetContactKey());
    list.add(present_contactKey);
    if (present_contactKey)
      list.add(contactKey);

    return list.hashCode();
  }

  @Override
  public int compareTo(ContactRegistration other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetContact()).compareTo(other.isSetContact());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContact()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contact, other.contact);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLuid()).compareTo(other.isSetLuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.luid, other.luid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContactType()).compareTo(other.isSetContactType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContactType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contactType, other.contactType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContactKey()).compareTo(other.isSetContactKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContactKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contactKey, other.contactKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ContactRegistration(");
    boolean first = true;

    sb.append("contact:");
    if (this.contact == null) {
      sb.append("null");
    } else {
      sb.append(this.contact);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("luid:");
    if (this.luid == null) {
      sb.append("null");
    } else {
      sb.append(this.luid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contactType:");
    if (this.contactType == null) {
      sb.append("null");
    } else {
      sb.append(this.contactType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contactKey:");
    if (this.contactKey == null) {
      sb.append("null");
    } else {
      sb.append(this.contactKey);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (contact != null) {
      contact.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ContactRegistrationStandardSchemeFactory implements SchemeFactory {
    public ContactRegistrationStandardScheme getScheme() {
      return new ContactRegistrationStandardScheme();
    }
  }

  private static class ContactRegistrationStandardScheme extends StandardScheme<ContactRegistration> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ContactRegistration struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONTACT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.contact = new Contact();
              struct.contact.read(iprot);
              struct.setContactIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.luid = iprot.readString();
              struct.setLuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CONTACT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contactType = com.linecorp.thrift.ContactType.findByValue(iprot.readI32());
              struct.setContactTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CONTACT_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contactKey = iprot.readString();
              struct.setContactKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ContactRegistration struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.contact != null) {
        oprot.writeFieldBegin(CONTACT_FIELD_DESC);
        struct.contact.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.luid != null) {
        oprot.writeFieldBegin(LUID_FIELD_DESC);
        oprot.writeString(struct.luid);
        oprot.writeFieldEnd();
      }
      if (struct.contactType != null) {
        oprot.writeFieldBegin(CONTACT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.contactType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.contactKey != null) {
        oprot.writeFieldBegin(CONTACT_KEY_FIELD_DESC);
        oprot.writeString(struct.contactKey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ContactRegistrationTupleSchemeFactory implements SchemeFactory {
    public ContactRegistrationTupleScheme getScheme() {
      return new ContactRegistrationTupleScheme();
    }
  }

  private static class ContactRegistrationTupleScheme extends TupleScheme<ContactRegistration> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ContactRegistration struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetContact()) {
        optionals.set(0);
      }
      if (struct.isSetLuid()) {
        optionals.set(1);
      }
      if (struct.isSetContactType()) {
        optionals.set(2);
      }
      if (struct.isSetContactKey()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetContact()) {
        struct.contact.write(oprot);
      }
      if (struct.isSetLuid()) {
        oprot.writeString(struct.luid);
      }
      if (struct.isSetContactType()) {
        oprot.writeI32(struct.contactType.getValue());
      }
      if (struct.isSetContactKey()) {
        oprot.writeString(struct.contactKey);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ContactRegistration struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.contact = new Contact();
        struct.contact.read(iprot);
        struct.setContactIsSet(true);
      }
      if (incoming.get(1)) {
        struct.luid = iprot.readString();
        struct.setLuidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.contactType = com.linecorp.thrift.ContactType.findByValue(iprot.readI32());
        struct.setContactTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.contactKey = iprot.readString();
        struct.setContactKeyIsSet(true);
      }
    }
  }

}

