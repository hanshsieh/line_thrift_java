/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package line.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-04-15")
public class ProximityMatchCandidateResult implements org.apache.thrift.TBase<ProximityMatchCandidateResult, ProximityMatchCandidateResult._Fields>, java.io.Serializable, Cloneable, Comparable<ProximityMatchCandidateResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProximityMatchCandidateResult");

  private static final org.apache.thrift.protocol.TField USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("users", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField BUDDIES_FIELD_DESC = new org.apache.thrift.protocol.TField("buddies", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProximityMatchCandidateResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProximityMatchCandidateResultTupleSchemeFactory());
  }

  private List<Contact> users; // required
  private List<Contact> buddies; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USERS((short)1, "users"),
    BUDDIES((short)2, "buddies");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USERS
          return USERS;
        case 2: // BUDDIES
          return BUDDIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USERS, new org.apache.thrift.meta_data.FieldMetaData("users", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Contact.class))));
    tmpMap.put(_Fields.BUDDIES, new org.apache.thrift.meta_data.FieldMetaData("buddies", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Contact.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProximityMatchCandidateResult.class, metaDataMap);
  }

  public ProximityMatchCandidateResult() {
  }

  public ProximityMatchCandidateResult(
    List<Contact> users,
    List<Contact> buddies)
  {
    this();
    this.users = users;
    this.buddies = buddies;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProximityMatchCandidateResult(ProximityMatchCandidateResult other) {
    if (other.isSetUsers()) {
      List<Contact> __this__users = new ArrayList<Contact>(other.users.size());
      for (Contact other_element : other.users) {
        __this__users.add(new Contact(other_element));
      }
      this.users = __this__users;
    }
    if (other.isSetBuddies()) {
      List<Contact> __this__buddies = new ArrayList<Contact>(other.buddies.size());
      for (Contact other_element : other.buddies) {
        __this__buddies.add(new Contact(other_element));
      }
      this.buddies = __this__buddies;
    }
  }

  public ProximityMatchCandidateResult deepCopy() {
    return new ProximityMatchCandidateResult(this);
  }

  @Override
  public void clear() {
    this.users = null;
    this.buddies = null;
  }

  public int getUsersSize() {
    return (this.users == null) ? 0 : this.users.size();
  }

  public java.util.Iterator<Contact> getUsersIterator() {
    return (this.users == null) ? null : this.users.iterator();
  }

  public void addToUsers(Contact elem) {
    if (this.users == null) {
      this.users = new ArrayList<Contact>();
    }
    this.users.add(elem);
  }

  public List<Contact> getUsers() {
    return this.users;
  }

  public void setUsers(List<Contact> users) {
    this.users = users;
  }

  public void unsetUsers() {
    this.users = null;
  }

  /** Returns true if field users is set (has been assigned a value) and false otherwise */
  public boolean isSetUsers() {
    return this.users != null;
  }

  public void setUsersIsSet(boolean value) {
    if (!value) {
      this.users = null;
    }
  }

  public int getBuddiesSize() {
    return (this.buddies == null) ? 0 : this.buddies.size();
  }

  public java.util.Iterator<Contact> getBuddiesIterator() {
    return (this.buddies == null) ? null : this.buddies.iterator();
  }

  public void addToBuddies(Contact elem) {
    if (this.buddies == null) {
      this.buddies = new ArrayList<Contact>();
    }
    this.buddies.add(elem);
  }

  public List<Contact> getBuddies() {
    return this.buddies;
  }

  public void setBuddies(List<Contact> buddies) {
    this.buddies = buddies;
  }

  public void unsetBuddies() {
    this.buddies = null;
  }

  /** Returns true if field buddies is set (has been assigned a value) and false otherwise */
  public boolean isSetBuddies() {
    return this.buddies != null;
  }

  public void setBuddiesIsSet(boolean value) {
    if (!value) {
      this.buddies = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USERS:
      if (value == null) {
        unsetUsers();
      } else {
        setUsers((List<Contact>)value);
      }
      break;

    case BUDDIES:
      if (value == null) {
        unsetBuddies();
      } else {
        setBuddies((List<Contact>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USERS:
      return getUsers();

    case BUDDIES:
      return getBuddies();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USERS:
      return isSetUsers();
    case BUDDIES:
      return isSetBuddies();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProximityMatchCandidateResult)
      return this.equals((ProximityMatchCandidateResult)that);
    return false;
  }

  public boolean equals(ProximityMatchCandidateResult that) {
    if (that == null)
      return false;

    boolean this_present_users = true && this.isSetUsers();
    boolean that_present_users = true && that.isSetUsers();
    if (this_present_users || that_present_users) {
      if (!(this_present_users && that_present_users))
        return false;
      if (!this.users.equals(that.users))
        return false;
    }

    boolean this_present_buddies = true && this.isSetBuddies();
    boolean that_present_buddies = true && that.isSetBuddies();
    if (this_present_buddies || that_present_buddies) {
      if (!(this_present_buddies && that_present_buddies))
        return false;
      if (!this.buddies.equals(that.buddies))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_users = true && (isSetUsers());
    list.add(present_users);
    if (present_users)
      list.add(users);

    boolean present_buddies = true && (isSetBuddies());
    list.add(present_buddies);
    if (present_buddies)
      list.add(buddies);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProximityMatchCandidateResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUsers()).compareTo(other.isSetUsers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.users, other.users);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuddies()).compareTo(other.isSetBuddies());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuddies()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buddies, other.buddies);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProximityMatchCandidateResult(");
    boolean first = true;

    sb.append("users:");
    if (this.users == null) {
      sb.append("null");
    } else {
      sb.append(this.users);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buddies:");
    if (this.buddies == null) {
      sb.append("null");
    } else {
      sb.append(this.buddies);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProximityMatchCandidateResultStandardSchemeFactory implements SchemeFactory {
    public ProximityMatchCandidateResultStandardScheme getScheme() {
      return new ProximityMatchCandidateResultStandardScheme();
    }
  }

  private static class ProximityMatchCandidateResultStandardScheme extends StandardScheme<ProximityMatchCandidateResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProximityMatchCandidateResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list264 = iprot.readListBegin();
                struct.users = new ArrayList<Contact>(_list264.size);
                Contact _elem265;
                for (int _i266 = 0; _i266 < _list264.size; ++_i266)
                {
                  _elem265 = new Contact();
                  _elem265.read(iprot);
                  struct.users.add(_elem265);
                }
                iprot.readListEnd();
              }
              struct.setUsersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BUDDIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list267 = iprot.readListBegin();
                struct.buddies = new ArrayList<Contact>(_list267.size);
                Contact _elem268;
                for (int _i269 = 0; _i269 < _list267.size; ++_i269)
                {
                  _elem268 = new Contact();
                  _elem268.read(iprot);
                  struct.buddies.add(_elem268);
                }
                iprot.readListEnd();
              }
              struct.setBuddiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProximityMatchCandidateResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.users != null) {
        oprot.writeFieldBegin(USERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.users.size()));
          for (Contact _iter270 : struct.users)
          {
            _iter270.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.buddies != null) {
        oprot.writeFieldBegin(BUDDIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.buddies.size()));
          for (Contact _iter271 : struct.buddies)
          {
            _iter271.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProximityMatchCandidateResultTupleSchemeFactory implements SchemeFactory {
    public ProximityMatchCandidateResultTupleScheme getScheme() {
      return new ProximityMatchCandidateResultTupleScheme();
    }
  }

  private static class ProximityMatchCandidateResultTupleScheme extends TupleScheme<ProximityMatchCandidateResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProximityMatchCandidateResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUsers()) {
        optionals.set(0);
      }
      if (struct.isSetBuddies()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetUsers()) {
        {
          oprot.writeI32(struct.users.size());
          for (Contact _iter272 : struct.users)
          {
            _iter272.write(oprot);
          }
        }
      }
      if (struct.isSetBuddies()) {
        {
          oprot.writeI32(struct.buddies.size());
          for (Contact _iter273 : struct.buddies)
          {
            _iter273.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProximityMatchCandidateResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list274 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.users = new ArrayList<Contact>(_list274.size);
          Contact _elem275;
          for (int _i276 = 0; _i276 < _list274.size; ++_i276)
          {
            _elem275 = new Contact();
            _elem275.read(iprot);
            struct.users.add(_elem275);
          }
        }
        struct.setUsersIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list277 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.buddies = new ArrayList<Contact>(_list277.size);
          Contact _elem278;
          for (int _i279 = 0; _i279 < _list277.size; ++_i279)
          {
            _elem278 = new Contact();
            _elem278.read(iprot);
            struct.buddies.add(_elem278);
          }
        }
        struct.setBuddiesIsSet(true);
      }
    }
  }

}

