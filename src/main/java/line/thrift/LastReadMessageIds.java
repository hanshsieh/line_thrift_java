/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package line.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-04-15")
public class LastReadMessageIds implements org.apache.thrift.TBase<LastReadMessageIds, LastReadMessageIds._Fields>, java.io.Serializable, Cloneable, Comparable<LastReadMessageIds> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LastReadMessageIds");

  private static final org.apache.thrift.protocol.TField CHAT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chatId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LAST_READ_MESSAGE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("lastReadMessageIds", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LastReadMessageIdsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LastReadMessageIdsTupleSchemeFactory());
  }

  private String chatId; // required
  private List<LastReadMessageId> lastReadMessageIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHAT_ID((short)1, "chatId"),
    LAST_READ_MESSAGE_IDS((short)2, "lastReadMessageIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHAT_ID
          return CHAT_ID;
        case 2: // LAST_READ_MESSAGE_IDS
          return LAST_READ_MESSAGE_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHAT_ID, new org.apache.thrift.meta_data.FieldMetaData("chatId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_READ_MESSAGE_IDS, new org.apache.thrift.meta_data.FieldMetaData("lastReadMessageIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LastReadMessageId.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LastReadMessageIds.class, metaDataMap);
  }

  public LastReadMessageIds() {
  }

  public LastReadMessageIds(
    String chatId,
    List<LastReadMessageId> lastReadMessageIds)
  {
    this();
    this.chatId = chatId;
    this.lastReadMessageIds = lastReadMessageIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LastReadMessageIds(LastReadMessageIds other) {
    if (other.isSetChatId()) {
      this.chatId = other.chatId;
    }
    if (other.isSetLastReadMessageIds()) {
      List<LastReadMessageId> __this__lastReadMessageIds = new ArrayList<LastReadMessageId>(other.lastReadMessageIds.size());
      for (LastReadMessageId other_element : other.lastReadMessageIds) {
        __this__lastReadMessageIds.add(new LastReadMessageId(other_element));
      }
      this.lastReadMessageIds = __this__lastReadMessageIds;
    }
  }

  public LastReadMessageIds deepCopy() {
    return new LastReadMessageIds(this);
  }

  @Override
  public void clear() {
    this.chatId = null;
    this.lastReadMessageIds = null;
  }

  public String getChatId() {
    return this.chatId;
  }

  public void setChatId(String chatId) {
    this.chatId = chatId;
  }

  public void unsetChatId() {
    this.chatId = null;
  }

  /** Returns true if field chatId is set (has been assigned a value) and false otherwise */
  public boolean isSetChatId() {
    return this.chatId != null;
  }

  public void setChatIdIsSet(boolean value) {
    if (!value) {
      this.chatId = null;
    }
  }

  public int getLastReadMessageIdsSize() {
    return (this.lastReadMessageIds == null) ? 0 : this.lastReadMessageIds.size();
  }

  public java.util.Iterator<LastReadMessageId> getLastReadMessageIdsIterator() {
    return (this.lastReadMessageIds == null) ? null : this.lastReadMessageIds.iterator();
  }

  public void addToLastReadMessageIds(LastReadMessageId elem) {
    if (this.lastReadMessageIds == null) {
      this.lastReadMessageIds = new ArrayList<LastReadMessageId>();
    }
    this.lastReadMessageIds.add(elem);
  }

  public List<LastReadMessageId> getLastReadMessageIds() {
    return this.lastReadMessageIds;
  }

  public void setLastReadMessageIds(List<LastReadMessageId> lastReadMessageIds) {
    this.lastReadMessageIds = lastReadMessageIds;
  }

  public void unsetLastReadMessageIds() {
    this.lastReadMessageIds = null;
  }

  /** Returns true if field lastReadMessageIds is set (has been assigned a value) and false otherwise */
  public boolean isSetLastReadMessageIds() {
    return this.lastReadMessageIds != null;
  }

  public void setLastReadMessageIdsIsSet(boolean value) {
    if (!value) {
      this.lastReadMessageIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHAT_ID:
      if (value == null) {
        unsetChatId();
      } else {
        setChatId((String)value);
      }
      break;

    case LAST_READ_MESSAGE_IDS:
      if (value == null) {
        unsetLastReadMessageIds();
      } else {
        setLastReadMessageIds((List<LastReadMessageId>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHAT_ID:
      return getChatId();

    case LAST_READ_MESSAGE_IDS:
      return getLastReadMessageIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHAT_ID:
      return isSetChatId();
    case LAST_READ_MESSAGE_IDS:
      return isSetLastReadMessageIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LastReadMessageIds)
      return this.equals((LastReadMessageIds)that);
    return false;
  }

  public boolean equals(LastReadMessageIds that) {
    if (that == null)
      return false;

    boolean this_present_chatId = true && this.isSetChatId();
    boolean that_present_chatId = true && that.isSetChatId();
    if (this_present_chatId || that_present_chatId) {
      if (!(this_present_chatId && that_present_chatId))
        return false;
      if (!this.chatId.equals(that.chatId))
        return false;
    }

    boolean this_present_lastReadMessageIds = true && this.isSetLastReadMessageIds();
    boolean that_present_lastReadMessageIds = true && that.isSetLastReadMessageIds();
    if (this_present_lastReadMessageIds || that_present_lastReadMessageIds) {
      if (!(this_present_lastReadMessageIds && that_present_lastReadMessageIds))
        return false;
      if (!this.lastReadMessageIds.equals(that.lastReadMessageIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_chatId = true && (isSetChatId());
    list.add(present_chatId);
    if (present_chatId)
      list.add(chatId);

    boolean present_lastReadMessageIds = true && (isSetLastReadMessageIds());
    list.add(present_lastReadMessageIds);
    if (present_lastReadMessageIds)
      list.add(lastReadMessageIds);

    return list.hashCode();
  }

  @Override
  public int compareTo(LastReadMessageIds other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetChatId()).compareTo(other.isSetChatId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChatId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chatId, other.chatId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastReadMessageIds()).compareTo(other.isSetLastReadMessageIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastReadMessageIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastReadMessageIds, other.lastReadMessageIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LastReadMessageIds(");
    boolean first = true;

    sb.append("chatId:");
    if (this.chatId == null) {
      sb.append("null");
    } else {
      sb.append(this.chatId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastReadMessageIds:");
    if (this.lastReadMessageIds == null) {
      sb.append("null");
    } else {
      sb.append(this.lastReadMessageIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LastReadMessageIdsStandardSchemeFactory implements SchemeFactory {
    public LastReadMessageIdsStandardScheme getScheme() {
      return new LastReadMessageIdsStandardScheme();
    }
  }

  private static class LastReadMessageIdsStandardScheme extends StandardScheme<LastReadMessageIds> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LastReadMessageIds struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHAT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chatId = iprot.readString();
              struct.setChatIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LAST_READ_MESSAGE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list184 = iprot.readListBegin();
                struct.lastReadMessageIds = new ArrayList<LastReadMessageId>(_list184.size);
                LastReadMessageId _elem185;
                for (int _i186 = 0; _i186 < _list184.size; ++_i186)
                {
                  _elem185 = new LastReadMessageId();
                  _elem185.read(iprot);
                  struct.lastReadMessageIds.add(_elem185);
                }
                iprot.readListEnd();
              }
              struct.setLastReadMessageIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LastReadMessageIds struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.chatId != null) {
        oprot.writeFieldBegin(CHAT_ID_FIELD_DESC);
        oprot.writeString(struct.chatId);
        oprot.writeFieldEnd();
      }
      if (struct.lastReadMessageIds != null) {
        oprot.writeFieldBegin(LAST_READ_MESSAGE_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.lastReadMessageIds.size()));
          for (LastReadMessageId _iter187 : struct.lastReadMessageIds)
          {
            _iter187.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LastReadMessageIdsTupleSchemeFactory implements SchemeFactory {
    public LastReadMessageIdsTupleScheme getScheme() {
      return new LastReadMessageIdsTupleScheme();
    }
  }

  private static class LastReadMessageIdsTupleScheme extends TupleScheme<LastReadMessageIds> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LastReadMessageIds struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetChatId()) {
        optionals.set(0);
      }
      if (struct.isSetLastReadMessageIds()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetChatId()) {
        oprot.writeString(struct.chatId);
      }
      if (struct.isSetLastReadMessageIds()) {
        {
          oprot.writeI32(struct.lastReadMessageIds.size());
          for (LastReadMessageId _iter188 : struct.lastReadMessageIds)
          {
            _iter188.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LastReadMessageIds struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.chatId = iprot.readString();
        struct.setChatIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list189 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.lastReadMessageIds = new ArrayList<LastReadMessageId>(_list189.size);
          LastReadMessageId _elem190;
          for (int _i191 = 0; _i191 < _list189.size; ++_i191)
          {
            _elem190 = new LastReadMessageId();
            _elem190.read(iprot);
            struct.lastReadMessageIds.add(_elem190);
          }
        }
        struct.setLastReadMessageIdsIsSet(true);
      }
    }
  }

}

