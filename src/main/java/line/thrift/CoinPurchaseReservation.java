/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package line.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-04-08")
public class CoinPurchaseReservation implements org.apache.thrift.TBase<CoinPurchaseReservation, CoinPurchaseReservation._Fields>, java.io.Serializable, Cloneable, Comparable<CoinPurchaseReservation> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CoinPurchaseReservation");

  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("country", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField APP_STORE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("appStoreCode", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("language", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("pgCode", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField REDIRECT_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("redirectUrl", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CoinPurchaseReservationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CoinPurchaseReservationTupleSchemeFactory());
  }

  private String productId; // required
  private String country; // required
  private String currency; // required
  private String price; // required
  private PaymentType appStoreCode; // required
  private String language; // required
  private PaymentPgType pgCode; // required
  private String redirectUrl; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRODUCT_ID((short)1, "productId"),
    COUNTRY((short)2, "country"),
    CURRENCY((short)3, "currency"),
    PRICE((short)4, "price"),
    /**
     * 
     * @see PaymentType
     */
    APP_STORE_CODE((short)5, "appStoreCode"),
    LANGUAGE((short)6, "language"),
    /**
     * 
     * @see PaymentPgType
     */
    PG_CODE((short)7, "pgCode"),
    REDIRECT_URL((short)8, "redirectUrl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT_ID
          return PRODUCT_ID;
        case 2: // COUNTRY
          return COUNTRY;
        case 3: // CURRENCY
          return CURRENCY;
        case 4: // PRICE
          return PRICE;
        case 5: // APP_STORE_CODE
          return APP_STORE_CODE;
        case 6: // LANGUAGE
          return LANGUAGE;
        case 7: // PG_CODE
          return PG_CODE;
        case 8: // REDIRECT_URL
          return REDIRECT_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNTRY, new org.apache.thrift.meta_data.FieldMetaData("country", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_STORE_CODE, new org.apache.thrift.meta_data.FieldMetaData("appStoreCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PaymentType.class)));
    tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("language", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PG_CODE, new org.apache.thrift.meta_data.FieldMetaData("pgCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PaymentPgType.class)));
    tmpMap.put(_Fields.REDIRECT_URL, new org.apache.thrift.meta_data.FieldMetaData("redirectUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CoinPurchaseReservation.class, metaDataMap);
  }

  public CoinPurchaseReservation() {
  }

  public CoinPurchaseReservation(
    String productId,
    String country,
    String currency,
    String price,
    PaymentType appStoreCode,
    String language,
    PaymentPgType pgCode,
    String redirectUrl)
  {
    this();
    this.productId = productId;
    this.country = country;
    this.currency = currency;
    this.price = price;
    this.appStoreCode = appStoreCode;
    this.language = language;
    this.pgCode = pgCode;
    this.redirectUrl = redirectUrl;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CoinPurchaseReservation(CoinPurchaseReservation other) {
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    if (other.isSetCountry()) {
      this.country = other.country;
    }
    if (other.isSetCurrency()) {
      this.currency = other.currency;
    }
    if (other.isSetPrice()) {
      this.price = other.price;
    }
    if (other.isSetAppStoreCode()) {
      this.appStoreCode = other.appStoreCode;
    }
    if (other.isSetLanguage()) {
      this.language = other.language;
    }
    if (other.isSetPgCode()) {
      this.pgCode = other.pgCode;
    }
    if (other.isSetRedirectUrl()) {
      this.redirectUrl = other.redirectUrl;
    }
  }

  public CoinPurchaseReservation deepCopy() {
    return new CoinPurchaseReservation(this);
  }

  @Override
  public void clear() {
    this.productId = null;
    this.country = null;
    this.currency = null;
    this.price = null;
    this.appStoreCode = null;
    this.language = null;
    this.pgCode = null;
    this.redirectUrl = null;
  }

  public String getProductId() {
    return this.productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  public String getCountry() {
    return this.country;
  }

  public void setCountry(String country) {
    this.country = country;
  }

  public void unsetCountry() {
    this.country = null;
  }

  /** Returns true if field country is set (has been assigned a value) and false otherwise */
  public boolean isSetCountry() {
    return this.country != null;
  }

  public void setCountryIsSet(boolean value) {
    if (!value) {
      this.country = null;
    }
  }

  public String getCurrency() {
    return this.currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  public String getPrice() {
    return this.price;
  }

  public void setPrice(String price) {
    this.price = price;
  }

  public void unsetPrice() {
    this.price = null;
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return this.price != null;
  }

  public void setPriceIsSet(boolean value) {
    if (!value) {
      this.price = null;
    }
  }

  /**
   * 
   * @see PaymentType
   */
  public PaymentType getAppStoreCode() {
    return this.appStoreCode;
  }

  /**
   * 
   * @see PaymentType
   */
  public void setAppStoreCode(PaymentType appStoreCode) {
    this.appStoreCode = appStoreCode;
  }

  public void unsetAppStoreCode() {
    this.appStoreCode = null;
  }

  /** Returns true if field appStoreCode is set (has been assigned a value) and false otherwise */
  public boolean isSetAppStoreCode() {
    return this.appStoreCode != null;
  }

  public void setAppStoreCodeIsSet(boolean value) {
    if (!value) {
      this.appStoreCode = null;
    }
  }

  public String getLanguage() {
    return this.language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }

  public void unsetLanguage() {
    this.language = null;
  }

  /** Returns true if field language is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguage() {
    return this.language != null;
  }

  public void setLanguageIsSet(boolean value) {
    if (!value) {
      this.language = null;
    }
  }

  /**
   * 
   * @see PaymentPgType
   */
  public PaymentPgType getPgCode() {
    return this.pgCode;
  }

  /**
   * 
   * @see PaymentPgType
   */
  public void setPgCode(PaymentPgType pgCode) {
    this.pgCode = pgCode;
  }

  public void unsetPgCode() {
    this.pgCode = null;
  }

  /** Returns true if field pgCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPgCode() {
    return this.pgCode != null;
  }

  public void setPgCodeIsSet(boolean value) {
    if (!value) {
      this.pgCode = null;
    }
  }

  public String getRedirectUrl() {
    return this.redirectUrl;
  }

  public void setRedirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }

  public void unsetRedirectUrl() {
    this.redirectUrl = null;
  }

  /** Returns true if field redirectUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetRedirectUrl() {
    return this.redirectUrl != null;
  }

  public void setRedirectUrlIsSet(boolean value) {
    if (!value) {
      this.redirectUrl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;

    case COUNTRY:
      if (value == null) {
        unsetCountry();
      } else {
        setCountry((String)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((String)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((String)value);
      }
      break;

    case APP_STORE_CODE:
      if (value == null) {
        unsetAppStoreCode();
      } else {
        setAppStoreCode((PaymentType)value);
      }
      break;

    case LANGUAGE:
      if (value == null) {
        unsetLanguage();
      } else {
        setLanguage((String)value);
      }
      break;

    case PG_CODE:
      if (value == null) {
        unsetPgCode();
      } else {
        setPgCode((PaymentPgType)value);
      }
      break;

    case REDIRECT_URL:
      if (value == null) {
        unsetRedirectUrl();
      } else {
        setRedirectUrl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT_ID:
      return getProductId();

    case COUNTRY:
      return getCountry();

    case CURRENCY:
      return getCurrency();

    case PRICE:
      return getPrice();

    case APP_STORE_CODE:
      return getAppStoreCode();

    case LANGUAGE:
      return getLanguage();

    case PG_CODE:
      return getPgCode();

    case REDIRECT_URL:
      return getRedirectUrl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT_ID:
      return isSetProductId();
    case COUNTRY:
      return isSetCountry();
    case CURRENCY:
      return isSetCurrency();
    case PRICE:
      return isSetPrice();
    case APP_STORE_CODE:
      return isSetAppStoreCode();
    case LANGUAGE:
      return isSetLanguage();
    case PG_CODE:
      return isSetPgCode();
    case REDIRECT_URL:
      return isSetRedirectUrl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CoinPurchaseReservation)
      return this.equals((CoinPurchaseReservation)that);
    return false;
  }

  public boolean equals(CoinPurchaseReservation that) {
    if (that == null)
      return false;

    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }

    boolean this_present_country = true && this.isSetCountry();
    boolean that_present_country = true && that.isSetCountry();
    if (this_present_country || that_present_country) {
      if (!(this_present_country && that_present_country))
        return false;
      if (!this.country.equals(that.country))
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_price = true && this.isSetPrice();
    boolean that_present_price = true && that.isSetPrice();
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (!this.price.equals(that.price))
        return false;
    }

    boolean this_present_appStoreCode = true && this.isSetAppStoreCode();
    boolean that_present_appStoreCode = true && that.isSetAppStoreCode();
    if (this_present_appStoreCode || that_present_appStoreCode) {
      if (!(this_present_appStoreCode && that_present_appStoreCode))
        return false;
      if (!this.appStoreCode.equals(that.appStoreCode))
        return false;
    }

    boolean this_present_language = true && this.isSetLanguage();
    boolean that_present_language = true && that.isSetLanguage();
    if (this_present_language || that_present_language) {
      if (!(this_present_language && that_present_language))
        return false;
      if (!this.language.equals(that.language))
        return false;
    }

    boolean this_present_pgCode = true && this.isSetPgCode();
    boolean that_present_pgCode = true && that.isSetPgCode();
    if (this_present_pgCode || that_present_pgCode) {
      if (!(this_present_pgCode && that_present_pgCode))
        return false;
      if (!this.pgCode.equals(that.pgCode))
        return false;
    }

    boolean this_present_redirectUrl = true && this.isSetRedirectUrl();
    boolean that_present_redirectUrl = true && that.isSetRedirectUrl();
    if (this_present_redirectUrl || that_present_redirectUrl) {
      if (!(this_present_redirectUrl && that_present_redirectUrl))
        return false;
      if (!this.redirectUrl.equals(that.redirectUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_productId = true && (isSetProductId());
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_country = true && (isSetCountry());
    list.add(present_country);
    if (present_country)
      list.add(country);

    boolean present_currency = true && (isSetCurrency());
    list.add(present_currency);
    if (present_currency)
      list.add(currency);

    boolean present_price = true && (isSetPrice());
    list.add(present_price);
    if (present_price)
      list.add(price);

    boolean present_appStoreCode = true && (isSetAppStoreCode());
    list.add(present_appStoreCode);
    if (present_appStoreCode)
      list.add(appStoreCode.getValue());

    boolean present_language = true && (isSetLanguage());
    list.add(present_language);
    if (present_language)
      list.add(language);

    boolean present_pgCode = true && (isSetPgCode());
    list.add(present_pgCode);
    if (present_pgCode)
      list.add(pgCode.getValue());

    boolean present_redirectUrl = true && (isSetRedirectUrl());
    list.add(present_redirectUrl);
    if (present_redirectUrl)
      list.add(redirectUrl);

    return list.hashCode();
  }

  @Override
  public int compareTo(CoinPurchaseReservation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountry()).compareTo(other.isSetCountry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.country, other.country);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppStoreCode()).compareTo(other.isSetAppStoreCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppStoreCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appStoreCode, other.appStoreCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLanguage()).compareTo(other.isSetLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.language, other.language);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPgCode()).compareTo(other.isSetPgCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPgCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pgCode, other.pgCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRedirectUrl()).compareTo(other.isSetRedirectUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRedirectUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.redirectUrl, other.redirectUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CoinPurchaseReservation(");
    boolean first = true;

    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("country:");
    if (this.country == null) {
      sb.append("null");
    } else {
      sb.append(this.country);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currency:");
    if (this.currency == null) {
      sb.append("null");
    } else {
      sb.append(this.currency);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    if (this.price == null) {
      sb.append("null");
    } else {
      sb.append(this.price);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appStoreCode:");
    if (this.appStoreCode == null) {
      sb.append("null");
    } else {
      sb.append(this.appStoreCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("language:");
    if (this.language == null) {
      sb.append("null");
    } else {
      sb.append(this.language);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pgCode:");
    if (this.pgCode == null) {
      sb.append("null");
    } else {
      sb.append(this.pgCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("redirectUrl:");
    if (this.redirectUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.redirectUrl);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CoinPurchaseReservationStandardSchemeFactory implements SchemeFactory {
    public CoinPurchaseReservationStandardScheme getScheme() {
      return new CoinPurchaseReservationStandardScheme();
    }
  }

  private static class CoinPurchaseReservationStandardScheme extends StandardScheme<CoinPurchaseReservation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CoinPurchaseReservation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productId = iprot.readString();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COUNTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.country = iprot.readString();
              struct.setCountryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currency = iprot.readString();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.price = iprot.readString();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // APP_STORE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appStoreCode = PaymentType.findByValue(iprot.readI32());
              struct.setAppStoreCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.language = iprot.readString();
              struct.setLanguageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PG_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pgCode = PaymentPgType.findByValue(iprot.readI32());
              struct.setPgCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REDIRECT_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.redirectUrl = iprot.readString();
              struct.setRedirectUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CoinPurchaseReservation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.productId != null) {
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeString(struct.productId);
        oprot.writeFieldEnd();
      }
      if (struct.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(struct.country);
        oprot.writeFieldEnd();
      }
      if (struct.currency != null) {
        oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
        oprot.writeString(struct.currency);
        oprot.writeFieldEnd();
      }
      if (struct.price != null) {
        oprot.writeFieldBegin(PRICE_FIELD_DESC);
        oprot.writeString(struct.price);
        oprot.writeFieldEnd();
      }
      if (struct.appStoreCode != null) {
        oprot.writeFieldBegin(APP_STORE_CODE_FIELD_DESC);
        oprot.writeI32(struct.appStoreCode.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(struct.language);
        oprot.writeFieldEnd();
      }
      if (struct.pgCode != null) {
        oprot.writeFieldBegin(PG_CODE_FIELD_DESC);
        oprot.writeI32(struct.pgCode.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.redirectUrl != null) {
        oprot.writeFieldBegin(REDIRECT_URL_FIELD_DESC);
        oprot.writeString(struct.redirectUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CoinPurchaseReservationTupleSchemeFactory implements SchemeFactory {
    public CoinPurchaseReservationTupleScheme getScheme() {
      return new CoinPurchaseReservationTupleScheme();
    }
  }

  private static class CoinPurchaseReservationTupleScheme extends TupleScheme<CoinPurchaseReservation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CoinPurchaseReservation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProductId()) {
        optionals.set(0);
      }
      if (struct.isSetCountry()) {
        optionals.set(1);
      }
      if (struct.isSetCurrency()) {
        optionals.set(2);
      }
      if (struct.isSetPrice()) {
        optionals.set(3);
      }
      if (struct.isSetAppStoreCode()) {
        optionals.set(4);
      }
      if (struct.isSetLanguage()) {
        optionals.set(5);
      }
      if (struct.isSetPgCode()) {
        optionals.set(6);
      }
      if (struct.isSetRedirectUrl()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetProductId()) {
        oprot.writeString(struct.productId);
      }
      if (struct.isSetCountry()) {
        oprot.writeString(struct.country);
      }
      if (struct.isSetCurrency()) {
        oprot.writeString(struct.currency);
      }
      if (struct.isSetPrice()) {
        oprot.writeString(struct.price);
      }
      if (struct.isSetAppStoreCode()) {
        oprot.writeI32(struct.appStoreCode.getValue());
      }
      if (struct.isSetLanguage()) {
        oprot.writeString(struct.language);
      }
      if (struct.isSetPgCode()) {
        oprot.writeI32(struct.pgCode.getValue());
      }
      if (struct.isSetRedirectUrl()) {
        oprot.writeString(struct.redirectUrl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CoinPurchaseReservation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.productId = iprot.readString();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.country = iprot.readString();
        struct.setCountryIsSet(true);
      }
      if (incoming.get(2)) {
        struct.currency = iprot.readString();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.price = iprot.readString();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.appStoreCode = PaymentType.findByValue(iprot.readI32());
        struct.setAppStoreCodeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.language = iprot.readString();
        struct.setLanguageIsSet(true);
      }
      if (incoming.get(6)) {
        struct.pgCode = PaymentPgType.findByValue(iprot.readI32());
        struct.setPgCodeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.redirectUrl = iprot.readString();
        struct.setRedirectUrlIsSet(true);
      }
    }
  }

}

